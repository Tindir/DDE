
Функция Версия() Экспорт
	
	Возврат "БП.1.020322.1";
	
КонецФункции

Функция ИнициализацияСоединения(ДанныеУзлаПодключения) Экспорт
	
	Определение = Новый WSОпределения(ДанныеУзлаПодключения.МестоположениеWSDL, ДанныеУзлаПодключения.Пользователь, ДанныеУзлаПодключения.Пароль);
    Прокси = Новый WSПрокси(Определение, ДанныеУзлаПодключения.URIПространстваИменСервиса, ДанныеУзлаПодключения.ИмяСервиса, ДанныеУзлаПодключения.ИмяТочкиПодключения);       
		
	Прокси.Пользователь = ДанныеУзлаПодключения.Пользователь;
    Прокси.Пароль = ДанныеУзлаПодключения.Пароль;
	
	Возврат Прокси;
	
КонецФункции

#Область Обмен_УправлениеТорговлей

#Область ЗаявкаНаДС

#Область Получение_ЗаявкаНаДС

Процедура ВыполнитьПолучение_ЗаявкаНаДС(ДанныеДляОбработки) Экспорт
	
	ДочерниеУзлы = ДанныеДляОбработки.ДочерниеУзлы;
	Для Каждого КорневойУзел Из ДочерниеУзлы Цикл
		ИмяУзла = КорневойУзел.ИмяУзла;
		Если ИмяУзла = "ДанныеДляБП" Тогда
			ДанныеСообщения = КорневойУзел.ДочерниеУзлы;
			Для Каждого УзелЗаписи Из ДанныеСообщения Цикл
				ИмяУзлаЗаписи = УзелЗаписи.ИмяУзла;
				Если ИмяУзлаЗаписи = "ЦПЗ_ЗаявкаНаДенежныеСредства" Тогда
					ДанныеЗаполнения = ПодготовитьДанныеЗаполнения_ЗаявкаНаДС(УзелЗаписи);
					СоздатьДокументЗаявкаНаДС(ДанныеЗаполнения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьДанныеЗаполнения_ЗаявкаНаДС(ДанныеДокумента)
	
	Атрибуты = ДанныеДокумента.Атрибуты;

	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументГУИД").Значение);  
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	СтруктураДокумента.Вставить("Статус", Атрибуты.ПолучитьИменованныйЭлемент("", "Статус").Значение);
	СтруктураДокумента.Вставить("ДатаФактическогоИсполненияОбязательств", Атрибуты.ПолучитьИменованныйЭлемент("", "ДатаФактическогоИсполненияОбязательств").Значение);
	СтруктураДокумента.Вставить("ДокументыПредоставленыВБухгалтерию", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументыПредоставленыВБухгалтерию").Значение);
	СтруктураДокумента.Вставить("Проведен", Атрибуты.ПолучитьИменованныйЭлемент("", "Проведен").Значение);
	СтруктураДокумента.Вставить("Назначение", Атрибуты.ПолучитьИменованныйЭлемент("", "Назначение").Значение);
	СтруктураДокумента.Вставить("НазначениеПлатежа", Атрибуты.ПолучитьИменованныйЭлемент("", "НазначениеПлатежа").Значение);
	СтруктураДокумента.Вставить("ОбоснованиеПлатежа", Атрибуты.ПолучитьИменованныйЭлемент("", "ОбоснованиеПлатежа").Значение);
	СтруктураДокумента.Вставить("КонтрагентТип", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентТип").Значение);
	СтруктураДокумента.Вставить("КонтрагентНаименование", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентНаименование").Значение);
	СтруктураДокумента.Вставить("КонтрагентИНН", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентИНН").Значение);
	СтруктураДокумента.Вставить("КонтрагентКПП", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентКПП").Значение);
	СтруктураДокумента.Вставить("КонтрагентГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентГУИД").Значение);
	СтруктураДокумента.Вставить("ДоговорТип", Атрибуты.ПолучитьИменованныйЭлемент("", "ДоговорТип").Значение);
	СтруктураДокумента.Вставить("ДоговорНомер", Атрибуты.ПолучитьИменованныйЭлемент("", "ДоговорНомер").Значение);
	СтруктураДокумента.Вставить("ДоговорДата", Атрибуты.ПолучитьИменованныйЭлемент("", "ДоговорДата").Значение);
	СтруктураДокумента.Вставить("ДоговорНаименование", Атрибуты.ПолучитьИменованныйЭлемент("", "ДоговорНаименование").Значение);
	СтруктураДокумента.Вставить("СуммаДокумента", Атрибуты.ПолучитьИменованныйЭлемент("", "СуммаДокумента").Значение);
	СтруктураДокумента.Вставить("СтатьяДвиженияДенежныхСредствГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "СтатьяДвиженияДенежныхСредствГУИД").Значение);
	СтруктураДокумента.Вставить("ДатаПлатежа", Атрибуты.ПолучитьИменованныйЭлемент("", "ДатаПлатежа").Значение);
	СтруктураДокумента.Вставить("флСогласовалБухгалтер", Атрибуты.ПолучитьИменованныйЭлемент("", "флСогласовалБухгалтер").Значение);
	СтруктураДокумента.Вставить("флСогласовалЭкономист", Атрибуты.ПолучитьИменованныйЭлемент("", "флСогласовалЭкономист").Значение);
	СтруктураДокумента.Вставить("Сотрудник", Атрибуты.ПолучитьИменованныйЭлемент("", "Сотрудник").Значение);
	СтруктураДокумента.Вставить("ПодразделениеГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ПодразделениеГУИД").Значение);
	СтруктураДокумента.Вставить("ЖелаемаяДатаПлатежа", Атрибуты.ПолучитьИменованныйЭлемент("", "ЖелаемаяДатаПлатежа").Значение);
	СтруктураДокумента.Вставить("СтавкаНДС", Атрибуты.ПолучитьИменованныйЭлемент("", "СтавкаНДС").Значение);
	СтруктураДокумента.Вставить("ВидЗаявки", Атрибуты.ПолучитьИменованныйЭлемент("", "ВидЗаявки").Значение);
	СтруктураДокумента.Вставить("ВидОперации", Атрибуты.ПолучитьИменованныйЭлемент("", "ВидОперации").Значение);
	СтруктураДокумента.Вставить("БанковскийСчетТип", Атрибуты.ПолучитьИменованныйЭлемент("", "БанковскийСчетТип").Значение);
	СтруктураДокумента.Вставить("БанковскийСчетКонтрагента", Атрибуты.ПолучитьИменованныйЭлемент("", "БанковскийСчетКонтрагента").Значение);
	СтруктураДокумента.Вставить("БанковскийСчетКонтрагентаНомер", Атрибуты.ПолучитьИменованныйЭлемент("", "БанковскийСчетКонтрагентаНомер").Значение);
	СтруктураДокумента.Вставить("БанковскийСчетКонтрагентаБик", Атрибуты.ПолучитьИменованныйЭлемент("", "БанковскийСчетКонтрагентаБик").Значение);
	
	ДанныеТч_ДокументыОплаты = новый ТаблицаЗначений;
	КолонкиТч = ДанныеТч_ДокументыОплаты.Колонки;
	КолонкиТч.Добавить("ДокументыОплатыНомер", Новый ОписаниеТипов("Строка"));
	КолонкиТч.Добавить("ДокументыОплатыДата", Новый ОписаниеТипов("Дата"));
	КолонкиТч.Добавить("ДокументыОплатыСумма", Новый ОписаниеТипов("Число"));
	КолонкиТч.Добавить("ДокументыОплатыДатаИсполнения", Новый ОписаниеТипов("Дата"));
	
	ДочерниеУзлы = ДанныеДокумента.ДочерниеУзлы;
	Для каждого УзелТч Из ДочерниеУзлы Цикл
		Если УзелТч.ИмяУзла = "ЦПЗ_ЗаявкаНаДенежныеСредстваДокументыОплаты" Тогда
			
			АтрибцтыСтрТЧ = УзелТч.Атрибуты;
			ДокументыОплатыНомер = АтрибцтыСтрТЧ.ПолучитьИменованныйЭлемент("", "ДокументыОплатыНомер").Значение;
			ДокументыОплатыДата = АтрибцтыСтрТЧ.ПолучитьИменованныйЭлемент("", "ДокументыОплатыДата").Значение;
			ДокументыОплатыСумма = АтрибцтыСтрТЧ.ПолучитьИменованныйЭлемент("", "ДокументыОплатыСумма").Значение;
			ДокументыОплатыДатаИсполнения = АтрибцтыСтрТЧ.ПолучитьИменованныйЭлемент("", "ДокументыОплатыДатаФактическогоИсполненияОбязательств").Значение;
			
			СтрТЧ = ДанныеТч_ДокументыОплаты.Добавить();	
			Если ЗначениеЗаполнено(ДокументыОплатыНомер) Тогда
				СтрТч.ДокументыОплатыНомер = Строка(ДокументыОплатыНомер);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументыОплатыДата) Тогда 
				СтрТЧ.ДокументыОплатыДата = Дата(ДокументыОплатыДата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументыОплатыСумма) Тогда 
				СтрТЧ.ДокументыОплатыСумма = Число(ДокументыОплатыСумма);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументыОплатыДатаИсполнения) Тогда
				СтрТч.ДокументыОплатыДатаИсполнения = Дата(ДокументыОплатыДатаИсполнения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ТЧ_Оплаты",ДанныеТч_ДокументыОплаты); 
	
	Возврат СтруктураДокумента;
	
КонецФункции

Процедура СоздатьДокументЗаявкаНаДС(СтруктураДокумента)
	
	ДокументГУИД = СтруктураДокумента.ДокументГУИД;
	СсылкаДок = Документы.ЦПЗ_ЗаявкаНаДенежныеСредства.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(структураДокумента.ДокументГУИД)));
	НовыйДокумент = ложь;
	ОбъектДок = СсылкаДок.ПолучитьОбъект();
	Если ОбъектДок <> Неопределено Тогда
		Если СсылкаДок.Статус = "Оплачено" Тогда
			Возврат;
		КонецЕсли;
		ОбъектДок = СсылкаДок.ПолучитьОбъект();
	Иначе
		НовыйДокумент = истина;
		ОбъектДок = Документы.ЦПЗ_ЗаявкаНаДенежныеСредства.СоздатьДокумент();
		ОбъектДок.УстановитьСсылкуНового(СсылкаДок);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектДок,СтруктураДокумента);
	ОбъектДок.Статус = "Ожидает оплаты";
	Если СтруктураДокумента.КонтрагентТип = "Строка" Тогда
		ОбъектДок.Контрагент = СтруктураДокумента.КонтрагентНаименование;
		ОбъектДок.ДоговорКонтрагента = СтруктураДокумента.ДоговорНаименование;
		ОбъектДок.БанковскийСчетКонтрагента = СтруктураДокумента.БанковскийСчетКонтрагента;
	Иначе 
		ОбъектДок.Контрагент = ПолучитьКонтрагента(СтруктураДокумента);
		Если ЗначениеЗаполнено(ОбъектДок.Контрагент) Тогда
			Объектдок.ДоговорКонтрагента = ПолучитьДоговор(СтруктураДокумента, ОбъектДок.Контрагент);
			СтруктураДокумента.Вставить("Контрагентссылка", ОбъектДок.Контрагент);
			СпрБанковскийСчет = ПолучитьБанковскийсчет(ОбъектДок.Контрагент, СтруктураДокумента.БанковскийСчетКонтрагентаНомер, СтруктураДокумента.БанковскийСчетКонтрагентаБик);
			ОбъектДок.БанковскийСчетКонтрагента = СпрБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДок.Организация = ПолучитьОрганизацию(СтруктураДокумента.Организация);
	
	Объектдок.Сотрудник = НайтиПользователя(СтруктураДокумента.Сотрудник);
	Объектдок.СтатьяДвиженияДенежныхСредств = НайтиСсылкуСпрПоГУИД("СтатьиДвиженияДенежныхСредств",СтруктураДокумента.СтатьяДвиженияДенежныхСредствГУИД);
	Объектдок.Подразделение = НайтиСсылкуСпрПоГУИД("ПодразделенияОрганизаций",СтруктураДокумента.ПодразделениеГУИД);
	ОбъектДок.ВидЗаявки = НайтиПеречисление("ЦПЗ_ВидЗаявкиНаДенежныеСредства",СтруктураДокумента.ВидЗаявки);
	ОбъектДок.ВидОперации = НайтиПеречисление("ВидыОперацийСписаниеДенежныхСредств",СтруктураДокумента.ВидОперации);
	ОбъектДок.СтавкаНДС = НайтиПеречисление("СтавкиНДС",СтруктураДокумента.СтавкаНДС);
	
	ОбъектДок.ДатаФактическогоИсполненияОбязательств = Дата(СтруктураДокумента.ДатаФактическогоИсполненияОбязательств);
	ОбъектДок.ДокументыПредоставленыВБухгалтерию = Булево(Число(СтруктураДокумента.ДокументыПредоставленыВБухгалтерию));
	
	ОбъектДок.Назначение = СтруктураДокумента.Назначение;
	ОбъектДок.НазначениеПлатежа = СтруктураДокумента.НазначениеПлатежа;
	Попытка
		ОбъектДок.ОбоснованиеПлатежа = СтруктураДокумента.ОбоснованиеПлатежа;
	Исключение
	КонецПопытки;
	
	ОбъектДок.ДокументыОплаты.Очистить();
	ТчДанныеОплаты = СтруктураДокумента.ТЧ_Оплаты;
	Для каждого СтрДанныхТч Из ТчДанныеОплаты Цикл
		
		СтрТч = ОбъектДок.ДокументыОплаты.Добавить();
		СтрТч.Дата = СтрДанныхТч.ДокументыОплатыДата;
		СтрТч.Номер = СтрДанныхТч.ДокументыОплатыНомер;
		СтрТч.Сумма = СтрДанныхТч.ДокументыОплатыСумма;
		СтрТч.ДатаФактическогоИсполненияОбязательств = СтрДанныхТч.ДокументыОплатыДатаИсполнения;
		
	КонецЦикла;
	
	Если СтруктураДокумента.Проведен = "1" Тогда
		ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
		Документы.ЦПЗ_ЗаявкаНаДенежныеСредства.ВвестиНаОснованииСервер(ОбъектДок.Ссылка);
	Иначе
		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры
	
Функция НайтиПользователя(вхСотрудник)
	Результат="";
	Если ЗначениеЗаполнено(вхСотрудник) Тогда
		времПользователи=Справочники.Пользователи;
		НайденнаяСсылка = времПользователи.НайтиПоНаименованию(СокрЛп(вхСотрудник));	
		Если НайденнаяСсылка = времПользователи.ПустаяСсылка() Тогда
   			Результат="";
		Иначе
			Результат=НайденнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция НайтиПеречисление(вхИмяПеречисления,вхЗначенияПеречисления) //для Перечислений
    Для каждого ЭлементПеречисления Из Метаданные.Перечисления[вхИмяПеречисления].ЗначенияПеречисления Цикл
        Если ЭлементПеречисления.Синоним = вхЗначенияПеречисления ИЛИ ЭлементПеречисления.Имя = вхЗначенияПеречисления Тогда
            Возврат Перечисления[вхИмяПеречисления][ЭлементПеречисления.Имя];
        КонецЕсли; 
	КонецЦикла;	
	Возврат "";
КонецФункции

функция НайтиСсылкуСпрПоГУИД(вхСпр,вхГуид)    //универсальная функции в отличии от которой ниже
	Если СокрЛП(вхГуид) = "" тогда
		времСпр = Справочники[вхСпр].ПустаяСсылка();
	ИНаче
		времСпр = Справочники[вхСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(вхГуид)));
	КонецЕсли;
	Возврат времСпр;
КонецФункции

Функция ПолучитьДоговор(вхСтруктураДокумента,вхКонтрагент)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	времДоговорСсылка = МенеджерСправочника.ПустаяСсылка(); 
	
	Если Не (вхСтруктураДокумента.ДоговорНомер="") Тогда
		Если вхКонтрагент <> "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.Номер = &Номер";
			Запрос.УстановитьПараметр("Владелец", вхКонтрагент);
			Запрос.УстановитьПараметр("Номер", вхСтруктураДокумента.ДоговорНомер);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				времДоговорСсылка=ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат времДоговорСсылка;
	
КонецФункции

Функция ПолучитьБанковскийсчет(Контрагент, НомерСчета, БикБанка)
	
	ЗначениеВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.Владелец КАК Владелец,
		|	БанковскиеСчета.Код КАК Код,
		|	БанковскиеСчета.Наименование КАК Наименование,
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.Банк КАК Банк
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|	И БанковскиеСчета.Банк.Код = &БикБанка 
		|	И БанковскиеСчета.ПометкаУдаления = Ложь";
	//
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("БикБанка", БикБанка);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗначениеВозврата = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура СоздатьДокументПОТ(структураДокумента,знач ЧтениеXML)
	
	//Найдем документ
	ДокументГУИД = структураДокумента.ДокументГУИД;
	ссылкадок = документы.ЦИТ_ПриходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(структураДокумента.ДокументГУИД)));
	новыйДокумент = ложь;
	Если Сокрлп(СсылкаДок.Номер) <> "" Тогда
		
	    ОбъектДок = ссылкадок.ПолучитьОбъект();
		
		
	Иначе
		новыйДокумент = истина;
		ОбъектДок = Документы.ЦИТ_ПриходныйОрдерНаТовары.СоздатьДокумент();
		ОбъектДок.УстановитьСсылкуНового(СсылкаДок);
		объектдок.СостояниеДокумента = ПолучитьСостояниеДокумента(структураДокумента.СостояниеДокумента);
	КонецЕсли;
	ОбъектДок.Номер          = структураДокумента.Номер;
	ОбъектДок.Дата           = структураДокумента.Дата;
	ОбъектДок.Водитель       = структураДокумента.Водитель;
	ОбъектДок.Автомобиль     = структураДокумента.Автомобиль;
	ОбъектДок.Ответственный  = структураДокумента.Ответственный;
	ОбъектДок.Комментарий    = структураДокумента.Комментарий;
	ОбъектДок.Склад          = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(структураДокумента.СкладГУИД)));
	объектдок.Контрагент     = ПолучитьКонтрагента(структураДокумента);
	структураДокумента.Вставить("Контрагентссылка",объектдок.Контрагент);
//	объектДок.Комментарий          = "Загружено из УТ "+ТекущаяДата();

	
	// Заполняем таб части  **************************************************************
	
	// читаем дальше файл
	буфЧтениеXML = ЧтениеXML;
	// готовим таблицы

	объектДок.Товары.Очистить();
	
	
	Пока буфЧтениеXML.Прочитать() Цикл
		
		
		Если буфЧтениеXML.Имя = "ПриходныйОрдерНаТоварыТаблицаТовары" Тогда
			Если БуфЧтениеXML.типузла = ТипУзлаXML.НачалоЭлемента тогда
				Продолжить
		    КонецЕсли;
			аа = объектДок.Товары.Добавить();
			аа.Номенклатура = НайтиНоменклатуруПоГУИД(буфЧтениеXML.ЗначениеАтрибута("ТоварыНоменклатураГУИД"));
			аа.Количество   = Число(буфЧтениеXML.ЗначениеАтрибута("ТоварыКоличество"));
			аа.информация   = Строка(буфЧтениеXML.ЗначениеАтрибута("ТоварыКомментарий"));
			
			ЧтениеXML = буфЧтениеXML;
		Иначе
			Прервать; // значит возвращаем прошлое значение переменной ЧтениеXML
		КонецЕсли;
	КонецЦикла;
	
	//Если Сокрлп(объектдок.ЗаказКлиента) = "" тогда
	//    ПодобратьРеализациюПоРОТ(объектдок);
	//	
	//КонецЕсли;
	
	// Записываем и проводим *****************************************************************
	Если объектдок.состояниеДокумента = Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.ОтправленвУТ или
		объектдок.состояниеДокумента = Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.ПринятвБУ тогда
		// не будем ничего грузить
	иначе
		объектдок.СостояниеДокумента = ПолучитьСостояниеДокумента(структураДокумента.СостояниеДокумента);
		Если новыйДокумент = истина Тогда
			попытка
				объектдок.Записать(режимЗаписиДокумента.Запись);
			исключение
				сообщить(""+ОписаниеОшибки());
			Конецпопытки;
			попытка
				объектдок.Записать(режимЗаписидокумента.Проведение);
			исключение
				сообщить(""+ОписаниеОшибки());
			Конецпопытки;
			Сообщить("**** Изменен док"+объектдок.ссылка+",ГУИД = "+структураДокумента.ДокументГУИД);
		иначе
			попытка
				объектдок.Записать(режимЗаписидокумента.Проведение);
			исключение
				сообщить(""+ОписаниеОшибки());
			Конецпопытки;
			Сообщить("*** Изменен док"+объектдок.ссылка+",ГУИД = "+структураДокумента.ДокументГУИД);
		КонецЕсли;
	КонецЕсли;
	//а = 2/0;

	
КонецПроцедуры

Функция ПолучитьКонтрагента(СтруктураДокумента)
	
	СправочникСсылка = Справочники.Контрагенты.ПолучитьСсылку(новый УникальныйИдентификатор(СокрЛП(СтруктураДокумента.КонтрагентГУИД)));
	Если Сокрлп(СправочникСсылка.Инн) = "" И СтруктураДокумента.КонтрагентИНН <> NULL Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИНН", СокрЛП(СтруктураДокумента.КонтрагентИНН));
		Запрос.УстановитьПараметр("ОтборПоКПП", Ложь);
		Если СтруктураДокумента.Свойство("КонтрагентКПП") Тогда
			Запрос.УстановитьПараметр("ОтборПоКПП", Истина);
			Запрос.УстановитьПараметр("КПП", СокрЛП(СтруктураДокумента.КонтрагентКПП));
		КонецЕсли;
			
		Запрос.Текст = "ВЫБРАТЬ Разрешенные 
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ИНН = &ИНН
					   |	И Выбор когда &ОтборПоКПП = Истина Тогда 
					   |		Контрагенты.КПП = &КПП
					   |		Иначе Истина Конец";
		вв = Запрос.Выполнить().Выбрать();
		Если вв.Следующий() тогда
			возврат вв.ссылка;
		КонецЕсли;
		Возврат ""; // пока так, грузить не будем
	иначе
		возврат СправочникСсылка;
	КонецЕсли;
КонецФункции

Функция ПолучитьСостояниеДокумента(состояниеДокумента)
	Если состояниеДокумента = "Отправлен в БУ" тогда
		возврат Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.ОтправленвБУ;
	КонецЕсли;
	возврат Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.Черновик;
КонецФункции

#КонецОбласти

#Область Получение_ЗаявкаНаДс_Статус

Процедура ВыполнитьПолучение_ЗаявкаНаДС_Статус(ДанныеДляОбработки) Экспорт
	
	СпискиДокументов = ДанныеДляОбработки.ДочерниеУзлы;
	Для каждого СписокДокументов Из СпискиДокументов Цикл
		Для каждого СтрСписка Из СписокДокументов.ДочерниеУзлы Цикл
			СтрокаГУИД = "";
			ТипЗнчДанных = "";
			Для каждого РеквизитыСтр Из СтрСписка.ДочерниеУзлы Цикл
				Если РеквизитыСтр.ИмяУзла = "ДокументСсылка" Тогда
					СтрокаГУИД = РеквизитыСтр.ТекстовоеСодержимое;	
				ИначеЕсли  РеквизитыСтр.ИмяУзла = "ТипЗнч" Тогда
					ТипЗнчДанных = РеквизитыСтр.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаГУИД <> "" И ТипЗнчДанных <> "" Тогда
				
				ТекущийСтатусДокумента = "";
				
				МенеджерОбъекта = Новый (СтрЗаменить(ТипЗнчДанных, ".", "Менеджер.")); 
				СсылкаНаДокумент = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаГУИД)));
				
				ОбъектДок = СсылкаНаДокумент.ПолучитьОбъект();
				Если ОбъектДок <> Неопределено Тогда
					ТекущийСтатусДокумента = СсылкаНаДокумент.Статус;
				КонецЕсли;
				
				УстановитьТекщийСтатусВДокументДОМ(ДанныеДляОбработки, СтрСписка, ТекущийСтатусДокумента);
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьТекщийСтатусВДокументДОМ(ДокументДом, СтрСписка, ТекущийСтатусДокумента)
	
	ЭлементСтатус = ДокументДом.СоздатьЭлемент("СтатусДокумента");
	ДанныеСтрокаСписка = ДокументДом.СоздатьТекстовыйУзел(Строка(ТекущийСтатусДокумента));
	ЭлементСтатус.ДобавитьДочерний(ДанныеСтрокаСписка);
	СтрСписка.ДобавитьДочерний(ЭлементСтатус);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасходныйОрдерНаТовары

Функция ВыполнитьПолучение_РасходныйОрдерНаТовары(ДанныеДляОбработки) Экспорт 
	//Документы.ЦИТ_РасходныйОрдерНаТовары
	Результат = Неопределено;
	
	ДочерниеУзлы = ДанныеДляОбработки.ДочерниеУзлы;
	Для Каждого КорневойУзел Из ДочерниеУзлы Цикл
		ИмяУзла = КорневойУзел.ИмяУзла;
		Если ИмяУзла = "ДанныеДляБП" Тогда
			ДанныеСообщения = КорневойУзел.ДочерниеУзлы;
			Для Каждого УзелЗаписи Из ДанныеСообщения Цикл
				ИмяУзлаЗаписи = УзелЗаписи.ИмяУзла;
				Если ИмяУзлаЗаписи = "РасходныйОрдерНаТовары" Тогда
					ДанныеЗаполнения = ПодготовитьДанныеЗаполнения_РасходныйОрдерНаТовары(УзелЗаписи);
					Результат = СоздатьДокумент_РасходныйОрдерНаТовары(ДанныеЗаполнения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_РасходныйОрдерНаТовары(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	СтруктураДокумента.Вставить("СостояниеДокумента", Атрибуты.ПолучитьИменованныйЭлемент("", "СостояниеДокумента").Значение);
	СтруктураДокумента.Вставить("ПриемПоВесамКлиента", Атрибуты.ПолучитьИменованныйЭлемент("", "ПриемПоВесамКлиента").Значение);
	СтруктураДокумента.Вставить("СкладГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГУИД").Значение);
	СтруктураДокумента.Вставить("КонтрагентИНН", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентИНН").Значение);
	СтруктураДокумента.Вставить("КонтрагентКПП", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентКПП").Значение);
	СтруктураДокумента.Вставить("КонтрагентГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "КонтрагентГУИД").Значение);
	СтруктураДокумента.Вставить("ГрузополучательИНН", Атрибуты.ПолучитьИменованныйЭлемент("", "ГрузополучательИНН").Значение);
	СтруктураДокумента.Вставить("ГрузополучательКПП", Атрибуты.ПолучитьИменованныйЭлемент("", "ГрузополучательКПП").Значение);
	СтруктураДокумента.Вставить("ГрузополучательГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "Грузополучатель").Значение);
	СтруктураДокумента.Вставить("Автомобиль", Атрибуты.ПолучитьИменованныйЭлемент("", "Автомобиль").Значение);
	СтруктураДокумента.Вставить("Водитель", Атрибуты.ПолучитьИменованныйЭлемент("", "Водитель").Значение);
	СтруктураДокумента.Вставить("Ответственный", Атрибуты.ПолучитьИменованныйЭлемент("", "Ответственный").Значение);
	СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение);
	СтруктураДокумента.Вставить("ОтгружаемыеТовары", ИнициализироватьТЧ_РОТОтгружаемыеТовары());
	
	Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
		Если ЭлДочерний.ИмяУзла = "РасходныйОрдерНаТоварыТаблицаТовары" Тогда
			СтрТч = СтруктураДокумента.ОтгружаемыеТовары.Добавить();
			СтрТч.Номенклатура		= НайтиНоменклатуруПоГУИД(ЭлДочерний.Атрибуты.ПолучитьИменованныйЭлемент("", "ТоварыНоменклатураГУИД").Значение);
			СтрТч.Количество		= Число(ЭлДочерний.Атрибуты.ПолучитьИменованныйЭлемент("", "ТоварыКоличествоФакт").Значение);
			СтрТч.КоличествоК		= Число(ЭлДочерний.Атрибуты.ПолучитьИменованныйЭлемент("", "ТоварыКоличествоК").Значение);
			СтрТч.Цена				= Число(ЭлДочерний.Атрибуты.ПолучитьИменованныйЭлемент("", "ТоварыЦена").Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_РОТОтгружаемыеТовары()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("КоличествоПустой",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("КоличествоГруженный",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("КоличествоК",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Цена",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Информация",  Новый ОписаниеТипов("Строка"));
	
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_РасходныйОрдерНаТовары(СтруктураДанных)
	
	ДокументГУИД = СтруктураДанных.ДокументГУИД;
	ДокументСсылка = Документы.ЦИТ_РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.ДокументГУИД)));
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ЦИТ_РасходныйОрдерНаТовары.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
		ДокументОбъект.СостояниеДокумента = ПолучитьСостояниеДокумента(СтруктураДанных.СостояниеДокумента);
	КонецЕсли;
	
	ДокументОбъект.Номер				= СтруктураДанных.Номер;
	ДокументОбъект.Дата					= СтруктураДанных.Дата;
	ДокументОбъект.Водитель				= СтруктураДанных.Водитель;
	ДокументОбъект.Автомобиль			= СтруктураДанных.Автомобиль;
	ДокументОбъект.Ответственный		= СтруктураДанных.Ответственный;
	ДокументОбъект.Комментарий			= СтруктураДанных.Комментарий;
	ДокументОбъект.ПриемПоВесамКлиента	= СтруктураДанных.ПриемПоВесамКлиента;
	ДокументОбъект.Склад				= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.СкладГУИД)));
	ДокументОбъект.Контрагент			= ПолучитьКонтрагента(СтруктураДанных);
	
	СтруктураДанных.Вставить("КонтрагентСсылка", ДокументОбъект.Контрагент);

	Грузополучатель = новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", СтруктураДанных.ГрузополучательГУИД, СтруктураДанных.ГрузополучательИНН, СтруктураДанных.ГрузополучательКПП);
	ДокументОбъект.Грузополучатель = ПолучитьКонтрагента(Грузополучатель);

	ДокументОбъект.Товары.Очистить();
	
	ТЧ = ДокументОбъект.Товары;
	Для Каждого Стр Из СтруктураДанных.ОтгружаемыеТовары Цикл
		СтрТч = Тч.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
	КонецЦикла;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.СостояниеДокумента = Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.ПринятвБУ;
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат "" + ДокументОбъект.СостояниеДокумента; 
	
КонецФункции

#КонецОбласти

#Область Получение_ДанныеПоОтгрузке

Функция ВыполнитьПолучение_ДанныеПоОтгрузке(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ДанныеПоОтгрузке(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ДанныеПоОтгрузке");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_ДанныеПоОтгрузке(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ДанныеПоОтгрузке(ПараметрыЗапроса)
	
	//ЗначениеВозврата = Новый Структура();
	//ЗначениеВозврата.Вставить("НомераВходящихТранспортныхДокументов", ПараметрыЗапроса);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_ДанныеПоОтгрузке(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.Номенклатура); 
	Колонки.Удалить(Колонки.ПартияТовара);
	Колонки.Удалить(Колонки.Организация);
	Колонки.Удалить(Колонки.Контрагент);  
	Колонки.Удалить(Колонки.Перевозчик);
	Колонки.Удалить(Колонки.Грузополучатель);
	Колонки.Удалить(Колонки.Договор);
	Колонки.Удалить(Колонки.СкладЗаказа); 
	Колонки.Удалить(Колонки.СкладРасходногоОрдера);
	Колонки.Удалить(Колонки.ДокументРасходныйОрдерНаТовары);
	Колонки.Удалить(Колонки.ДокументЗаказКлиента);
	
	Колонки.Добавить("Номенклатура", новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Колонки.Добавить("ПартияТовара", новый ОписаниеТипов("СправочникСсылка.ЦПЗ_ПартииТовара"));
	Колонки.Добавить("Организация", новый ОписаниеТипов("СправочникСсылка.Организации"));
	Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Грузополучатель", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Перевозчик", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Договор", новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("СкладЗаказа", новый ОписаниеТипов("СправочникСсылка.Склады"));  
	Колонки.Добавить("СкладРасходногоОрдера", новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("ДокументРасходныйОрдерНаТовары", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ДокументЗаказКлиента", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Стр.НоменклатураГУИД);
		Стр.ПартияТовара = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(Стр.ПартияТовараГУИД);
		Стр.Организация = ПолучитьОрганизацию(Стр.ДанныеОрганизации);//Справочники.Организации.ПолучитьСсылку(Стр.ОрганизацияГУИД); 
		Стр.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", Стр.КонтрагентГУИД, Стр.КонтрагентИНН, Стр.КонтрагентКПП));
		Стр.Грузополучатель = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", Стр.ГрузополучательГУИД, Стр.ГрузополучательИНН, Стр.ГрузополучательКПП));
		Стр.Перевозчик = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", Стр.ПеревозчикГУИД, Стр.ПеревозчикИНН, Стр.ПеревозчикКПП));
		Стр.Договор = ПолучитьДоговор(Новый Структура("ДоговорНомер", Стр.ДоговорНомер), Стр.Контрагент);
		Стр.СкладЗаказа = Справочники.Склады.ПолучитьСсылку(Стр.СкладЗаказаГУИД); 
		Стр.СкладРасходногоОрдера = Справочники.Склады.ПолучитьСсылку(Стр.СкладРасходногоОрдераГУИД);
		Стр.ДокументРасходныйОрдерНаТовары = "Расходный ордер на товары " + Стр.ДокументРасходныйОрдерНаТоварыНомер + " от " + Стр.ДокументРасходныйОрдерНаТоварыДата;
		Стр.ДокументЗаказКлиента = "Заказ клиента " + Стр.ДокументЗаказКлиентаНомер + " от " + Стр.ДокументЗаказКлиентаДата;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_СписаниеТМЦ

#Область Получение_СписаниеТМЦ_Список

Функция ВыполнитьПолучение_СписаниеТМЦ_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_СписаниеТМЦ_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СписаниеТМЦ.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_СписаниеТМЦ_Список(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_СписаниеТМЦ_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_СписаниеТМЦ_Список(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.СписаниеТМЦ_Ссылка);
	Колонки.Удалить(Колонки.СкладГлавный_Ссылка);
	
	Колонки.Добавить("СкладГлавный_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ТребованиеНакладная"));  
	Если ЭтоБухгалтерияСельскохозяйственногоПредприятия() Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.схАктОбИспользованииУдобрений"));
	КонецЕсли;
	Колонки.Добавить("ДокументСкладскогоУчета", новый ОписаниеТипов(МассивТипов));
	Колонки.Добавить("ДокументУчетаВЭксплуатации", новый ОписаниеТипов("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"));

	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.СкладГлавный_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГлавныйГУИД);
		
		ДокументГУИД = Стр.ДокументСкладскогоУчетаГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;   
		
		Если НЕ ИспользоватьРасширенныйСписокДокументовПриемников() Тогда
			ДокументСсылка = Документы.ТребованиеНакладная.ПолучитьСсылку(ДокументГУИД);
			Стр.ДокументСкладскогоУчета = ДокументСсылка;
		КонецЕсли;
		Если ИспользоватьРасширенныйСписокДокументовПриемников() Тогда
			ДокументСсылка = Неопределено;	
			Попытка
				ДокументСсылкаТребованиеНакладная = Документы.ТребованиеНакладная.ПолучитьСсылку(ДокументГУИД);
				ДокументСсылкаАктИспользованияУдобрений = Документы.схАктОбИспользованииУдобрений.ПолучитьСсылку(ДокументГУИД);
				
				Если Сокрлп(ДокументСсылкаТребованиеНакладная.ВерсияДанных) <> "" Тогда
					ДокументСсылка = ДокументСсылкаТребованиеНакладная;					
				КонецЕсли;
				Если Сокрлп(ДокументСсылкаАктИспользованияУдобрений.ВерсияДанных) <> "" Тогда
					ДокументСсылка = ДокументСсылкаАктИспользованияУдобрений;					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			Стр.ДокументСкладскогоУчета = ДокументСсылка;
		КонецЕсли;
		ДокументГУИД = Стр.ДокументУчетаВЭксплуатацииГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		ДокументСсылка = Документы.СписаниеМатериаловИзЭксплуатации.ПолучитьСсылку(ДокументГУИД);
		Стр.ДокументУчетаВЭксплуатации = ДокументСсылка;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_СписаниеТМЦ_Объект

Функция ВыполнитьПолучение_СписаниеТМЦ(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки, ТипДокументаПриемник = "ТребованиеНакладная") Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СписаниеТМЦ.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		ДочерниеУзлы = ДанныеДляОбработки.ДочерниеУзлы;
		Для Каждого КорневойУзел Из ДочерниеУзлы Цикл
			ИмяУзла = КорневойУзел.ИмяУзла;
			Если ИмяУзла = "ДанныеДляБП" Тогда
				ДанныеСообщения = КорневойУзел.ДочерниеУзлы;
				Для Каждого УзелЗаписей Из ДанныеСообщения Цикл
					ИмяУзла = УзелЗаписей.ИмяУзла;
					Если ИмяУзла = "СписанияТМЦ" Тогда
						
						Результат = Новый Структура();
						Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
						Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
						Результат.Вставить("ДокументУчетаВЭксплуатацииГУИД", "");
						Результат.Вставить("ДокументУчетаВЭксплуатацииПредставление", "");
						
						ДанныеДокумента = УзелЗаписей.ДочерниеУзлы;
						Для Каждого УзелЗаписи Из ДанныеДокумента Цикл 
							ДанныеЗаполнения = ПодготовитьДанныеЗаполнения_СписаниеТМЦ(УзелЗаписи);  
							
							Если НЕ ИспользоватьРасширенныйСписокДокументовПриемников() Тогда
								ДанныеСписаниеТМЦ = СоздатьДокумент_СписаниеТМЦ(ДанныеЗаполнения); 
							КонецЕсли;
							Если ИспользоватьРасширенныйСписокДокументовПриемников() Тогда 
								Если ТипДокументаПриемник = "ТребованиеНакладная" Тогда
									ДанныеСписаниеТМЦ = СоздатьДокумент_СписаниеТМЦ(ДанныеЗаполнения); 
								ИначеЕсли ТипДокументаПриемник = "схАктОбИспользованииУдобрений" Тогда
									ДанныеСписаниеТМЦ = СоздатьДокумент_АктОбИспользованииУдобрений(ДанныеЗаполнения); 
								КонецЕсли;
							КонецЕсли;							
							
							Если ДанныеСписаниеТМЦ <> Неопределено Тогда
								Результат.ДокументСкладскогоУчетаГУИД = ДанныеСписаниеТМЦ.ДокументСкладскогоУчетаГУИД;
								Результат.ДокументСкладскогоУчетаПредставление = ДанныеСписаниеТМЦ.ДокументСкладскогоУчетаПредставление;
							КонецЕсли;
							ДанныеСписаниеВЭксплуатацию = СоздатьДокумент_СписаниеВЭксплуатацию(ДанныеЗаполнения);
							Если ДанныеСписаниеВЭксплуатацию <> Неопределено Тогда
								Результат.ДокументУчетаВЭксплуатацииГУИД = ДанныеСписаниеВЭксплуатацию.ДокументУчетаВЭксплуатацииГУИД;
								Результат.ДокументУчетаВЭксплуатацииПредставление = ДанныеСписаниеВЭксплуатацию.ДокументУчетаВЭксплуатацииПредставление;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_СписаниеТМЦ(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГлавный").Значение);
	СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 

	СтруктураДокумента.Вставить("ДокументСкладскогоУчетаГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументСкладскогоУчетаГУИД").Значение);
	СтруктураДокумента.Вставить("Создать_ДокументСкладскогоУчета", Ложь);

	СтруктураДокумента.Вставить("ДокументУчетаВЭксплуатацииГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументУчетаВЭксплуатацииГУИД").Значение); 
	СтруктураДокумента.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
	
	СтруктураДокумента.Вставить("Материалы", ИнициализироватьТЧ_СписаниеТМЦ());
	
	Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
		Если ЭлДочерний.ИмяУзла = "СписаниеТМЦ_СписокТМЦ" Тогда
			Для каждого СтрДанных Из ЭлДочерний.ДочерниеУзлы Цикл
				СтрТЧ = СтруктураДокумента.Материалы.Добавить();
				
				СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТМЦ").Значение);
				СтрТЧ.Количество = Число(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "Количество").Значение);
				
				СчетУчетаСтрока = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "СчетУчетаСтрока").Значение;
				СтрТЧ.СчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СчетУчетаСтрока, ".", ""));
				
				ТипОбъектСписания = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъектСписания").Значение;
				Если ТипОбъектСписания = "ЦПЗ_ОсновныеСредства" Тогда
					 СтрТЧ.ОбъектСписания = НайтиОсновноеСредствоПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОбъектСписания").Значение)
				КонецЕсли;
				Если ТипОбъектСписания = "ФизическиеЛица" Тогда
					 СтрТЧ.ОбъектСписания = Справочники.ФизическиеЛица.ПустаяСсылка();
				КонецЕсли;
				
				ТипОснованиеДляВыбытия = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОснованиеДляВыбытия");
				ОснованиеДляВыбытия = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОснованиеДляВыбытия");
				Если ТипОснованиеДляВыбытия <> Неопределено 
						И ОснованиеДляВыбытия <> Неопределено Тогда
					//		
					Если СтрНайти(ТипОснованиеДляВыбытия.Значение, "СтруктураПосевныхПлощадей") <> 0  Тогда
						СтрТЧ.ОснованиеДляВыбытия = НайтиСтруктураПосевныхПлощадейПоГУИД(ОснованиеДляВыбытия.Значение);	
					Иначе
						СтрТЧ.ОснованиеДляВыбытия = ОснованиеДляВыбытия.Значение;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрТЧ.СчетУчетаСтрока.Забалансовый = Истина Тогда 
					СтруктураДокумента.Создать_ДокументУчетаВЭксплуатации = Истина;	
				Иначе
					СтруктураДокумента.Создать_ДокументСкладскогоУчета = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_СписаниеТМЦ()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("СчетУчетаСтрока", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОбъектСписания", ОписаниеТипов);
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	
	Если Метаданные.Справочники.Найти("схСтруктураПосевныхПлощадей") <> Неопределено Тогда
		ДополнитьМассивТиповКолонкиОснованиеДляВыбытия(Массив);
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОснованиеДляВыбытия", ОписаниеТипов);
	
	Возврат ТЧ;
	
КонецФункции

Процедура ДополнитьМассивТиповКолонкиОснованиеДляВыбытия(Массив)
	Массив.Добавить(Тип("СправочникСсылка.схСтруктураПосевныхПлощадей"));
КонецПроцедуры

Функция СоздатьДокумент_СписаниеТМЦ(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.ТребованиеНакладная.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ТребованиеНакладная.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.Организация.ГУИД
										, СтруктураДанных.Организация.Наименование
										, СтруктураДанных.Организация.ИНН
										, СтруктураДанных.Организация.КПП
										, СтруктураДанных.Организация.Префикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.Склад)));
	Если СокрЛП(ДокументОбъект.Склад.ВерсияДанных) <> "" Тогда
		ДокументОбъект.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
	КонецЕсли;
	
	ДокументОбъект.Материалы.Очистить();
	
	ТЧ = ДокументОбъект.Материалы;
	Для Каждого Стр Из СтруктураДанных.Материалы Цикл
		
		Если Стр.СчетУчетаСтрока.Забалансовый = Ложь Тогда
			
			СтрТч = Тч.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			СтрТЧ.Счет = Стр.СчетУчетаСтрока;
			СтрТЧ.ЦИТ_ФизическоеЛицо = Стр.ОбъектСписания;
			
			Попытка
				ЕстьРеквизит_СтруктураПосевныхПлощадей = ЕстьРеквизитОбъекта("ЦИТ_СтруктураПосевныхПлощадей", ДокументОбъект, "Материалы");
				Если ЕстьРеквизит_СтруктураПосевныхПлощадей Тогда
					СтрТЧ.ЦИТ_СтруктураПосевныхПлощадей = Стр.ОснованиеДляВыбытия;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;		
	
	КонецЦикла;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

Функция СоздатьДокумент_АктОбИспользованииУдобрений(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.схАктОбИспользованииУдобрений.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.схАктОбИспользованииУдобрений.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.Организация.ГУИД
										, СтруктураДанных.Организация.Наименование
										, СтруктураДанных.Организация.ИНН
										, СтруктураДанных.Организация.КПП
										, СтруктураДанных.Организация.Префикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.Склад)));
	Если СокрЛП(ДокументОбъект.Склад.ВерсияДанных) <> "" Тогда
		ДокументОбъект.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
	КонецЕсли;
	
	ДокументОбъект.Материалы.Очистить();
	
	ТЧ = ДокументОбъект.Материалы;
	Для Каждого Стр Из СтруктураДанных.Материалы Цикл
		
		Если Стр.СчетУчетаСтрока.Забалансовый = Ложь Тогда
			
			СтрТч = Тч.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			
			СтрТЧ.ЕдиницаИзмерения  = Стр.Номенклатура.ЕдиницаИзмерения;
			
			СтрТЧ.Счет = Стр.СчетУчетаСтрока;
			//СтрТЧ.СтруктураПосевныхПлощадей = Стр.ОбъектСписания;
			
			Попытка
				ЕстьРеквизит_СтруктураПосевныхПлощадей = ЕстьРеквизитОбъекта("СтруктураПосевныхПлощадей", ДокументОбъект, "Материалы");
				Если ЕстьРеквизит_СтруктураПосевныхПлощадей Тогда
					СтрТЧ.СтруктураПосевныхПлощадей = Стр.ОснованиеДляВыбытия;
					Если ТипЗнч(Стр.ОснованиеДляВыбытия) = Тип("СправочникСсылка.схСтруктураПосевныхПлощадей") Тогда
						СтрТч.ПлощадьПоля = Стр.ОснованиеДляВыбытия.ПлощадьПоля;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;		
	
	КонецЦикла;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции
	
Функция СоздатьДокумент_СписаниеВЭксплуатацию(СтруктураДанных)
		
	Если НЕ СтруктураДанных.Создать_ДокументУчетаВЭксплуатации Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументУчетаВЭксплуатацииГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.СписаниеМатериаловИзЭксплуатации.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.СписаниеМатериаловИзЭксплуатации.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.Организация.ГУИД
										, СтруктураДанных.Организация.Наименование
										, СтруктураДанных.Организация.ИНН
										, СтруктураДанных.Организация.КПП
										, СтруктураДанных.Организация.Префикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
		
	Для Каждого Стр Из СтруктураДанных.Материалы Цикл
		
		Если Стр.СчетУчетаСтрока.Забалансовый = Истина Тогда
			
			Если Стр.СчетУчетаСтрока.Код = "МЦ.04" Тогда
				
				СтрТч = ДокументОбъект.ИнвентарьИХозяйственныеПринадлежности.Добавить();
				СтрТЧ.Номенклатура = Стр.Номенклатура;
				СтрТч.Количество = Стр.Количество;
				
			КонецЕсли;
			Если Стр.СчетУчетаСтрока.Код = "МЦ.03" Тогда
				
				СтрТч = ДокументОбъект.Спецоснастка.Добавить();
				СтрТЧ.Номенклатура = Стр.Номенклатура;
				СтрТч.Количество = Стр.Количество;
				СтрТЧ.СчетПередачи = Стр.СчетУчетаСтрока;
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЦикла;

	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат Новый Структура("ДокументУчетаВЭксплуатацииГУИД, ДокументУчетаВЭксплуатацииПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

#КонецОбласти

#Область Получение_СписаниеТМЦ_Обновить

Функция ВыполнитьПолучение_СписаниеТМЦ_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СписаниеТМЦ.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Получение_ПеремещениеТМЦ

#Область Получение_ПеремещениеТМЦ_Список

Функция ВыполнитьПолучение_ПеремещениеТМЦ_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ПеремещениеТМЦ.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_ПеремещениеТМЦ_Список(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_ПеремещениеТМЦ_Список(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.ДокументТМЦ_Ссылка);
	Колонки.Удалить(Колонки.СкладГлавныйОтправитель_Ссылка);
	Колонки.Удалить(Колонки.СкладГлавныйПолучатель_Ссылка);
	
	Колонки.Добавить("СкладГлавныйОтправитель_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("СкладГлавныйПолучатель_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("ДокументСкладскогоУчета", новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров"));
	Колонки.Добавить("ДокументУчетаВЭксплуатации", новый ОписаниеТипов("ДокументСсылка.цит_ПеремещениеТоваров_МЦ"));

	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.СкладГлавныйОтправитель_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГлавныйОтправительГУИД);
		Стр.СкладГлавныйПолучатель_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГлавныйПолучательГУИД);
		
		ДокументГУИД = Стр.ДокументСкладскогоУчетаГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		ДокументСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(ДокументГУИД);
		Стр.ДокументСкладскогоУчета = ДокументСсылка;
		
		ДокументГУИД = Стр.ДокументУчетаВЭксплуатацииГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		ДокументСсылка = Документы.цит_ПеремещениеТоваров_МЦ.ПолучитьСсылку(ДокументГУИД);
		Стр.ДокументУчетаВЭксплуатации = ДокументСсылка;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_ПеремещениеТМЦ_Объект

Функция ВыполнитьПолучение_ПеремещениеТМЦ(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ПеремещениеТМЦ.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		Если ДанныеДляОбработки.Свойство("ДанныеДляБП") Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
			Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииГУИД", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииПредставление", "");
			
			ПеремещенияТМЦ = ДанныеДляОбработки.ДанныеДляБП.ПеремещенияТМЦ;
			Для Каждого ПеремещениеТМЦ Из ПеремещенияТМЦ Цикл
				
				ПеремещениеТМЦ.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
				ПеремещениеТМЦ.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
				
				Для каждого СтрТЧ Из ПеремещениеТМЦ.ПеремещениеТМЦ_СписокТМЦ Цикл
					
					СтрТЧ.ОтправительСчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СтрТЧ.ОтправительСчетУчетаСтрока, ".", ""));
					СтрТЧ.ПолучательСчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СтрТЧ.ОтправительСчетУчетаСтрока, ".", ""));
					
					Если СтрТЧ.ОтправительСчетУчетаСтрока.Забалансовый = Истина Тогда 
						ПеремещениеТМЦ.Создать_ДокументУчетаВЭксплуатации = Истина;	
					Иначе
						ПеремещениеТМЦ.Создать_ДокументСкладскогоУчета = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеДокумента_ТМЦ = СоздатьДокумент_ПеремещениеТМЦ(ПеремещениеТМЦ);
				Если ДанныеДокумента_ТМЦ <> Неопределено Тогда
					Результат.ДокументСкладскогоУчетаГУИД = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаГУИД;
					Результат.ДокументСкладскогоУчетаПредставление = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаПредставление;
				КонецЕсли;
				ДанныеДокумента_ТМЦ = СоздатьДокумент_ПеремещениеТМЦВЭксплуатацию(ПеремещениеТМЦ);
				Если ДанныеДокумента_ТМЦ <> Неопределено Тогда
					Результат.ДокументУчетаВЭксплуатацииГУИД = ДанныеДокумента_ТМЦ.ДокументУчетаВЭксплуатацииГУИД;
					Результат.ДокументУчетаВЭксплуатацииПредставление = ДанныеДокумента_ТМЦ.ДокументУчетаВЭксплуатацииПредставление;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_ПеремещениеТМЦ(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	
	//СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГлавный").Значение);
	//СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 
	//
	//СтруктураДокумента.Вставить("ДокументСкладскогоУчетаГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументСкладскогоУчетаГУИД").Значение);
	//СтруктураДокумента.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
	//
	//СтруктураДокумента.Вставить("ДокументУчетаВЭксплуатацииГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументУчетаВЭксплуатацииГУИД").Значение); 
	//СтруктураДокумента.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
	//
	//СтруктураДокумента.Вставить("Материалы", ИнициализироватьТЧ_СписаниеТМЦ());
	//
	//Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
	//	Если ЭлДочерний.ИмяУзла = "СписаниеТМЦ_СписокТМЦ" Тогда
	//		Для каждого СтрДанных Из ЭлДочерний.ДочерниеУзлы Цикл
	//			СтрТЧ = СтруктураДокумента.Материалы.Добавить();
	//			
	//			СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТМЦ").Значение);
	//			СтрТЧ.Количество = Число(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "Количество").Значение);
	//			
	//			СчетУчетаСтрока = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "СчетУчетаСтрока").Значение;
	//			СтрТЧ.СчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СчетУчетаСтрока, ".", ""));
	//			
	//			ТипОбъектСписания = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъектСписания").Значение;
	//			Если ТипОбъектСписания = "ЦПЗ_ОсновныеСредства" Тогда
	//				 СтрТЧ.ОбъектСписания = НайтиОсновноеСредствоПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОбъектСписания").Значение)
	//			КонецЕсли;
	//			Если ТипОбъектСписания = "ФизическиеЛица" Тогда
	//				 СтрТЧ.ОбъектСписания = Справочники.ФизическиеЛица.ПустаяСсылка();
	//			КонецЕсли;
	//			
	//			Если СтрТЧ.СчетУчетаСтрока.Забалансовый = Истина Тогда 
	//				СтруктураДокумента.Создать_ДокументУчетаВЭксплуатации = Истина;	
	//			Иначе
	//				СтруктураДокумента.Создать_ДокументСкладскогоУчета = Истина;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_ПеремещениеТМЦ()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("СчетУчетаСтрока", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОбъектСписания", ОписаниеТипов);
	
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_ПеремещениеТМЦ(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	ДокументОбъект.СкладОтправитель = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавныйОтправитель)); 
	ДокументОбъект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавныйПолучатель));
		
	ДокументОбъект.ПодразделениеОтправитель = ДокументОбъект.СкладОтправитель.ПодразделениеОрганизации;
	ДокументОбъект.ПодразделениеПолучатель = ДокументОбъект.СкладПолучатель.ПодразделениеОрганизации;

	ДокументОбъект.Товары.Очистить();
	Для Каждого Стр Из СтруктураДанных.ПеремещениеТМЦ_СписокТМЦ Цикл
		
		Если Стр.ОтправительСчетУчетаСтрока.Забалансовый = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(Стр.ТМЦ));
		ЕстьНоменклатура = Ложь;
		Если СокрЛП(Номенклатура.ВерсияДанных) <> "" Тогда
			ЕстьНоменклатура = Истина;
		КонецЕсли;
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура = Номенклатура;
		СтрТЧ.Количество = Стр.Количество;
		СтрТЧ.СчетУчета = Стр.ОтправительСчетУчетаСтрока;
		СтрТЧ.НовыйСчетУчета = Стр.ПолучательСчетУчетаСтрока;
		
		Если ЕстьНоменклатура Тогда
			СтрТЧ.Коэффициент = 1;
			СтрТЧ.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

Функция СоздатьДокумент_ПеремещениеТМЦВЭксплуатацию(СтруктураДанных)
		
	Если НЕ СтруктураДанных.Создать_ДокументУчетаВЭксплуатации Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументУчетаВЭксплуатацииГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.цит_ПеремещениеТоваров_МЦ.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.цит_ПеремещениеТоваров_МЦ.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	//								
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	ДокументОбъект.СкладОтправитель = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавныйОтправитель)); 
	ДокументОбъект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавныйПолучатель));
	
	ДокументОбъект.ПодразделениеОтправитель = ДокументОбъект.СкладОтправитель.ПодразделениеОрганизации;
	ДокументОбъект.ПодразделениеПолучатель = ДокументОбъект.СкладПолучатель.ПодразделениеОрганизации;
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого Стр Из СтруктураДанных.ПеремещениеТМЦ_СписокТМЦ Цикл
		
		Если Стр.ОтправительСчетУчетаСтрока.Забалансовый = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(Стр.ТМЦ));
		ЕстьНоменклатура = Ложь;
		Если СокрЛП(Номенклатура.ВерсияДанных) <> "" Тогда
			ЕстьНоменклатура = Истина;
		КонецЕсли;
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура = Номенклатура;
		СтрТЧ.Количество = Стр.Количество;
		СтрТЧ.СчетУчета = Стр.ОтправительСчетУчетаСтрока;
		СтрТЧ.НовыйСчетУчета = Стр.ПолучательСчетУчетаСтрока;
		
		Если ЕстьНоменклатура Тогда
			СтрТЧ.Коэффициент = 1;
			СтрТЧ.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеремещениеТМЦВЭксплуатацию_УстановитьОтветственныеЛица(ДокументОбъект);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументУчетаВЭксплуатацииГУИД, ДокументУчетаВЭксплуатацииПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

Процедура ПеремещениеТМЦВЭксплуатацию_УстановитьОтветственныеЛица(ДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.СкладГлавный КАК СкладГлавный
	|ИЗ
	|	РегистрСведений.ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ КАК ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ
	|ГДЕ
	|	ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.СкладГлавный В(&Склады)
	|	И ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.Счет В(&Счета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦПЗ_СопоставлениеСкладовДляВыгрузкиВУТ.СкладГлавный";
	//
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", "МЦ03"));
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", "МЦ04"));
	Запрос.УстановитьПараметр("Счета", СчетаУчета);
	
	Склады = Новый Массив;
	Склады.Добавить(ДокументОбъект.СкладОтправитель);
	Склады.Добавить(ДокументОбъект.СкладПолучатель);
	Запрос.УстановитьПараметр("Склады", Склады);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ДокументОбъект.СкладОтправитель = Выборка.СкладГлавный Тогда 
			ДокументОбъект.ОтветственныйОтправитель = Выборка.ФизическоеЛицо;
			ДокументОбъект.ПодразделениеОтправитель = Выборка.Подразделение;
		КонецЕсли;
				
		Если ДокументОбъект.СкладПолучатель = Выборка.СкладГлавный Тогда 
			ДокументОбъект.ОтветственныйПолучатель = Выборка.ФизическоеЛицо;
			ДокументОбъект.ПодразделениеПолучатель = Выборка.Подразделение;
		КонецЕсли;

	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область Получение_ПеремещениеТМЦ_Обновить

Функция ВыполнитьПолучение_ПеремещениеТМЦ_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ПеремещениеТМЦ.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Получение_РасходныйОрдерНаТовары_УТ

#Область Получение_РасходныйОрдерНаТовары_УТ_Список

Функция ВыполнитьПолучение_РасходныйОрдерНаТовары_УТ_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "РасходныйОрдерНаТовары_УТ.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_РасходныйОрдерНаТовары_УТ_Список(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_РасходныйОрдерНаТовары_УТ_Список(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область Получение_РасходныйОрдерНаТовары_УТ_Объект

Функция ВыполнитьПолучение_РасходныйОрдерНаТовары_УТ(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "РасходныйОрдерНаТовары_УТ.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		Если ДанныеДляОбработки.Свойство("ДанныеДляБП") Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
			Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииГУИД", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииПредставление", "");
			
			РасходныеОрдераНаТовары_УТ = ДанныеДляОбработки.ДанныеДляБП.РасходныйОрдерНаТовары_УТ;
			Для Каждого РасходныйОрдерНаТовары_УТ Из РасходныеОрдераНаТовары_УТ Цикл
				
				РасходныйОрдерНаТовары_УТ.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
				РасходныйОрдерНаТовары_УТ.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_РасходныйОрдерНаТовары_УТ(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	
	//СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГлавный").Значение);
	//СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 
	//
	//СтруктураДокумента.Вставить("ДокументСкладскогоУчетаГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументСкладскогоУчетаГУИД").Значение);
	//СтруктураДокумента.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
	//
	//СтруктураДокумента.Вставить("ДокументУчетаВЭксплуатацииГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументУчетаВЭксплуатацииГУИД").Значение); 
	//СтруктураДокумента.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
	//
	//СтруктураДокумента.Вставить("Материалы", ИнициализироватьТЧ_СписаниеТМЦ());
	//
	//Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
	//	Если ЭлДочерний.ИмяУзла = "СписаниеТМЦ_СписокТМЦ" Тогда
	//		Для каждого СтрДанных Из ЭлДочерний.ДочерниеУзлы Цикл
	//			СтрТЧ = СтруктураДокумента.Материалы.Добавить();
	//			
	//			СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТМЦ").Значение);
	//			СтрТЧ.Количество = Число(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "Количество").Значение);
	//			
	//			СчетУчетаСтрока = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "СчетУчетаСтрока").Значение;
	//			СтрТЧ.СчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СчетУчетаСтрока, ".", ""));
	//			
	//			ТипОбъектСписания = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъектСписания").Значение;
	//			Если ТипОбъектСписания = "ЦПЗ_ОсновныеСредства" Тогда
	//				 СтрТЧ.ОбъектСписания = НайтиОсновноеСредствоПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОбъектСписания").Значение)
	//			КонецЕсли;
	//			Если ТипОбъектСписания = "ФизическиеЛица" Тогда
	//				 СтрТЧ.ОбъектСписания = Справочники.ФизическиеЛица.ПустаяСсылка();
	//			КонецЕсли;
	//			
	//			Если СтрТЧ.СчетУчетаСтрока.Забалансовый = Истина Тогда 
	//				СтруктураДокумента.Создать_ДокументУчетаВЭксплуатации = Истина;	
	//			Иначе
	//				СтруктураДокумента.Создать_ДокументСкладскогоУчета = Истина;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_РасходныйОрдерНаТовары_УТ()
	
	ТЧ = Новый ТаблицаЗначений;
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_РасходныйОрдерНаТовары_УТ(СтруктураДанных)
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", Неопределено, "" + Неопределено); 

КонецФункции

#КонецОбласти

#Область Получение_РасходныйОрдерНаТовары_УТ_Обновить

Функция ВыполнитьПолучение_РасходныйОрдерНаТовары_УТ_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "РасходныйОрдерНаТовары_УТ.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Получение_КомплектацияНоменклатуры

#Область Получение_КомплектацияНоменклатуры_Список

Функция ВыполнитьПолучение_КомплектацияНоменклатуры_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_КомплектацияНоменклатуры.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_КомплектацияНоменклатуры_Список(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_КомплектацияНоменклатуры_Список(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.ДокументТМЦ_Ссылка);
	Колонки.Удалить(Колонки.СкладГлавный_Ссылка);
	
	Колонки.Добавить("СкладГлавный_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("ДокументСкладскогоУчета", новый ОписаниеТипов("ДокументСсылка.КомплектацияНоменклатуры"));
	Колонки.Добавить("ДокументУчетаВЭксплуатации", Неопределено);

	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.СкладГлавный_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГлавныйГУИД);
		
		ДокументГУИД = Стр.ДокументСкладскогоУчетаГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		ДокументСсылка = Документы.КомплектацияНоменклатуры.ПолучитьСсылку(ДокументГУИД);
		Стр.ДокументСкладскогоУчета = ДокументСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_КомплектацияНоменклатуры_Объект

Функция ВыполнитьПолучение_КомплектацияНоменклатуры(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_КомплектацияНоменклатуры.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		Если ДанныеДляОбработки.Свойство("ДанныеДляБП") Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
			Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииГУИД", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииПредставление", "");
			
			КомплектацииНоменклатуры = ДанныеДляОбработки.ДанныеДляБП.КомплектацииНоменклатуры;
			Для Каждого КомплектацияНоменклатуры Из КомплектацииНоменклатуры Цикл
				
				КомплектацияНоменклатуры.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
				КомплектацияНоменклатуры.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
				
				КомплектацияНоменклатуры.ДопАналитика.Счет = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(КомплектацияНоменклатуры.ДопАналитика.Счет, ".", ""));
				
				Если КомплектацияНоменклатуры.ДопАналитика.Счет.Забалансовый = Истина Тогда 
					КомплектацияНоменклатуры.Создать_ДокументУчетаВЭксплуатации = Истина;	
				Иначе
					КомплектацияНоменклатуры.Создать_ДокументСкладскогоУчета = Истина;
				КонецЕсли;
				
				Для каждого СтрТЧ Из КомплектацияНоменклатуры.Комплектующие Цикл
					СтрТЧ.ДопАналитика.Счет = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СтрТЧ.ДопАналитика.Счет, ".", ""));
				КонецЦикла;
				
				ДанныеДокумента_ТМЦ = СоздатьДокумент_КомплектацияНоменклатуры(КомплектацияНоменклатуры);
				Если ДанныеДокумента_ТМЦ <> Неопределено Тогда
					Результат.ДокументСкладскогоУчетаГУИД = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаГУИД;
					Результат.ДокументСкладскогоУчетаПредставление = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаПредставление;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_КомплектацияНоменклатуры(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	
	//СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГлавный").Значение);
	//СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 
	//
	//СтруктураДокумента.Вставить("ДокументСкладскогоУчетаГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументСкладскогоУчетаГУИД").Значение);
	//СтруктураДокумента.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
	//
	//СтруктураДокумента.Вставить("ДокументУчетаВЭксплуатацииГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументУчетаВЭксплуатацииГУИД").Значение); 
	//СтруктураДокумента.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
	//
	//СтруктураДокумента.Вставить("Материалы", ИнициализироватьТЧ_СписаниеТМЦ());
	//
	//Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
	//	Если ЭлДочерний.ИмяУзла = "СписаниеТМЦ_СписокТМЦ" Тогда
	//		Для каждого СтрДанных Из ЭлДочерний.ДочерниеУзлы Цикл
	//			СтрТЧ = СтруктураДокумента.Материалы.Добавить();
	//			
	//			СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТМЦ").Значение);
	//			СтрТЧ.Количество = Число(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "Количество").Значение);
	//			
	//			СчетУчетаСтрока = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "СчетУчетаСтрока").Значение;
	//			СтрТЧ.СчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СчетУчетаСтрока, ".", ""));
	//			
	//			ТипОбъектСписания = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъектСписания").Значение;
	//			Если ТипОбъектСписания = "ЦПЗ_ОсновныеСредства" Тогда
	//				 СтрТЧ.ОбъектСписания = НайтиОсновноеСредствоПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОбъектСписания").Значение)
	//			КонецЕсли;
	//			Если ТипОбъектСписания = "ФизическиеЛица" Тогда
	//				 СтрТЧ.ОбъектСписания = Справочники.ФизическиеЛица.ПустаяСсылка();
	//			КонецЕсли;
	//			
	//			Если СтрТЧ.СчетУчетаСтрока.Забалансовый = Истина Тогда 
	//				СтруктураДокумента.Создать_ДокументУчетаВЭксплуатации = Истина;	
	//			Иначе
	//				СтруктураДокумента.Создать_ДокументСкладскогоУчета = Истина;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_КомплектацияНоменклатуры()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("СчетУчетаСтрока", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОбъектСписания", ОписаниеТипов);
	
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_КомплектацияНоменклатуры(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.КомплектацияНоменклатуры.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	
	ДокументОбъект.ВидОперации = НайтиПеречисление("ВидыОперацийКомплектацияНоменклатуры", СтруктураДанных.ВидОперации);
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавный)); 
	ДокументОбъект.ПодразделениеОрганизации = ДокументОбъект.Склад.ПодразделениеОрганизации;
	
	ДокументОбъект.СчетУчета = СтруктураДанных.ДопАналитика.Счет;
	
	ДокументОбъект.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.Номенклатура)); ; 
	ДокументОбъект.Количество = СтруктураДанных.Количество;
	
	ДокументОбъект.Комплектующие.Очистить();
	Для Каждого Стр Из СтруктураДанных.Комплектующие Цикл
		
		Если Стр.ДопАналитика.Счет.Забалансовый = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(Стр.Номенклатура));
		ЕстьНоменклатура = Ложь;
		Если СокрЛП(Номенклатура.ВерсияДанных) <> "" Тогда
			ЕстьНоменклатура = Истина;
		КонецЕсли;
		
		СтрТЧ = ДокументОбъект.Комплектующие.Добавить();
		СтрТЧ.Номенклатура = Номенклатура;
		СтрТЧ.Количество = Стр.Количество; 
		СтрТЧ.ДоляСтоимости = 1;
		СтрТЧ.СчетУчета = Стр.ДопАналитика.Счет;
		
	КонецЦикла;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

#КонецОбласти

#Область Получение_КомплектацияНоменклатуры_Обновить

Функция ВыполнитьПолучение_КомплектацияНоменклатуры_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_КомплектацияНоменклатуры.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Получение_РеализацияТоваровУслуг

#Область Получение_РеализацияТоваровУслуг_Список

Функция ВыполнитьПолучение_РеализацияТоваровУслуг_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "РеализацияТоваровУслуг.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_РеализацияТоваровУслуг_Список(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_РеализацияТоваровУслуг_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_РеализацияТоваровУслуг_Список(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.ДокументТМЦ_Ссылка);
	Колонки.Удалить(Колонки.СкладГлавный_Ссылка);
	
	Колонки.Добавить("СкладГлавный_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("ДокументСкладскогоУчета", новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	Колонки.Добавить("ДокументУчетаВЭксплуатации", Неопределено);

	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.СкладГлавный_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГлавныйГУИД);
		
		ДокументГУИД = Стр.ДокументСкладскогоУчетаГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ДокументГУИД);
		Стр.ДокументСкладскогоУчета = ДокументСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_РеализацияТоваровУслуг_Объект

Функция ВыполнитьПолучение_РеализацияТоваровУслуг(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "РеализацияТоваровУслуг.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		Если ДанныеДляОбработки.Свойство("ДанныеДляБП") Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
			Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииГУИД", "");
			Результат.Вставить("ДокументУчетаВЭксплуатацииПредставление", "");
			
			РеализацииТоваровУслуг = ДанныеДляОбработки.ДанныеДляБП.РеализацииТоваровУслуг_Ордер;
			Для Каждого РеализацияТоваровУслуг Из РеализацииТоваровУслуг Цикл
				
				РеализацияТоваровУслуг.Вставить("Создать_ДокументСкладскогоУчета", Истина);
				РеализацияТоваровУслуг.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
				
				//КомплектацияНоменклатуры.ДопАналитика.Счет = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(КомплектацияНоменклатуры.ДопАналитика.Счет, ".", ""));
				
				//Если КомплектацияНоменклатуры.ДопАналитика.Счет.Забалансовый = Истина Тогда 
				//	КомплектацияНоменклатуры.Создать_ДокументУчетаВЭксплуатации = Истина;	
				//Иначе
				//	КомплектацияНоменклатуры.Создать_ДокументСкладскогоУчета = Истина;
				//КонецЕсли;
				
				Для каждого СтрТЧ Из РеализацияТоваровУслуг.РеализацияТоваровУслуг_СписокТМЦ Цикл
					СтрТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СтрТЧ.СчетУчета, ".", ""));
				КонецЦикла;
				
				ДанныеДокумента_ТМЦ = СоздатьДокумент_РеализацияТоваровУслуг(РеализацияТоваровУслуг);
				Если ДанныеДокумента_ТМЦ <> Неопределено Тогда
					Результат.ДокументСкладскогоУчетаГУИД = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаГУИД;
					Результат.ДокументСкладскогоУчетаПредставление = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаПредставление;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_РеализацияТоваровУслуг(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	
	//СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "СкладГлавный").Значение);
	//СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 
	//
	//СтруктураДокумента.Вставить("ДокументСкладскогоУчетаГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументСкладскогоУчетаГУИД").Значение);
	//СтруктураДокумента.Вставить("Создать_ДокументСкладскогоУчета", Ложь);
	//
	//СтруктураДокумента.Вставить("ДокументУчетаВЭксплуатацииГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументУчетаВЭксплуатацииГУИД").Значение); 
	//СтруктураДокумента.Вставить("Создать_ДокументУчетаВЭксплуатации", Ложь);
	//
	//СтруктураДокумента.Вставить("Материалы", ИнициализироватьТЧ_СписаниеТМЦ());
	//
	//Для каждого ЭлДочерний Из ДанныеДокумента.ДочерниеУзлы Цикл
	//	Если ЭлДочерний.ИмяУзла = "СписаниеТМЦ_СписокТМЦ" Тогда
	//		Для каждого СтрДанных Из ЭлДочерний.ДочерниеУзлы Цикл
	//			СтрТЧ = СтруктураДокумента.Материалы.Добавить();
	//			
	//			СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТМЦ").Значение);
	//			СтрТЧ.Количество = Число(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "Количество").Значение);
	//			
	//			СчетУчетаСтрока = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "СчетУчетаСтрока").Значение;
	//			СтрТЧ.СчетУчетаСтрока = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СчетУчетаСтрока, ".", ""));
	//			
	//			ТипОбъектСписания = СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъектСписания").Значение;
	//			Если ТипОбъектСписания = "ЦПЗ_ОсновныеСредства" Тогда
	//				 СтрТЧ.ОбъектСписания = НайтиОсновноеСредствоПоГУИД(СтрДанных.Атрибуты.ПолучитьИменованныйЭлемент("", "ОбъектСписания").Значение)
	//			КонецЕсли;
	//			Если ТипОбъектСписания = "ФизическиеЛица" Тогда
	//				 СтрТЧ.ОбъектСписания = Справочники.ФизическиеЛица.ПустаяСсылка();
	//			КонецЕсли;
	//			
	//			Если СтрТЧ.СчетУчетаСтрока.Забалансовый = Истина Тогда 
	//				СтруктураДокумента.Создать_ДокументУчетаВЭксплуатации = Истина;	
	//			Иначе
	//				СтруктураДокумента.Создать_ДокументСкладскогоУчета = Истина;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_РеализацияТоваровУслуг()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("СчетУчетаСтрока", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОбъектСписания", ОписаниеТипов);
	
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_РеализацияТоваровУслуг(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	
	//ДокументОбъект.ВидОперации = НайтиПеречисление("ВидыОперацийКомплектацияНоменклатуры", СтруктураДанных.ВидОперации);
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(СтруктураДанных.СкладГлавный)); 
	ДокументОбъект.ПодразделениеОрганизации = ДокументОбъект.Склад.ПодразделениеОрганизации;
	
	СтруктураКонтрагент = СтруктураДанных.Контрагент;
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
															,"" + СтруктураКонтрагент.ГУИД
															,СтруктураКонтрагент.ИНН
															,СтруктураКонтрагент.КПП
															)
											);
	//
	СтруктураДоговорКонтрагента = СтруктураДанных.ДоговорКонтрагента;
	ДокументОбъект.ДоговорКонтрагента = ПолучитьДоговор(новый Структура("ДоговорНомер", СтруктураДанных.ДоговорКонтрагента.Номер), ДокументОбъект.Контрагент);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого Стр Из СтруктураДанных.РеализацияТоваровУслуг_СписокТМЦ Цикл
	
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(Стр.Номенклатура));
		ЕстьНоменклатура = Ложь;
		Если СокрЛП(Номенклатура.ВерсияДанных) <> "" Тогда
			ЕстьНоменклатура = Истина;
		КонецЕсли;
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура = Номенклатура;
		СтрТЧ.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		СтрТЧ.Коэффициент = 1;
		СтрТЧ.Количество = Стр.Количество; 
		
		СтрТЧ.СчетУчета = Стр.СчетУчета;
		
		ПараметрыОбработки = ПодготовитьДанныеЗаполненияСтрокиТЧ(ДокументОбъект, СтрТЧ);
		
		РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта, ПараметрыОбработки.СчетаУчетаКЗаполнению);
		
		//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ПараметрыОбработки.ДанныеСтрокиТаблицы);
		
		СтавкаНДСЧисло = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПараметрыОбработки.ДанныеСтрокиТаблицы.СтавкаНДС, Ложь);
		ПараметрыОбработки.ДанныеСтрокиТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ПараметрыОбработки.ДанныеСтрокиТаблицы.Сумма
																									,ДокументОбъект.СуммаВключаетНДС
																									,СтавкаНДСЧисло);
		//
		ЗаполнитьЗначенияСвойств(СтрТЧ, ПараметрыОбработки.ДанныеСтрокиТаблицы);
		
	КонецЦикла;

	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина
			И СтруктураДанных.Проведен = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;

	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 

КонецФункции

&НаСервере
Функция ПодготовитьДанныеЗаполненияСтрокиТЧ(ДокументОбъект, СтрокаТабличнойЧасти)
	
	ЭтоКомиссия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	РеализацияВЕАЭС              	 = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ДокументОбъект.Контрагент);
	ВедетсяУчетНДСПоФЗ150        	 = УчетНДС.ВедетсяУчетНДСПоФЗ150(ДокументОбъект.Дата);
	ВедетсяУчетНДСПоФЗ335        	 = УчетНДС.ВедетсяУчетНДСПоФЗ335(ДокументОбъект.Дата);
	ПокупательНалоговыйАгентПоНДС	 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
												И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДокументОбъект.Дата);
	ГосконтрактЕИС = ?(ДокументОбъект.ЭтапГосконтрактаЕИС <> "",
		Истина, Неопределено);
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, 
											|СчетНаОплатуПокупателю, СчетНаОплатуПокупателюПредставление,
											|Цена, Сумма, СтавкаНДС, СуммаНДС,
											|НомерГТД, СтранаПроисхождения,
											|ПродукцияМаркируемаяДляГИСМ, МаркируемаяПродукцияГосИС, КодТНВЭД, ПрослеживаемыйТовар, ПрослеживаемыйКомплект,
											|СчетУчета, ПереданныеСчетУчета, СчетДоходов, Субконто, СчетУчетаНДСПоРеализации, СчетРасходов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, ДеятельностьНаПатенте,
										|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
										|СуммаВключаетНДС, ДоговорКонтрагента,
										|ЭтоКомиссия, Реализация, ДокументБезНДС, РеализацияВЕАЭС, ГосконтрактЕИС, 
										|ВедетсяУчетНДСПоФЗ150, ВедетсяУчетНДСПоФЗ335, ПокупательНалоговыйАгентПоНДС, ВедетсяУчетПрослеживаемыхТоваров");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.РеализацияВЕАЭС = РеализацияВЕАЭС;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 = ВедетсяУчетНДСПоФЗ150;
	ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 = ВедетсяУчетНДСПоФЗ335;
	ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = ПокупательНалоговыйАгентПоНДС;
	ДанныеОбъекта.Реализация  = Истина;
	ДанныеОбъекта.ВедетсяУчетПрослеживаемыхТоваров  = ВедетсяУчетПрослеживаемыхТоваров;
	ДанныеОбъекта.ГосконтрактЕИС = ГосконтрактЕИС;        
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
																"РеализацияТоваровУслуг",
																"Товары.Номенклатура",
																ДокументОбъект,
																СтрокаТабличнойЧасти,
																ДанныеОбъекта,
																ДанныеСтрокиТаблицы);
	
	//ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.СчетУчета",				 Истина);
	ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.ПереданныеСчетУчета",		 Истина);
	ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.СчетДоходов",				 Истина);
	ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.Субконто",					 Истина);
	ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.СчетУчетаНДСПоРеализации",	 Истина);
	ПараметрыЗаполнения.КЗаполнению.Вставить("Товары.СчетРасходов",				 Истина);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	 ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		 ДанныеОбъекта);
	ПараметрыОбработки.Вставить("СчетаУчетаКЗаполнению", ПараметрыЗаполнения.КЗаполнению);

	Возврат ПараметрыОбработки;
	
КонецФункции


#КонецОбласти

#Область Получение_РеализацияТоваровУслуг_Обновить

Функция ВыполнитьПолучение_РеализацияТоваровУслуг_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "РеализацияТоваровУслуг.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Получение_АктПриемаПередачиТоваровНаОтветственноеХранение_ПоступлениеТоваров

#Область Получение_АктПриемаПередачиТоваровНаОтветственноеХранение_ПоступлениеТоваров_Список

Функция ВыполнитьПолучение_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(НаименованиеУзла, ПараметрыЗапроса) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_СписаниеТМЦ_Список(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Список");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(Результат, ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(ПараметрыЗапроса)
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ВыполнитьОбработкуРезультата_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(Результат, ПараметрыЗапроса)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Колонки = Результат.Результат.Колонки;
	Колонки.Удалить(Колонки.ДокументТМЦ_Ссылка);
	Колонки.Удалить(Колонки.Склад_Ссылка);
	
	Колонки.Добавить("Склад_Ссылка", новый ОписаниеТипов("СправочникСсылка.Склады"));
	МассивТипов = новый Массив;                                          
	МассивТипов.Добавить(Тип("ДокументСсылка.ОперацияБух"));  
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));  
	Колонки.Добавить("ДокументСкладскогоУчета", новый ОписаниеТипов(МассивТипов));

	Для Каждого Стр Из Результат.Результат Цикл
		
		Стр.Склад_Ссылка = Справочники.Склады.ПолучитьСсылку(Стр.СкладГУИД);
		
		ДокументГУИД = Стр.ДокументСкладскогоУчетаГУИД;
		Если ДокументГУИД <> "" Тогда
			ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
		Иначе
			ДокументГУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;   
		
		ДокументСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(ДокументГУИД); 
		Если ПараметрыЗапроса <> Неопределено 
				И ТипЗнч(ПараметрыЗапроса) = Тип("Структура")
				И ПараметрыЗапроса.Свойство("ХозяйственнаяОперация") 
		Тогда
			Если ПараметрыЗапроса.ХозяйственнаяОперация = ХозяйственнаяОперация_ВозвратСОтветственногоХранения() Тогда 
				ДокументСсылка = Документы.ОперацияБух.ПолучитьСсылку(ДокументГУИД);
			КонецЕсли;
		КонецЕсли;
		Стр.ДокументСкладскогоУчета = ДокументСсылка;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Получение_АктПриемаПередачиТоваровНаОтветственноеХранение_Объект

Функция ВыполнитьПолучение_АктПриемаПередачиТоваровНаОтветственноеХранение(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки, ТипДокументаПриемник = "ТребованиеНакладная") Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура")
		И ДанныеДляОбработки.Свойство("ДокументГУИД") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Объект");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	Иначе
		
		Если ДанныеДляОбработки.Свойство("ДанныеДляБП") Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ДокументСкладскогоУчетаГУИД", "");
			Результат.Вставить("ДокументСкладскогоУчетаПредставление", "");
			
			ДокументыСписок = ДанныеДляОбработки.ДанныеДляБП.АктыПриемаПередачиТоваровНаОтветственноеХранение;
			Для Каждого ДокументЭлемент Из ДокументыСписок Цикл
				
				ДокументЭлемент.Вставить("Создать_ДокументСкладскогоУчета", Истина);
				
				Для каждого СтрТЧ Из ДокументЭлемент.Товары Цикл
					
					СтрТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", СтрЗаменить(СтрТЧ.СчетУчета, ".", ""));
					
				КонецЦикла;
				
				ДанныеДокумента_ТМЦ = СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение(ДокументЭлемент); 
				Если ДанныеДокумента_ТМЦ <> Неопределено Тогда
					Результат.ДокументСкладскогоУчетаГУИД = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаГУИД;
					Результат.ДокументСкладскогоУчетаПредставление = ДанныеДокумента_ТМЦ.ДокументСкладскогоУчетаПредставление;
				КонецЕсли;	
				
			КонецЦикла;
			
			
		КонецЕсли;  
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_АктПриемаПередачиТоваровНаОтветственноеХранение(ДанныеДокумента)
	
	СтруктураДокумента = Новый Структура;
	
	Атрибуты = ДанныеДокумента.Атрибуты;
	
	Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДанныеДокумента);
	СтруктураДокумента.Вставить("Номер", Атрибуты.ПолучитьИменованныйЭлемент("", "Номер").Значение);
	СтруктураДокумента.Вставить("Дата", Атрибуты.ПолучитьИменованныйЭлемент("", "Дата").Значение);
	СтруктураДокумента.Вставить("Склад", Атрибуты.ПолучитьИменованныйЭлемент("", "Склад").Значение);
	СтруктураДокумента.Вставить("Комментарий", Атрибуты.ПолучитьИменованныйЭлемент("", "Комментарий").Значение); 
	
	СтруктураДокумента.Вставить("Товары", ИнициализироватьТЧ_АктПриемаПередачиТоваровНаОтветственноеХранение());
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ИнициализироватьТЧ_АктПриемаПередачиТоваровНаОтветственноеХранение()
	
	ТЧ = Новый ТаблицаЗначений;
	
	Колонки = ТЧ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	Колонки.Добавить("СчетУчетаСтрока", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОбъектСписания", ОписаниеТипов);
	
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	
	Если Метаданные.Справочники.Найти("схСтруктураПосевныхПлощадей") <> Неопределено Тогда
		ДополнитьМассивТиповКолонкиОснованиеДляВыбытия(Массив);
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
	Колонки.Добавить("ОснованиеДляВыбытия", ОписаниеТипов);
	
	Возврат ТЧ;
	
КонецФункции

Функция СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение(СтруктураДанных)
	
	ЗначениеВозврата = Неопределено;
	
	Если НЕ СтруктураДанных.Создать_ДокументСкладскогоУчета Тогда
		Возврат ЗначениеВозврата;
	КонецЕсли;
		
	Если СтруктураДанных.ХозяйственнаяОперация = ХозяйственнаяОперация_ПриемНаОтветственноеХранение() Тогда
		ЗначениеВозврата = СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение_МХ1_ПоступлениеТоваровУслуг(СтруктураДанных)		
	КонецЕсли;
	
	Если СтруктураДанных.ХозяйственнаяОперация = ХозяйственнаяОперация_ВозвратСОтветственногоХранения() Тогда
		ЗначениеВозврата = СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух(СтруктураДанных)		
	КонецЕсли;

	Возврат ЗначениеВозврата;
	
КонецФункции

Функция СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение_МХ1_ПоступлениеТоваровУслуг(СтруктураДанных)		
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	ДокументСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = Ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	ДокументОбъект.Дата = СтруктураДанных.Дата;    
	ДокументОбъект.ДатаВходящегоДокумента = СтруктураДанных.ДатаВходящегоДокумента;
	ДокументОбъект.НомерВходящегоДокумента = СтруктураДанных.НомерВходящегоДокумента;
	ДокументОбъект.ЦПЗ_флОтразитьвУУ = Ложь;
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;

	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
												,СтруктураДанных.Контрагент.ГУИД, СтруктураДанных.Контрагент.ИНН, СтруктураДанных.Контрагент.КПП));
	ДокументОбъект.ДоговорКонтрагента = ПолучитьДоговор(Новый Структура("ДоговорНомер", СтруктураДанных.Договор.Номер), ДокументОбъект.Контрагент);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОбъект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
	//	      
	ДокументОбъект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ДокументОбъект.ТипЦен = РеквизитыДоговора.ТипЦен;
	
	ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(ДокументОбъект.ДоговорКонтрагента);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
	ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
	ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	ДокументОбъект.СуммаВключаетНДС = Истина;
	
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.СкладГУИД)));
	Если СокрЛП(ДокументОбъект.Склад.ВерсияДанных) <> "" Тогда
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(ДокументОбъект.Организация, ДокументОбъект.Склад);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаРасчетов(ДокументОбъект);
	
	ДокументОбъект.Товары.Очистить();
	
	ТЧ = ДокументОбъект.Товары;
	Для Каждого Стр Из СтруктураДанных.Товары Цикл
    	СтрТЧ = ТЧ.Добавить();
		
		СтрТЧ.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура); 
		СтрТЧ.ЕдиницаИзмерения = СтрТЧ.Номенклатура.ЕдиницаИзмерения;
		СтрТЧ.ПартияТовара = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(Стр.Партия); 
		СтрТЧ.КоличествоМест = Стр.Количество;
		СтрТЧ.Коэффициент = 1;
		СтрТЧ.Количество = Стр.Количество;
		СтрТЧ.Цена = Стр.Цена;
		СтрТЧ.Сумма = Стр.Сумма;
		СтрТЧ.СтавкаНДС = НайтиПеречисление("СтавкиНДС", Стр.СтавкаНДС);
		СтрТЧ.СуммаНДС = Стр.СуммаНДС;
		
		СтрТЧ.Контрагент = ДокументОбъект.Контрагент;
		СтрТЧ.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
		
		СтрТЧ.СчетУчета = Стр.СчетУчета;
		СтрТЧ.СчетРасчетов = ДокументОбъект.СчетУчетаРасчетовСКонтрагентом;
		СтрТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	КонецЦикла;
	
	Если ЭтоНовый = Истина Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		ДокументОбъект.Записать(РежимЗаписи);     
		
		ДокументОбъект.ЦПЗ_флОтразитьвУУ = Ложь;
		ДокументОбъект.Записать(РежимЗаписи);     
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат Новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 
КонецФункции

Функция СоздатьДокумент_АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух(СтруктураДанных)		
	
	ДокументГУИД = СтруктураДанных.ДокументСкладскогоУчетаГУИД;
	Если ДокументГУИД <> "" Тогда
		ДокументГУИД = Новый УникальныйИдентификатор(СокрЛП(ДокументГУИД));
	Иначе
		ДокументГУИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	ДокументСсылка = Документы.ОперацияБух.ПолучитьСсылку(ДокументГУИД);
	ЭтоНовый = Ложь;
	Если Сокрлп(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	//ДокументОбъект.Дата = СтруктураДанных.Дата;  
	ДокументОбъект.Дата = СтруктураДанных.ДатаВыполнения;
	ДокументОбъект.Содержание = "Акт МХ-3 №" + СтруктураДанных.Номер + " от " +  СтруктураДанных.Дата;
	ДокументОбъект.ЦПЗ_флОтразитьвУУ = Ложь;  
	
	ТчРН = ДокументОбъект.ТаблицаРегистровНакопления;
	СтрРН = ТчРН.Добавить();
	СтрРН.Имя = "ЦПЗ_ДвижениеПартийТовара";
	
	ДокументОбъект.Комментарий = СтруктураДанных.Комментарий;

	Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										, СтруктураДанных.ОрганизацияГУИД
										, СтруктураДанных.ОрганизацияНаименование
										, СтруктураДанных.ОрганизацияИНН
										, СтруктураДанных.ОрганизацияКПП
										, СтруктураДанных.ОрганизацияПрефикс
								);
	ДокументОбъект.Организация = ПолучитьОрганизацию(Организация);//БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
												,СтруктураДанных.Контрагент.ГУИД, СтруктураДанных.Контрагент.ИНН, СтруктураДанных.Контрагент.КПП));
	ДоговорКонтрагента = ПолучитьДоговор(Новый Структура("ДоговорНомер", СтруктураДанных.Договор.Номер), Контрагент);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
	//	      
	ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
	
	ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(ДоговорКонтрагента);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
	КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.СкладГУИД)));
	
	ПодразделениеОрганизации = Неопределено;
	Если СокрЛП(Склад.ВерсияДанных) <> "" Тогда
		ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(ДокументОбъект.Организация, Склад);
	КонецЕсли;
	
	ДополнительныеСвойства = Новый Структура();  
	ДополнительныеСвойства.Вставить("Период", ДокументОбъект.Дата);
	ДополнительныеСвойства.Вставить("Организация", ДокументОбъект.Организация);
	ДополнительныеСвойства.Вставить("Склад", Склад);
	ДополнительныеСвойства.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации); 
	ДополнительныеСвойства.Вставить("Контрагент", Контрагент);
	
	ДвиженияХозрасчетный = ДокументОбъект.Движения.Хозрасчетный;
	ДвиженияХозрасчетный.Прочитать();
	ДвиженияХозрасчетный.Очистить();
	ДвиженияХозрасчетный.Записывать = Истина;
	
	ДвиженияПартийТовара = ДокументОбъект.Движения.ЦПЗ_ДвижениеПартийТовара;
	ДвиженияПартийТовара.Прочитать();
	ДвиженияПартийТовара.Очистить();
	ДвиженияПартийТовара.Записывать = Истина;   
	
	Для Каждого Стр Из СтруктураДанных.Товары Цикл
		АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух_ДобавитьСтрокуБУ(ДвиженияХозрасчетный, Стр, ДополнительныеСвойства);
		АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух_ДобавитьСтрокуРН(ДвиженияПартийТовара, Стр, ДополнительныеСвойства);
	КонецЦикла;
	
	Если ЭтоНовый = Истина Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		ДокументОбъект.Записать(РежимЗаписи);     
		
		ДокументОбъект.ЦПЗ_флОтразитьвУУ = Ложь;
		ДокументОбъект.Записать(РежимЗаписи);     
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанных.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписи);
	
	Возврат Новый Структура("ДокументСкладскогоУчетаГУИД, ДокументСкладскогоУчетаПредставление", ДокументОбъект.Ссылка.УникальныйИдентификатор(), "" + ДокументОбъект.Ссылка); 
	
КонецФункции

Процедура АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух_ДобавитьСтрокуБУ(Движения, Стр, ДополнительныеСвойства)
		
		СтрД = Движения.Добавить();
		
		СтрД.КоличествоКт = Стр.Количество;
		СтрД.Сумма = Стр.Сумма;
		
		СтрД.Период = ДополнительныеСвойства.Период;
		СтрД.СчетКТ = Стр.СчетУчета;   
		СтрД.Организация = ДополнительныеСвойства.Организация;
		СтрД.ПодразделениеКт = ДополнительныеСвойства.ПодразделениеОрганизации;
		
		СтрД.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, ДополнительныеСвойства.Контрагент);
		СтрД.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура));
		СтрД.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, ДополнительныеСвойства.Склад); 
		
КонецПроцедуры

Процедура АктПриемаПередачиТоваровНаОтветственноеХранение_МХ3_ОперацияБух_ДобавитьСтрокуРН(Движения, Стр, ДополнительныеСвойства)
		
		СтрД = Движения.Добавить();  
		СтрД.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		СтрД.Период = ДополнительныеСвойства.Период;
		СтрД.Организация = ДополнительныеСвойства.Организация;
		СтрД.Склад = ДополнительныеСвойства.Склад;        
		СтрД.Партия = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(Стр.Партия);   
		СтрД.СчетУчета = Стр.СчетУчета; 
		СтрД.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура);
		СтрД.Количество = Стр.Количество;
		
КонецПроцедуры

#КонецОбласти

#Область Получение_АктПриемаПередачиТоваровНаОтветственноеХранение_Обновить

Функция ВыполнитьПолучение_АктПриемаПередачиТоваровНаОтветственноеХранение_ОбновитьДанные(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Объект_Данные");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Контрагент

#Область Контрагент_Взаиморасчеты

Функция ВыполнитьПолучение_КонтрагентВзаиморасчеты(ПараметрыЗапроса) Экспорт 
	
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Структура")
			И НЕ ПараметрыЗапроса.Свойство("ТаблицаДанных") Тогда
		ВызватьИсключение "Не поддреживаемый тип параметра запроса. Отсутствует таблица данных."; 
	КонецЕсли;
			
	ДанныеОбработки = ПараметрыЗапроса.ТаблицаДанных.Скопировать();
	ДанныеОбработки.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеОбработки.Колонки.Добавить("ДоговорКонтрагента", новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДанныеОбработки.Колонки.Добавить("Сумма", новый ОписаниеТипов("Число"));
	
	ПодготовитьДанныеЗаполнения_КонтрагентВзаиморасчеты(ДанныеОбработки);
	
	ДатаОстатка = КонецДня(ТекущаяДата());
	Если ПараметрыЗапроса.Свойство("ДатаОстатка") Тогда
		ДатаОстатка = ПараметрыЗапроса.ДатаОстатка;
	КонецЕсли;
	ЗаполнитьДанныеВзаиморасчетовКонтрагентов(ДанныеОбработки, ДатаОстатка);
	
	ДанныеОбработки.Колонки.Удалить(ДанныеОбработки.Колонки.Контрагент);
	ДанныеОбработки.Колонки.Удалить(ДанныеОбработки.Колонки.ДоговорКонтрагента);
	
	Возврат ДанныеОбработки; 
	
КонецФункции

Процедура ПодготовитьДанныеЗаполнения_КонтрагентВзаиморасчеты(ДанныеОбработки)
	
	Для каждого Стр Из ДанныеОбработки Цикл
		 Стр.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", Стр.КонтрагентГУИД, Стр.КонтрагентИНН, Стр.КонтрагентКПП));
		 Стр.ДоговорКонтрагента = ПолучитьДоговор(Новый Структура("ДоговорНомер", Стр.ДоговорНомер), Стр.Контрагент)
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВзаиморасчетовКонтрагентов(ДанныеОбработки, ДатаОстатка)
	
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ФильтрСписокСчетов = ТаблицаСчетов.ВыгрузитьКолонку("СчетРасчетов");
	
	АналитикаРасчетов = Новый Массив;
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ДанныеОбработки);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения); 
	Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаОстатка);
	Запрос.УстановитьПараметр("Организация", Неопределено);
	Запрос.УстановитьПараметр("Валюта", Неопределено);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Контрагент КАК Контрагент,
	               |	ТЗ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ТЗ.ДоговорГУИД КАК ДоговорГУИД,
	               |	ТЗ.ДоговорКонтрагентИНН КАК ДоговорКонтрагентИНН,
	               |	ТЗ.ДоговорКонтрагентКПП КАК ДоговорКонтрагентКПП,
	               |	ТЗ.ДоговорНаименование КАК ДоговорНаименование,
	               |	ТЗ.ДоговорНомер КАК ДоговорНомер,
	               |	ТЗ.КонтрагентГУИД КАК КонтрагентГУИД,
	               |	ТЗ.КонтрагентИНН КАК КонтрагентИНН,
	               |	ТЗ.КонтрагентКПП КАК КонтрагентКПП,
	               |	ТЗ.КонтрагентНаименование КАК КонтрагентНаименование,
	               |	ТЗ.Сумма КАК Сумма
	               | ПОМЕСТИТЬ ТаблицаДоговоров
	               | ИЗ
	               |	&ТЗ КАК ТЗ;
	               | 				   
	               | ВЫБРАТЬ
	               | 	Хозрасчетный.Ссылка КАК Счет
	               | ПОМЕСТИТЬ ФильтрСписокСчетов
	               | ИЗ
	               | 	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               | ГДЕ
	               | 	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	               | 	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	               | 
	               | ИНДЕКСИРОВАТЬ ПО
	               | 	Счет ;
	               | ВЫБРАТЬ
	               |	ТаблицаДанных.ДоговорГУИД КАК ДоговорГУИД,
	               |	Выбор когда ТаблицаДанных.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		Тогда  ТаблицаДанных.ДоговорКонтрагентИНН
	               |		Иначе ДоговорыКонтрагентов.Ссылка.Владелец.ИНН 
	               |	Конец КАК ДоговорКонтрагентИНН,
	               |	Выбор когда ТаблицаДанных.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		Тогда ТаблицаДанных.ДоговорКонтрагентКПП 	               
				   |		Иначе ДоговорыКонтрагентов.Ссылка.Владелец.КПП 
	               |	Конец КАК ДоговорКонтрагентКПП,
	               |	Выбор когда ТаблицаДанных.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		Тогда ТаблицаДанных.ДоговорНаименование 
	               |		Иначе ДоговорыКонтрагентов.Ссылка.Наименование
	               |	Конец КАК ДоговорНаименование,
	               |	Выбор когда ТаблицаДанных.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |		Тогда ТаблицаДанных.ДоговорНомер 
	               |		Иначе ДоговорыКонтрагентов.Ссылка.Номер
				   |	Конец КАК ДоговорНомер,
	               |	ТаблицаДанных.КонтрагентГУИД КАК КонтрагентГУИД,
	               |	ТаблицаДанных.КонтрагентИНН КАК КонтрагентИНН,
	               |	ТаблицаДанных.КонтрагентКПП КАК КонтрагентКПП,
	               |	ТаблицаДанных.КонтрагентНаименование КАК КонтрагентНаименование,
	               | 	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	               | 	ДоговорыКонтрагентов.Владелец КАК Контрагент
	               | Поместить ТаблицаДоговоровДополненная
	               | ИЗ
	               | 	ТаблицаДоговоров КАК ТаблицаДанных
	               | 		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               | 		ПО (ТаблицаДанных.Контрагент = ДоговорыКонтрагентов.Владелец
	               | 				И ВЫБОР
	               | 					КОГДА Выразить(ТаблицаДанных.ДоговорГУИД КАК СТРОКА(36)) <> """"
	               | 						ТОГДА ТаблицаДанных.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	               | 					ИНАЧЕ ИСТИНА
	               | 				КОНЕЦ)
	               | ;
	               | ////////////////////////////////////////////////////////////////////////////////
	               | ВЫБРАТЬ
	               | 	ЕСТЬNULL(ВЫБОР
	               | 			КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	               | 				ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	               | 			ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	               | 		КОНЕЦ, 0) КАК Сумма,
	               | 	ТаблицаДоговоровДополненная.ДоговорГУИД КАК ДоговорГУИД,
	               | 	ТаблицаДоговоровДополненная.ДоговорКонтрагентИНН КАК ДоговорКонтрагентИНН,
	               | 	ТаблицаДоговоровДополненная.ДоговорКонтрагентКПП КАК ДоговорКонтрагентКПП,
	               | 	ТаблицаДоговоровДополненная.ДоговорНаименование КАК ДоговорНаименование,
	               | 	ТаблицаДоговоровДополненная.ДоговорНомер КАК ДоговорНомер,
	               | 	ТаблицаДоговоровДополненная.КонтрагентГУИД КАК КонтрагентГУИД,
	               | 	ТаблицаДоговоровДополненная.КонтрагентИНН КАК КонтрагентИНН,
	               | 	ТаблицаДоговоровДополненная.КонтрагентКПП КАК КонтрагентКПП,
	               | 	ТаблицаДоговоровДополненная.КонтрагентНаименование КАК КонтрагентНаименование,
	               | 	ТаблицаДоговоровДополненная.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               | 	ТаблицаДоговоровДополненная.Контрагент КАК Контрагент
	               | ИЗ
	               | 	ТаблицаДоговоровДополненная КАК ТаблицаДоговоровДополненная
	               | 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	               | 				&ДатаНачала,
	               | 				Счет В
	               | 					(ВЫБРАТЬ
	               | 						ФильтрСписокСчетов.Счет
	               | 					ИЗ
	               | 						ФильтрСписокСчетов),
	               | 				&АналитикаРасчетов,
	               | 				ВЫБОР
	               | 						КОГДА &Организация = НЕОПРЕДЕЛЕНО
	               | 							ТОГДА ИСТИНА
	               | 						ИНАЧЕ Организация = &Организация
	               | 					КОНЕЦ
	               | 					И Субконто1 В
	               | 						(ВЫБРАТЬ
	               | 							Таблица.Контрагент
	               | 						ИЗ
	               | 							ТаблицаДоговоровДополненная КАК Таблица)
	               | 					И Субконто2 В
	               | 						(ВЫБРАТЬ
	               | 							Таблица.ДоговорКонтрагента
	               | 						ИЗ
	               | 							ТаблицаДоговоровДополненная КАК Таблица)) КАК ХозрасчетныйОстаткиНаНачало
	               | 		ПО (ТаблицаДоговоровДополненная.Контрагент = ХозрасчетныйОстаткиНаНачало.Субконто1
	               | 				И ТаблицаДоговоровДополненная.ДоговорКонтрагента = ХозрасчетныйОстаткиНаНачало.Субконто2)
	               | ";
	//
	ДанныеОбработки = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из ДанныеОбработки Цикл
		Стр.ДоговорГУИД = "" + Стр.ДоговорКонтрагента.УникальныйИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СредняяЦенаНоменклатуры

функция СредниеЦеныНоменклатуры(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура") Тогда
		 Результат = ПолучитьДанныеСреднейЦеныНоменклатуры(ДанныеДляОбработки);
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(Результат);
	
КонецФункции	

Функция СредняяЦенаНоменклатуры(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура") Тогда
		 Результат = ПолучитьДанныеСреднейЦеныНоменклатуры(ДанныеДляОбработки);
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(Результат);
	
КонецФункции

Функция ПолучитьДанныеСреднейЦеныНоменклатуры(ВходящиеПараметры)
	
	ЗначениеВозврата = Неопределено;
	
	ПараметрыЗапроса = Новый Структура("Организация, Подразделение, Склад, Номенклатура, Период"
										, Неопределено, Неопределено, Неопределено, новый Массив, Дата("00010101000000"));
	//									
	Если ВходящиеПараметры.Свойство("Организация") Тогда
		
		Организация = Новый Структура("ГУИД, Наименование, ИНН, КПП, Префикс"
										,ВходящиеПараметры.Организация.ГУИД
										,ВходящиеПараметры.Организация.Наименование
										,ВходящиеПараметры.Организация.ИНН
										,ВходящиеПараметры.Организация.КПП
										,ВходящиеПараметры.Организация.Префикс
			);
		ПараметрыЗапроса.Организация = ПолучитьОрганизацию(Организация); 
		
	КонецЕсли;
	//									
	Если ВходящиеПараметры.Свойство("Подразделение")
			И ЗначениеЗаполнено(ВходящиеПараметры.Подразделение) Тогда
		
		Подразделение = Новый Структура("ГУИД, Наименование"
										,ВходящиеПараметры.Подразделение.ГУИД
										,ВходящиеПараметры.Подразделение.Наименование
			);
		ПараметрыЗапроса.Подразделение = НайтиСсылкуСпрПоГУИД("ПодразделенияОрганизаций", Подразделение.ГУИД); 
		
	КонецЕсли;										
	//									
	Если ВходящиеПараметры.Свойство("Склад")
			И ЗначениеЗаполнено(ВходящиеПараметры.Склад) Тогда
		
		Склад = Новый Структура("ГУИД"
								,ВходящиеПараметры.Склад.ГУИД
			);
		ПараметрыЗапроса.Склад = НайтиСсылкуСпрПоГУИД("Склады", Склад.ГУИД); 
		
	КонецЕсли;	
	//									
	Если ВходящиеПараметры.Свойство("Номенклатура")
			И ЗначениеЗаполнено(ВходящиеПараметры.Номенклатура) Тогда
		
		Номенклатура = Неопределено;
		
		ТипПараметра = ТипЗнч(ВходящиеПараметры.Номенклатура);
		Если ТипПараметра = Тип("Массив") Тогда
			Для Каждого Эл Из ВходящиеПараметры.Номенклатура Цикл
				
				Номенклатура = Новый Структура("ГУИД", Эл);
				ПараметрыЗапроса.Номенклатура.Добавить(НайтиНоменклатуруПоГУИД(Номенклатура.ГУИД));
				
			КонецЦикла;				
		ИначеЕсли ТипПараметра = Тип("УникальныйИдентификатор") Тогда 
			
			Номенклатура = Новый Структура("ГУИД", ВходящиеПараметры.Номенклатура);
			ПараметрыЗапроса.Номенклатура.Добавить(НайтиНоменклатуруПоГУИД(Номенклатура.ГУИД));
			
		КонецЕсли;
		
	КонецЕсли;	
	//									
	Если ВходящиеПараметры.Свойство("Период") Тогда
		
		ПараметрыЗапроса.Период = ВходящиеПараметры.Период; 
		
	КонецЕсли;	
	
	ЗначениеВозврата = ОбменСообщениями_ОбщегоНазначения.ПолучитьДанныеСреднейЦеныНоменклатуры(ПараметрыЗапроса);
	
	Возврат ЗначениеВозврата;
	
КонецФункции

#КонецОбласти

#Область Получение_НоменклатураСпецификацииСчетаНаОплату

Функция ВыполнитьПолучение_НоменклатураСпецификацииСчетаНаОплату(НаименованиеУзла = "ЦПЗ_УТ", ДанныеДляОбработки) Экспорт 
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеДляОбработки)= Тип("Структура") Тогда
		
		ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
		
		ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
		
		Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
		
		Хранилище = Новый ХранилищеЗначения(ДанныеДляОбработки);
		
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
		Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_НоменклатураСпецификацииСчетаНаОплату");
		Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения_НоменклатураСпецификацииСчетаНаОплату(Данные) Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	СтруктураДокумента.Вставить("ОрганизацияИНН", "");
	СтруктураДокумента.Вставить("ОрганизацияКПП", "");
	СтруктураДокумента.Вставить("КонтрагентИНН", "");
	СтруктураДокумента.Вставить("КонтрагентКПП", "");
	СтруктураДокумента.Вставить("НомерДоговора", ""); 
	СтруктураДокумента.Вставить("ДатаДоговора", Дата("00010101000000"));	
	СтруктураДокумента.Вставить("НомерСчетаНаОплату", "");
	СтруктураДокумента.Вставить("НомерСпецификации", "");	
	
	Если Данные.Свойство("Организация") Тогда
		СтруктураДокумента.Вставить("ОрганизацияИНН", Данные.Организация.ИНН);
		СтруктураДокумента.Вставить("ОрганизацияКПП", Данные.Организация.КПП);
	КонецЕсли;
	Если Данные.Свойство("Контрагент") Тогда
		СтруктураДокумента.Вставить("КонтрагентИНН", Данные.Контрагент.ИНН);
		СтруктураДокумента.Вставить("КонтрагентКПП", Данные.Контрагент.КПП);
	КонецЕсли;    
	Если Данные.Свойство("ДоговорКонтрагента") Тогда
		СтруктураДокумента.Вставить("НомерДоговора", Данные.ДоговорКонтрагента.Номер);
		СтруктураДокумента.Вставить("ДатаДоговора", Данные.ДоговорКонтрагента.Дата);
	КонецЕсли;
	Если Данные.Свойство("НомерСчетаНаОплату") Тогда
		СтруктураДокумента.Вставить("НомерСчетаНаОплату", Данные.НомерСчетаНаОплату);
	КонецЕсли;
	Если Данные.Свойство("НомерСпецификации") Тогда
	СтруктураДокумента.Вставить("НомерСпецификации", Данные.НомерСпецификации);	
	КонецЕсли; 
	
	Возврат СтруктураДокумента;
	
КонецФункции

#КонецОбласти

#Область ПрямойОбменДаннымиНСИ

Функция ИнициализироватьПакетДанныхНСИ(УзелОбмена = Неопределено) Экспорт

	ЗначениеВозврата = Новый Структура; 
	ЗначениеВозврата.Вставить("УзелОбмена", УзелОбмена);
	ЗначениеВозврата.Вставить("Объекты", новый Массив);
	ЗначениеВозврата.Вставить("ВыгруженныеОбъекты", новый Массив);
	ЗначениеВозврата.Вставить("ЗагруженныеОбъекты", новый Массив);
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ПодготовитьПакетДанныхНСИ(ПакетДанных, Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_Организация(ПакетДанных, Источник, Истина);
	    Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;	 
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Валюты") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_Валюта(ПакетДанных, Источник);
	    Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_Контрагент(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
			
			СвязанныеДоговоры = ПолучитьСвязанныеДоговоры(Источник);
			Пока СвязанныеДоговоры.Следующий() Цикл
				ПодготовитьПакетДанныхНСИ(ПакетДанных, СвязанныеДоговоры.Ссылка);		
			КонецЦикла;
			
			СвязанныеБанковскиесчета = ПолучитьСвязанныеБансковскиеСчета(Источник);
			Пока СвязанныеБанковскиесчета.Следующий() Цикл
				ПодготовитьПакетДанныхНСИ(ПакетДанных, СвязанныеБанковскиесчета.Ссылка)	
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_ДоговорыКонтрагентов(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_БанковскиеСчета(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;  
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_Номенклатура(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли; 
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_КомплектацияНоменклатуры(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_РеализацияТоваровУслуг(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_ПоступлениеТоваровУслуг(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_КорректировкаРеализации(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("Структура") Тогда  
		Если Источник.Свойство("Источник")
				И Источник.Свойство("ЭтоДанныеНабораЗаписей") 
				И Источник.Источник = "Хозрасчетный"
				И Источник.ЭтоДанныеНабораЗаписей = Истина
		Тогда
			ЭлементПакета = ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный(ПакетДанных, Источник);
			Если ЭлементПакета <> Неопределено Тогда
				ПакетДанных.Объекты.Добавить(ЭлементПакета);
				ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_ПоступлениеНаРасчетныйСчет(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли; 
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ЭлементПакета = ПодготовитьПакетДанныхНСИ_СписаниеСРасчетногоСчета(ПакетДанных, Источник);
		Если ЭлементПакета <> Неопределено Тогда
			ПакетДанных.Объекты.Добавить(ЭлементПакета);
			ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
		КонецЕсли;
	КонецЕсли;
	Попытка
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЦПЗ_ПартииТовара") Тогда
			ЭлементПакета = ПодготовитьПакетДанныхНСИ_ПартииТовара(ПакетДанных, Источник);
			Если ЭлементПакета <> Неопределено Тогда
				ПакетДанных.Объекты.Добавить(ЭлементПакета);
				ПакетДанных.ВыгруженныеОбъекты.Добавить(Источник);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьПакетДанныхНСИ(ВходящийПакетДанных) Экспорт
	
	ИсходящийПакетДанных = ИнициализироватьПакетДанныхНСИ();
	
	Если ВходящийПакетДанных.Свойство("ЗагруженныеОбъекты") Тогда
		Если ВходящийПакетДанных.ЗагруженныеОбъекты.Количество() <> 0 Тогда
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки(ВходящийПакетДанных.ЗагруженныеОбъекты)			
		КонецЕсли;		
	КонецЕсли;
	
	Если ВходящийПакетДанных.Свойство("Объекты") Тогда
		
		Если ВходящийПакетДанных.Объекты.Количество() = 0 Тогда
			Возврат ИсходящийПакетДанных;			
		КонецЕсли;
		
		Для каждого ЭлементПакета Из ВходящийПакетДанных.Объекты Цикл
						
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ИсходящийПакетДанных;
	
КонецФункции

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки(ЗагруженныеОбъекты, УзелОбменаУТ = Неопределено) 
	
	УзелОбменаУТ = ПланыОбмена["ЦПЗ_ПланОбменаСУТ"].НайтиПоКоду("УТ"); 
	
	Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъекты Цикл
		
		Если ЗагруженныйОбъект.ЭтоДанныеНабораЗаписей = Истина Тогда
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоНаборуДанных(ЗагруженныйОбъект, УзелОбменаУТ);	
		Иначе
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоВидамОбъектов(ЗагруженныйОбъект, УзелОбменаУТ);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоНаборуДанных(ЭлементПакета, УзелОбменаУТ)
		
	Если ЭлементПакета.Отказ Тогда 
		
		ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("ПрямойОбменДаннымиНСИ");
		Результат = ЭлементПакета.ОписаниеОшибки;
		УзелПрямогоОбменаДанными = "" + УзелОбменаУТ;
		
		РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(УзелОбменаУТ, ДанныеСобытия);
		
		Возврат;
		
	КонецЕсли;

	ВидОбъекта = ЭлементПакета.Вид;
	ВидМетаданных = Метаданные[ЭлементПакета.Вид];
						
	ТипОбъекта = ЭлементПакета.Тип;
	ТипМетаданных = ВидМетаданных[ЭлементПакета.Тип];
	ГУИД = ЭлементПакета.ГУИД;
				
	Менеджер = Вычислить("" + ВидОбъекта + "." + ТипОбъекта);
	СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
				
	НаборДанных = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборДанных.Отбор.Регистратор.Установить(СсылкаНаОбъект);
	НаборДанных.Прочитать();
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаУТ, НаборДанных);
				
КонецПроцедуры

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоВидамОбъектов(ЭлементПакета, УзелОбменаУТ)
	
	Если ЭлементПакета.Отказ Тогда 
		
		ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("ПрямойОбменДаннымиНСИ");
		ДанныеСобытия.Результат = ЭлементПакета.ОписаниеОшибки;
		УзелПрямогоОбменаДанными = "" + УзелОбменаУТ;
		
		РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(УзелОбменаУТ, ДанныеСобытия);
		
		Возврат;
		
	КонецЕсли;
	
	ВидОбъекта = ЭлементПакета.Вид;
	ВидМетаданных = Метаданные[ЭлементПакета.Вид];
	ТипОбъекта = ЭлементПакета.Тип;
	ТипМетаданных = ВидМетаданных.Найти(ЭлементПакета.Тип);
	Если ТипМетаданных <> Неопределено Тогда
		
		ГУИД = ЭлементПакета.ГУИД;
		
		Менеджер = Вычислить("" + ВидОбъекта + "." + ТипОбъекта);
		СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
		
		СоставПланаОбмена = УзелОбменаУТ.Метаданные().Состав;
		Если СоставПланаОбмена.Содержит(ТипМетаданных) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаУТ, СсылкаНаОбъект);
		КонецЕсли;
	
	КонецЕсли;
			
КонецПроцедуры

#Область ПодготовитьПакетДанныхНСИ

Процедура ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ДанныеДляОтправки, СсылкаНаОбъект, ЗарегистрированПоНаборуЗаписей = Ложь) Экспорт
	
	Атрибуты = Новый Соответствие();
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		ВидОбъекта = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипЗнч(СсылкаНаОбъект));
		ТипОбъекта = МетаданныеОбъекта.Имя;
		ПометкаУдаления = СсылкаНаОбъект.ПометкаУдаления;
		
		Атрибуты.Вставить("ЭтоДанныеНабораЗаписей", ЗарегистрированПоНаборуЗаписей);
		Атрибуты.Вставить("ВидОбъекта", Строка(ВидОбъекта));
		Атрибуты.Вставить("ТипОбъекта", Строка(ТипОбъекта));
		Атрибуты.Вставить("ПометкаУдаления", ПометкаУдаления);
		
		Если ВидОбъекта = "Документы" Тогда
			//Проведен = Формат(СсылкаНаОбъект.Проведен,"БЛ=0; БИ=1");
			//Атрибуты.Вставить("Проведен", Строка(Проведен)); 
			Атрибуты.Вставить("Проведен", СсылкаНаОбъект.Проведен);
			Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ОперацияБух")
					ИЛИ  ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
				Атрибуты.Вставить("Проведен", НЕ СсылкаНаОбъект.ПометкаУдаления);
			КонецЕсли;
		КонецЕсли;
				
		МетаданныеОбъект = СсылкаНаОбъект.Метаданные();
		РеквизитыМетаданных = МетаданныеОбъект.Реквизиты;
		РеквизитОрганизация = РеквизитыМетаданных.Найти("Организация");
		Если РеквизитОрганизация <> Неопределено Тогда  
			ЭлементОрганизация = ПодготовитьПакетДанныхНСИ_Организация(ПакетДанных, СсылкаНаОбъект.Организация, Истина);
			Атрибуты.Вставить("Организация", ЭлементОрганизация);
		КонецЕсли;
		
	КонецЕсли;

	Если ТипЗнч(ДанныеДляОтправки) = Тип("Структура") Тогда
		Для Каждого Атрибут Из Атрибуты Цикл
			ДанныеДляОтправки.Вставить(Атрибут.Ключ, Атрибут.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_Организация(ПакетДанных, Источник, ВыгрузитьАтрибуты = Ложь)
	
	ЭлементПакета = Неопределено;
	
	Если НЕ ВыгрузитьАтрибуты
			И ПакетДанных.ВыгруженныеОбъекты.Найти(Источник) <> Неопределено Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Наименование", Источник.Наименование); 
	ЭлементПакета.Вставить("Префикс", Источник.Префикс);  
	ЭлементПакета.Вставить("ИНН", Строка(Источник.ИНН));
	ЭлементПакета.Вставить("КПП", Строка(Источник.КПП));
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_Валюта(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
	
	Отказ = Ложь;
	
	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Значение = ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Код", Источник.Код); 
	ЭлементПакета.Вставить("Наименование", Строка(Источник.Наименование));
	ЭлементПакета.Вставить("НаименованиеПолное", Строка(Источник.НаименованиеПолное));
	ЭлементПакета.Вставить("СпособУстановкиКурса", Строка(Источник.СпособУстановкиКурса));
	ЭлементПакета.Вставить("ФормулаРасчетаКурса", Строка(Источник.ФормулаРасчетаКурса)); 
	
	Возврат ЭлементПакета;
	
КонецФункции  

Функция ПодготовитьПакетДанныхНСИ_Контрагент(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
	
	Отказ = Ложь;
	
	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Источник.ИНН = "" Тогда
		Отказ = Истина;			
	КонецЕсли;
	
	Значение = ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("КонтрагентГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("КонтрагентНаименование", Источник.Наименование); 
	ЭлементПакета.Вставить("КонтрагентИНН", Строка(Источник.ИНН));
	ЭлементПакета.Вставить("КонтрагентКПП", Строка(Источник.КПП));
	ЭлементПакета.Вставить("КонтрагентОКПО", Строка(Источник.КодПоОКПО));
	ЭлементПакета.Вставить("КонтрагентНаименованиеПолное", Строка(Источник.НаименованиеПолное)); 
	
	ПолноеНаименованиеПартнера = ОбщегоНазначенияБПКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(Строка(Источник.НаименованиеПолное));
	ЭлементПакета.Вставить("КонтрагентНаименованиеПолноеПартнера", ПолноеНаименованиеПартнера);

	ЭлементПакета.Вставить("КонтрагентРегистрационныйНомер", Строка(Источник.РегистрационныйНомер));
	ЭлементПакета.Вставить("КонтрагентСвидетельствоДатаВыдачи", Строка(Источник.СвидетельствоДатаВыдачи));
	ЭлементПакета.Вставить("КонтрагентСвидетельствоСерияНомер", Строка(Источник.СвидетельствоСерияНомер));
	
	КонтактнаяИнформация = ПодготовитьПакетДанныхНСИ_Контрагент_КонтактнаяИнформация(ПакетДанных, Источник); 
	ЭлементПакета.Вставить("КонтактнаяИнформация", КонтактнаяИнформация); 
	
	Возврат ЭлементПакета;
	
КонецФункции  

Функция ПодготовитьПакетДанныхНСИ_Контрагент_КонтактнаяИнформация(ПакетДанных, Источник)   
	
	ЭлементПакета = Новый Структура("Владелец, КонтактнаяИнформация", Неопределено, новый ТаблицаЗначений);
	
	ВидОбъекта = "ТабличнаяЧасть";
	ТипОбъекта = "КонтактнаяИнформация";
	
	ЭлементПакета.Вставить("ЭтоДанныеНабораЗаписей", Ложь);
	ЭлементПакета.Вставить("ВидОбъекта", Строка(ВидОбъекта));
	ЭлементПакета.Вставить("ТипОбъекта", Строка(ТипОбъекта));
	
	Владелец = новый Структура();
	Владелец.Вставить("КонтрагентГУИД", Источник.УникальныйИдентификатор());
	Владелец.Вставить("КонтрагентНаименование", Источник.Наименование); 
	Владелец.Вставить("КонтрагентИНН", Строка(Источник.ИНН));
	Владелец.Вставить("КонтрагентКПП", Строка(Источник.КПП));
	Владелец.Вставить("КонтрагентНаименованиеПолное", Строка(Источник.НаименованиеПолное)); 
	
	ЭлементПакета.Вставить("Владелец", Владелец);
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Тип) КАК ТипПредставление,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Вид) КАК ВидПредставление,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Страна КАК Страна,
	|	КонтактнаяИнформация.Регион КАК Регион,
	|	КонтактнаяИнформация.Город КАК Город,
	|	КонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	КонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	КонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	КонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.ВидДляСписка) КАК ВидДляСпискаПредставление,
	|	КонтактнаяИнформация.Значение КАК Значение
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Контрагент"; 
	Запрос.УстановитьПараметр("Контрагент", Источник);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаКонтактнойИнформации = РезультатЗапроса.Выгрузить();
	
	ЭлементПакета.Вставить("КонтактнаяИнформация", ТаблицаКонтактнойИнформации); 
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_ДоговорыКонтрагентов(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ДоговорНаименование", Строка(Источник.наименование));
	ЭлементПакета.Вставить("ДоговорНомер", Строка(Источник.Номер));
	ЭлементПакета.Вставить("ДоговорДата", Источник.Дата);    
	ЭлементПакета.Вставить("ДоговорСрокДействия", Источник.СрокДействия);
	ЭлементПакета.Вставить("ДоговорГУИД", Источник.УникальныйИдентификатор());
	
	ВалютаВзаиморасчета = Новый Структура();
	ВалютаВзаиморасчета.Вставить("Код", Источник.ВалютаВзаиморасчетов.Код);
	ВалютаВзаиморасчета.Вставить("Наименование", Источник.ВалютаВзаиморасчетов.Наименование);
	ЭлементПакета.Вставить("ВалютаВзаиморасчета", ВалютаВзаиморасчета);	 
	
	ЭлементПакета.Вставить("РасчетыВУсловныхЕдиницах", Источник.РасчетыВУсловныхЕдиницах);	
	ЭлементПакета.Вставить("ОплатаВВалюте", Источник.ОплатаВВалюте);
	
	Владелец = новый Структура();
	Владелец.Вставить("ГУИД", Источник.Владелец.УникальныйИдентификатор());
	Владелец.Вставить("ИНН", Источник.Владелец.ИНН);
	Владелец.Вставить("КПП", Источник.Владелец.КПП); 
	ЭлементПакета.Вставить("Владелец", Владелец);
	
	ЗначениеПеречисления = Источник.ВидДоговора;
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	ЭлементПакета.Вставить("ВидДоговора", ИмяЗначенияПеречисления);
	
	ХозяйственнаяОперация = "";
	Если Источник.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда 
		ХозяйственнаяОперация = "РеализацияКлиенту";
	КонецЕсли;
	ЭлементПакета.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	ЭлементПакета.Вставить("Согласован", Истина);
	
	ПорядокРасчетов = "ПоЗаказамНакладным";
	ЭлементПакета.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	
	ЭлементПакета.Вставить("ДоговорСрокДействия", Источник.СрокДействия);
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_БанковскиеСчета(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	Владелец = новый Структура();
	Владелец.Вставить("ГУИД", Источник.Владелец.УникальныйИдентификатор());
	Владелец.Вставить("ИНН", Источник.Владелец.ИНН);
	Владелец.Вставить("КПП", Источник.Владелец.КПП); 
	ЭлементПакета.Вставить("Владелец", Владелец);
	
	ЭлементПакета.Вставить("БанковскийСчетГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("БанковскийСчетНомерСчета", Строка(Источник.НомерСчета));
	ЭлементПакета.Вставить("БанковскийСчетКорСчет", Строка(Источник.Банк.КоррСчет));
	
	ЭлементПакета.Вставить("БанковскийСчетБанкГУИД", Источник.Банк.УникальныйИдентификатор());
	ЭлементПакета.Вставить("БанковскийСчетБанкНаименование", Строка(Источник.Банк.Наименование));
	ЭлементПакета.Вставить("БанковскийСчетБанкБИК", Строка(Источник.Банк.Код));
	ЭлементПакета.Вставить("БанковскийСчетБанкАдрес", Строка(Источник.Банк.Адрес));
	ЭлементПакета.Вставить("БанковскийСчетБанкГород", Строка(Источник.Банк.Город));
	ЭлементПакета.Вставить("БанковскийСчетНаименование", Строка(Источник.Наименование));
	ЭлементПакета.Вставить("БанковскийСчетБанкСтрана", Строка(Источник.Банк.Страна));
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_Номенклатура(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Код",Строка(Источник.Код));
	ЭлементПакета.Вставить("Наименование", Строка(Источник.Наименование));
	ЭлементПакета.Вставить("ЭтоГруппа", Источник.ЭтоГруппа);
	ЭлементПакета.Вставить("РодительГУИД", Источник.Родитель.УникальныйИдентификатор());
	ЭлементПакета.Вставить("СтавкаНДС", 0);
	
	Если Источник.ЭтоГруппа = Ложь Тогда
		
		ЭлементПакета.Вставить("ЭтоУслуга", Источник.Услуга);
		ЭлементПакета.Вставить("ЕдИзм", Строка(Источник.ЕдиницаИзмерения));
		ЕдиницаИзмеренияКод = "";
		Если ЗначениеЗаполнено(Источник.ЕдиницаИзмерения) Тогда
			ЕдиницаИзмеренияКод = Строка(Источник.ЕдиницаИзмерения.Код);
		КонецЕсли;
		ЭлементПакета.Вставить("ЕдИзмКод", ЕдиницаИзмеренияКод);
		ЭлементПакета.Вставить("ВидНоменклатуры", Строка(Источник.ВидНоменклатуры));
		
		ЗначениеПеречисления = Справочники.Номенклатура.СтавкаНДС(Источник.Ссылка, ТекущаяДата());
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		ЭлементПакета.Вставить("СтавкаНДС", ИмяЗначенияПеречисления);
		
		ОКПД2 = Новый Структура("Код, Наименование", Источник.КодОКПД2.Код, Источник.КодОКПД2.Наименование);
		ЭлементПакета.Вставить("ОКПД2", ОКПД2);
		
		ИмяРеквизита_УчетПоПартиямТовара = "ЦПЗ_УчетПоПартиямТовара";
		Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита_УчетПоПартиямТовара) <> Неопределено
				И Источник.ЭтоГруппа = Ложь
		Тогда
			ЭлементПакета.Вставить("УчетПоПартиямТовара", Источник[ИмяРеквизита_УчетПоПартиямТовара])		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_КомплектацияНоменклатуры(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
	
	ЭлементПакета.Вставить("ВидОперации", "" + Источник.ВидОперации);
	ЭлементПакета.Вставить("Склад", Источник.Склад.УникальныйИдентификатор());
	
	ЭлементПакета.Вставить("СчетУчета", "" + Источник.СчетУчета);
	ЭлементПакета.Вставить("Номенклатура", Источник.Номенклатура.УникальныйИдентификатор());
		//ПодготовитьПакетДанныхНСИ_Номенклатура(ПакетДанных, СтрТч.Номенклатура);
	ЭлементПакета.Вставить("Количество", Источник.Количество);
	
	тчКомплектующие = новый Массив();
	ЭлементПакета.Вставить("Комплектующие", тчКомплектующие);
	
	Для Каждого СтрТч Из Источник.Комплектующие Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТч.Номенклатура.УникальныйИдентификатор());
			//ПодготовитьПакетДанныхНСИ_Номенклатура(ПакетДанных, СтрТч.Номенклатура);
		СтрокаЭлементаПакета.Вставить("СчетУчета", "" + СтрТч.СчетУчета);
		СтрокаЭлементаПакета.Вставить("Количество", СтрТч.Количество);
		
		ЭлементПакета.Комплектующие.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;	
		
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_РеализацияТоваровУслуг(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
	
	ЭлементПакета.Вставить("СуммаДокумента", Источник.СуммаДокумента);
	
	ЭлементПакета.Вставить("СкладГУИД", Источник.Склад.УникальныйИдентификатор());
	
	ДокументЗаказКлиентаГУИД = Источник.ДокументЗаказКлиентаГУИД;
	Попытка
		ДокументЗаказКлиентаГУИД = новый УникальныйИдентификатор(ДокументЗаказКлиентаГУИД);
	Исключение КонецПопытки;
	ЭлементПакета.Вставить("ЗаказКлиентаГУИД", ДокументЗаказКлиентаГУИД);
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", Источник.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", Источник.Контрагент.ИНН);
	Контрагент.Вставить("КПП", Источник.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);
	
	ДоговорКонтрагента = Новый Структура();
	ДоговорКонтрагента.Вставить("ДоговорНомер", Источник.ДоговорКонтрагента.Номер);
	
	Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента.ВидДоговора) Тогда
		ЗначениеПеречисления = Источник.ДоговорКонтрагента.ВидДоговора;
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		ИмяЗначенияПеречисления = "NULL";
	КонецЕсли;
	ДоговорКонтрагента.Вставить("ВидДоговора", ИмяЗначенияПеречисления);

	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента);
			
	Если ЗначениеЗаполнено(Источник.Грузоотправитель) Тогда
		
		Грузоотправитель = Новый Структура;
		Грузоотправитель.Вставить("ГУИД", Источник.Грузоотправитель.УникальныйИдентификатор());
		Грузоотправитель.Вставить("ИНН", Источник.Грузоотправитель.ИНН);
		Грузоотправитель.Вставить("КПП", Источник.Грузоотправитель.КПП); 
		ЭлементПакета.Вставить("Грузоотправитель", Грузоотправитель);
		
	КонецЕсли;  
		
	Если ЗначениеЗаполнено(Источник.Грузополучатель) Тогда
		
		Грузополучатель = Новый Структура;
		Грузополучатель.Вставить("ГУИД", Источник.Грузополучатель.УникальныйИдентификатор());
		Грузополучатель.Вставить("ИНН", Источник.Грузополучатель.ИНН);
		Грузополучатель.Вставить("КПП", Источник.Грузополучатель.КПП); 
		ЭлементПакета.Вставить("Грузополучатель", Грузополучатель);
		
	КонецЕсли; 
	
	ЭлементПакета.Вставить("АдресДоставки", Источник.АдресДоставки); 
	ЭлементПакета.Вставить("СведенияОТранспортировкеИГрузе", Источник.СведенияОТранспортировкеИГрузе);
	
	ЭлементПакета.Вставить("ВидОперации", "" + Источник.ВидОперации);
	ЭлементПакета.Вставить("Склад", Источник.Склад.УникальныйИдентификатор());
	
	тчТовары = новый Массив();
	ЭлементПакета.Вставить("Товары", тчТовары);
	Для Каждого СтрТЧ Из Источник.Товары Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		
		СтрокаЭлементаПакета.Вставить("ПартияТовара", СтрТч.ПартияТовара.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТЧ.Номенклатура.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("НоменклатураНаименование", СтрТЧ.Номенклатура.Наименование); 
		СтрокаЭлементаПакета.Вставить("Количество", СтрТЧ.Количество);
		СтрокаЭлементаПакета.Вставить("Цена", СтрТЧ.Цена);
		СтрокаЭлементаПакета.Вставить("СтавкаНДС", ИмяПеречисления(СтрТЧ.СтавкаНДС));
		СтрокаЭлементаПакета.Вставить("СуммаНДС", СтрТЧ.СуммаНДС);
		СтрокаЭлементаПакета.Вставить("Сумма", СтрТЧ.Сумма);
		
		ЭлементПакета.Товары.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;
	
	тчУслуги = новый Массив();
	ЭлементПакета.Вставить("Услуги", тчУслуги);
	Для Каждого СтрТЧ Из Источник.Услуги Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТЧ.Номенклатура.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("НоменклатураНаименование", СтрТЧ.Номенклатура.Наименование);
		СтрокаЭлементаПакета.Вставить("НоменклатураСодержание", СтрТЧ.Содержание);
		СтрокаЭлементаПакета.Вставить("Количество", СтрТЧ.Количество);
		СтрокаЭлементаПакета.Вставить("Цена", СтрТЧ.Цена);
		СтрокаЭлементаПакета.Вставить("СтавкаНДС", ИмяПеречисления(СтрТЧ.СтавкаНДС));
		СтрокаЭлементаПакета.Вставить("СуммаНДС", СтрТЧ.СуммаНДС);
		СтрокаЭлементаПакета.Вставить("Сумма", СтрТЧ.Сумма);
		
		ЭлементПакета.Услуги.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_ПоступлениеТоваровУслуг(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
	
	ЭлементПакета.Вставить("СуммаДокумента", Источник.СуммаДокумента);
	
	ЭлементПакета.Вставить("СкладГУИД", Источник.Склад.УникальныйИдентификатор());
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", Источник.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", Источник.Контрагент.ИНН);
	Контрагент.Вставить("КПП", Источник.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);
	
	ДоговорКонтрагента = Новый Структура();
	ДоговорКонтрагента.Вставить("ДоговорНомер", Источник.ДоговорКонтрагента.Номер);
	
	Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента.ВидДоговора) Тогда
		ЗначениеПеречисления = Источник.ДоговорКонтрагента.ВидДоговора;
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		ИмяЗначенияПеречисления = "NULL";
	КонецЕсли;
	ДоговорКонтрагента.Вставить("ВидДоговора", ИмяЗначенияПеречисления);
	
	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента);
	
	тчТовары = новый Массив();
	ЭлементПакета.Вставить("Товары", тчТовары);
	Для Каждого СтрТЧ Из Источник.Товары Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТЧ.Номенклатура.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("НоменклатураНаименование", СтрТЧ.Номенклатура.Наименование); 
		СтрокаЭлементаПакета.Вставить("Количество", СтрТЧ.Количество);
		СтрокаЭлементаПакета.Вставить("Цена", СтрТЧ.Цена);
		СтрокаЭлементаПакета.Вставить("СтавкаНДС", ИмяПеречисления(СтрТЧ.СтавкаНДС));
		СтрокаЭлементаПакета.Вставить("СуммаНДС", СтрТЧ.СуммаНДС);
		СтрокаЭлементаПакета.Вставить("Сумма", СтрТЧ.Сумма);
		
		ЭлементПакета.Товары.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;
	
	тчУслуги = новый Массив();
	ЭлементПакета.Вставить("Услуги", тчУслуги);
	Для Каждого СтрТЧ Из Источник.Услуги Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТЧ.Номенклатура.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("НоменклатураНаименование", СтрТЧ.Номенклатура.Наименование);
		СтрокаЭлементаПакета.Вставить("НоменклатураСодержание", СтрТЧ.Содержание);
		СтрокаЭлементаПакета.Вставить("Количество", СтрТЧ.Количество);
		СтрокаЭлементаПакета.Вставить("Цена", СтрТЧ.Цена);
		СтрокаЭлементаПакета.Вставить("СтавкаНДС", ИмяПеречисления(СтрТЧ.СтавкаНДС));
		СтрокаЭлементаПакета.Вставить("СуммаНДС", СтрТЧ.СуммаНДС);
		СтрокаЭлементаПакета.Вставить("Сумма", СтрТЧ.Сумма);
		
		ЭлементПакета.Услуги.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;
	
	Возврат ЭлементПакета;
	
КонецФункции

Функция ПодготовитьПакетДанныхНСИ_КорректировкаРеализации(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
	ЭлементПакета.Вставить("ЦПЗ_флОтразитьвУУ", Источник.ЦПЗ_флОтразитьвУУ);

	ЭлементПакета.Вставить("ВидОперации", ИмяПеречисления(Источник.ВидОперации));
	
	ЭлементПакета.Вставить("ДокументРеализации", Источник.ДокументРеализации.УникальныйИдентификатор());
	
	ЭлементПакета.Вставить("ВидОперации", "" + Источник.ВидОперации);
	ЭлементПакета.Вставить("СуммаДокумента", Источник.СуммаДокумента);
	ЭлементПакета.Вставить("СкладГУИД", Источник.Склад.УникальныйИдентификатор());
	ЭлементПакета.Вставить("СуммаВключаетНДС", Источник.СуммаВключаетНДС);
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", Источник.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", Источник.Контрагент.ИНН);
	Контрагент.Вставить("КПП", Источник.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);
	
	ДоговорКонтрагента = Новый Структура();
	ДоговорКонтрагента.Вставить("ДоговорНомер", Источник.ДоговорКонтрагента.Номер);
	
	Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента.ВидДоговора) Тогда
		ЗначениеПеречисления = Источник.ДоговорКонтрагента.ВидДоговора;
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		ИмяЗначенияПеречисления = "NULL";
	КонецЕсли;
	ДоговорКонтрагента.Вставить("ВидДоговора", ИмяЗначенияПеречисления);
	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента);
	
	ПодготовитьПакетДанныхНСИ_КорректировкаРеализации_ТЧ_Товары(ЭлементПакета, Источник);
	
	Возврат ЭлементПакета;
	
КонецФункции

Процедура ПодготовитьПакетДанныхНСИ_КорректировкаРеализации_ТЧ_Товары(ЭлементПакета, Источник)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ПустойГУИД", "00000000-0000-0000-0000-000000000000");
	Запрос.Текст = "Выбрать
	|	Товары.НомерСтроки КАК НомерСтроки, 
	|	Товары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	Товары.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	Товары.Количество КАК Количество,
	|	Товары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|	Товары.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	Товары.Цена КАК Цена,
	|	Товары.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	Товары.СуммаДоИзменения КАК СуммаДоИзменения,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзмененияЗначение,
	|	Товары.СтавкаНДС КАК СтавкаНДСЗначение,
	|	Товары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	Товары.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	Товары.СуммаНДС КАК СуммаНДС,  
	|	Товары.СчетУчета КАК СчетУчетаЗначение, 
	|	УникальныйИдентификатор(Товары.ПартияТовара) КАК ПартияТовараГУИД,
	|	УникальныйИдентификатор(Товары.Номенклатура) КАК НоменклатураГУИД,
	|	""_____________________________"" КАК СтавкаНДСДоИзменения,
	|	""_____________________________"" КАК СтавкаНДС,
	|	""---.--.--"" КАК СчетУчета
	|	Из Документ.КорректировкаРеализации.Товары КАК Товары
	|	ГДЕ Товары.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	
	Для Каждого Стр Из Таблица Цикл
		Стр.СтавкаНДСДоИзменения = ИмяПеречисления(Стр.СтавкаНДСДоИзмененияЗначение); 
		Стр.СтавкаНДС = ИмяПеречисления(Стр.СтавкаНДСЗначение);
		Стр.СчетУчета = Строка(Стр.СчетУчетаЗначение); 
	КонецЦикла;
	
	Таблица.Колонки.Удалить(Таблица.Колонки.СтавкаНДСДоИзмененияЗначение); 
	Таблица.Колонки.Удалить(Таблица.Колонки.СтавкаНДСЗначение);  
	Таблица.Колонки.Удалить(Таблица.Колонки.СчетУчетаЗначение); 
	
	ЭлементПакета.Вставить("Товары", Таблица);
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_ПоступлениеНаРасчетныйСчет(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
		
	ЭлементПакета.Вставить("НазначениеПлатежа", Источник.НазначениеПлатежа);  

	ЭлементПакета.Вставить("ВидОперации", "" + Источник.ВидОперации);
	ЭлементПакета.Вставить("СуммаДокумента", Источник.СуммаДокумента);
	ЭлементПакета.Вставить("НомерВходящегоДокумента", Источник.НомерВходящегоДокумента);
	ЭлементПакета.Вставить("ДатаВходящегоДокумента", Источник.ДатаВходящегоДокумента); 
	//ЭлементПакета.Вставить("НеПодтвержденоВыпискойБанка", Источник.НеПодтвержденоВыпискойБанка);
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", Источник.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", Источник.Контрагент.ИНН);
	Контрагент.Вставить("КПП", Источник.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);

	ДоговорКонтрагента = Новый Структура();  
	ДоговорКонтрагента.Вставить("ГУИД", Источник.ДоговорКонтрагента.УникальныйИдентификатор());
	ДоговорКонтрагента.Вставить("ДоговорНомер", Источник.ДоговорКонтрагента.Номер);
	ДоговорКонтрагента.Вставить("ДоговорДата", Источник.ДоговорКонтрагента.Дата); 
		
	Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента.ВидДоговора) Тогда
		ЗначениеПеречисления = Источник.ДоговорКонтрагента.ВидДоговора;
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		ИмяЗначенияПеречисления = "NULL";
	КонецЕсли;
	ДоговорКонтрагента.Вставить("ВидДоговора", ИмяЗначенияПеречисления);

	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента);
	
	Валюта = новый Структура;
	Валюта.Вставить("Код", Источник.ВалютаДокумента.Код);
	Валюта.Вставить("Наименование", Источник.ВалютаДокумента.Наименование);
	ЭлементПакета.Вставить("Валюта", Валюта);
	
	СчетКонтрагентаСсылка = Источник.СчетКонтрагента;  
	СчетКонтрагента = Новый Структура;
	СчетКонтрагента.Вставить("ГУИД", СчетКонтрагентаСсылка.УникальныйИдентификатор());
	СчетКонтрагента.Вставить("НомерСчета", СчетКонтрагентаСсылка.НомерСчета);
	СчетКонтрагента.Вставить("БИК", СчетКонтрагентаСсылка.Банк.Код);
	ЭлементПакета.Вставить("СчетКонтрагента", СчетКонтрагента); 
	
	//ЭлементПакета.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ЭлементПакета.Вставить("ОчередностьПлатежа", 1);
    ЭлементПакета.Вставить("ВидПлатежа", "Электронно");
	
	ДокументОснование = Источник.ДокументОснование;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		//ЭлементПакета.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", ДокументОснование.ЦПЗ_ДокументОснование.УникальныйИдентификатор());
		ЭлементПакета.Вставить("ОчередностьПлатежа", ДокументОснование.ОчередностьПлатежа);
        ЭлементПакета.Вставить("ВидПлатежа", ДокументОснование.ВидПлатежа); 
	КонецЕсли;
	
	РасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	ПодготовитьПакетДанныхНСИ_ПоступлениеНаРасчетныйСчет_Расшифровка(ЭлементПакета, РасшифровкаПлатежа);
	
	Возврат ЭлементПакета;
	
КонецФункции

Процедура ПодготовитьПакетДанныхНСИ_ПоступлениеНаРасчетныйСчет_Расшифровка(ЭлементПакета, ДанныеДокументРегистратор)
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОТСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОТЧисло = Новый ОписаниеТипов(Массив, , КС);
	
	ОТУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ЭлементПакета.Вставить("РасшифровкаПлатежа", новый ТаблицаЗначений);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаПлатежа", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС", ОТСтрока);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС", ОТЧисло);
	
	Для Каждого Стр Из ДанныеДокументРегистратор Цикл
	
		СтрТч = ЭлементПакета.РасшифровкаПлатежа.Добавить();			
	    СтрТч.СтавкаНДС = ИмяПеречисления(Стр.СтавкаНДС);
		СтрТч.СуммаПлатежа = Стр.СуммаПлатежа;
		СтрТЧ.КурсВзаиморасчетов = Стр.КурсВзаиморасчетов;
		СтрТч.СуммаВзаиморасчетов = Стр.СуммаВзаиморасчетов;
		СтрТЧ.СуммаНДС = Стр.СуммаНДС;		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_СписаниеСРасчетногоСчета(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Источник.Номер)); 
	ЭлементПакета.Вставить("Дата", Источник.Дата);
		
	ЭлементПакета.Вставить("НазначениеПлатежа", Источник.НазначениеПлатежа);  

	ЭлементПакета.Вставить("ВидОперации", "" + Источник.ВидОперации);
	ЭлементПакета.Вставить("СуммаДокумента", Источник.СуммаДокумента);
	ЭлементПакета.Вставить("НомерВходящегоДокумента", Источник.НомерВходящегоДокумента);
	ЭлементПакета.Вставить("ДатаВходящегоДокумента", Источник.ДатаВходящегоДокумента); 
	ЭлементПакета.Вставить("НеПодтвержденоВыпискойБанка", Источник.НеПодтвержденоВыпискойБанка);
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", Источник.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", Источник.Контрагент.ИНН);
	Контрагент.Вставить("КПП", Источник.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);

	ДоговорКонтрагента = Новый Структура();  
	ДоговорКонтрагента.Вставить("ГУИД", Источник.ДоговорКонтрагента.УникальныйИдентификатор());
	ДоговорКонтрагента.Вставить("ДоговорНомер", Источник.ДоговорКонтрагента.Номер);
	ДоговорКонтрагента.Вставить("ДоговорДата", Источник.ДоговорКонтрагента.Дата); 
		
	Если ЗначениеЗаполнено(Источник.ДоговорКонтрагента.ВидДоговора) Тогда
		ЗначениеПеречисления = Источник.ДоговорКонтрагента.ВидДоговора;
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		ИмяЗначенияПеречисления = "NULL";
	КонецЕсли;
	ДоговорКонтрагента.Вставить("ВидДоговора", ИмяЗначенияПеречисления);

	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента);
	
	Валюта = новый Структура;
	Валюта.Вставить("Код", Источник.ВалютаДокумента.Код);
	Валюта.Вставить("Наименование", Источник.ВалютаДокумента.Наименование);
	ЭлементПакета.Вставить("Валюта", Валюта);
	
	СчетКонтрагентаСсылка = Источник.СчетКонтрагента;  
	СчетКонтрагента = Новый Структура;
	СчетКонтрагента.Вставить("ГУИД", СчетКонтрагентаСсылка.УникальныйИдентификатор());
	СчетКонтрагента.Вставить("НомерСчета", СчетКонтрагентаСсылка.НомерСчета);
	СчетКонтрагента.Вставить("БИК", СчетКонтрагентаСсылка.Банк.Код);
	ЭлементПакета.Вставить("СчетКонтрагента", СчетКонтрагента); 
	
	ЭлементПакета.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ЭлементПакета.Вставить("ОчередностьПлатежа", 1);
    ЭлементПакета.Вставить("ВидПлатежа", "Электронно");
	
	ДокументОснование = Источник.ДокументОснование;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ЭлементПакета.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", ДокументОснование.ЦПЗ_ДокументОснование.УникальныйИдентификатор());
		ЭлементПакета.Вставить("ОчередностьПлатежа", ДокументОснование.ОчередностьПлатежа);
        ЭлементПакета.Вставить("ВидПлатежа", ДокументОснование.ВидПлатежа); 
	КонецЕсли;
	
	РасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	ПодготовитьПакетДанныхНСИ_СписаниеСРасчетногоСчета_Расшифровка(ЭлементПакета, РасшифровкаПлатежа);
	
	Возврат ЭлементПакета;
	
КонецФункции

Процедура ПодготовитьПакетДанныхНСИ_СписаниеСРасчетногоСчета_Расшифровка(ЭлементПакета, ДанныеДокументРегистратор)
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОТСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОТЧисло = Новый ОписаниеТипов(Массив, , КС);
	
	ОТУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ЭлементПакета.Вставить("РасшифровкаПлатежа", новый ТаблицаЗначений);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаПлатежа", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("КурсВзаиморасчетов", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов", ОТЧисло);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СтавкаНДС", ОТСтрока);
	ЭлементПакета.РасшифровкаПлатежа.Колонки.Добавить("СуммаНДС", ОТЧисло);
	
	Для Каждого Стр Из ДанныеДокументРегистратор Цикл
	
		СтрТч = ЭлементПакета.РасшифровкаПлатежа.Добавить();			
	    СтрТч.СтавкаНДС = ИмяПеречисления(Стр.СтавкаНДС);
		СтрТч.СуммаПлатежа = Стр.СуммаПлатежа;
		СтрТЧ.КурсВзаиморасчетов = Стр.КурсВзаиморасчетов;
		СтрТч.СуммаВзаиморасчетов = Стр.СуммаВзаиморасчетов;
		СтрТЧ.СуммаНДС = Стр.СуммаНДС;		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Источник.Регистратор.Проведен
		ИЛИ (ТипЗнч(Источник.Регистратор) = Тип("ДокументСсылка.ОперацияБух"))Тогда 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЦИТ_Обмены.УстановитьПараметрыЗапроса_ДвижениеПоСкладам(Запрос
										,?(ЗначениеЗаполнено(Источник.Регистратор), ДобавитьМесяц(НачалоДня(Источник.Регистратор.Дата),-1), НачалоДня(Источник.Регистратор.Дата))
										,?(ЗначениеЗаполнено(Источник.Регистратор),  ДобавитьМесяц(КонецДня(Источник.Регистратор.Дата),1), КонецДня(Источник.Регистратор.Дата)) 
										,Ложь
										,ПакетДанных.УзелОбмена
										,новый Структура("ОтборПоРегистратору, Регистратор", ЗначениеЗаполнено(Источник.Регистратор),Источник.Регистратор)
								);
		ПараметрыОбмена = новый Структура();           
		ЦИТ_Обмены.ИнициализироватьВспомогательныеДанныеЗапроса_ДвиженияПоСкладам(Запрос, ПараметрыОбмена);

		Запрос.Текст = ЦИТ_Обмены.ПолучитьОсновнойТекстЗапроса_ДвижениеПоСкладам();
		Запрос.Выполнить();
		
		Запрос.Текст = ЦИТ_Обмены.ПолучитьРезультатТекстЗапроса_Выгрузка_ДвижениеПоСкладам();
		ДанныеВыгрузки = Запрос.Выполнить();
		
		Отказ = ДанныеВыгрузки.Пустой();
		
		Если Отказ Тогда
			Возврат ЭлементПакета;	
		КонецЕсли;
		
		ЭлементПакета = Новый Структура();
		
		ДанныеДокументРегистратор = ДанныеВыгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ДанныеДокументРегистратор.Следующий() Цикл
			ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор(ПакетДанных, ЭлементПакета, ДанныеДокументРегистратор);
		КонецЦикла;
	
	Иначе
		ЭлементПакета = Новый Структура();
		ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_НеПроведен(ПакетДанных, ЭлементПакета, Новый Структура("Регистратор", Источник.Регистратор))
	КонецЕсли;
	
	Возврат ЭлементПакета;
	
КонецФункции  

Процедура ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_НеПроведен(ПакетДанных, ЭлементПакета, ДанныеДокументРегистратор)
	
	Регистратор = ДанныеДокументРегистратор.Регистратор;
	
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Регистратор, Истина);
	        
	ЭлементПакета.Вставить("ГУИД", Регистратор.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Регистратор.Номер)); 
	ЭлементПакета.Вставить("Дата", Регистратор.Дата);
	
	ЭлементПакета.Вставить("ПредставлениеВнешнегоДокумента", Строка(Регистратор));
	ЭлементПакета.Вставить("ВидДвиженияДокумента", "");
	ЭлементПакета.Вставить("ДатаДокумента", Регистратор.Дата);
	ЭлементПакета.Вставить("НомерДокумента", Строка(Регистратор.Номер));
	
	МетаданныеРегистратор = Регистратор.Метаданные();
	Реквизиты = МетаданныеРегистратор.Реквизиты;
	
	ЕстьОтразитьВУУ = Реквизиты.Найти("ЦПЗ_флОтразитьвУУ");
	
	ОтразитьВУУ = Ложь;
	
	Если ЕстьОтразитьВУУ <> Неопределено Тогда
		ОтразитьВУУ = Регистратор.ЦПЗ_флОтразитьвУУ;
	КонецЕсли;

	ЭлементПакета.Вставить("ОтразитьВУУ", ОтразитьВУУ); 
	ЭлементПакета.Вставить("Движения", новый ТаблицаЗначений);
   	ЭлементПакета.Вставить("ДвижениеПартийТовара", новый ТаблицаЗначений);    
   	ЭлементПакета.Вставить("РегистрацияЦенПартийТовара", новый ТаблицаЗначений);   

	//ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ТЧ(ЭлементПакета, ДанныеДокументРегистратор);
	//ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ДвижениеПартийТовара(ЭлементПакета, ДанныеДокументРегистратор);
	//ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_РегистрацияЦенПартийТовара(ЭлементПакета, ДанныеДокументРегистратор);
	
КонецПроцедуры

Процедура ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор(ПакетДанных, ЭлементПакета, ДанныеДокументРегистратор)
	
	Регистратор = ДанныеДокументРегистратор.Регистратор;
	
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Регистратор, Истина);
	
	ЭлементПакета.Вставить("ГУИД", Регистратор.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Номер", Строка(Регистратор.Номер)); 
	ЭлементПакета.Вставить("Дата", Регистратор.Дата);
	
	ЭлементПакета.Вставить("ПредставлениеВнешнегоДокумента", Строка(Регистратор));
	ЭлементПакета.Вставить("ВидДвиженияДокумента", Строка(ДанныеДокументРегистратор.ВидОперации));
	ЭлементПакета.Вставить("ДатаДокумента", Регистратор.Дата);
	ЭлементПакета.Вставить("НомерДокумента", Строка(Регистратор.Номер));
	
	//МетаданныеРегистратор = Регистратор.Метаданные();
	//Реквизиты = МетаданныеРегистратор.Реквизиты;
	//
	//ЕстьОтразитьВУУ = Реквизиты.Найти("ЦПЗ_флОтразитьвУУ");
	//
	//ОтразитьВУУ = Ложь;
	//
	//Если ЕстьОтразитьВУУ <> Неопределено Тогда
	//	ОтразитьВУУ = Регистратор.ЦПЗ_флОтразитьвУУ;
	//КонецЕсли; 
	
    ОтразитьВУУ = ОтразитьВУУ(Регистратор);
	
	ЭлементПакета.Вставить("ОтразитьВУУ", ОтразитьВУУ); 
	
	ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ТЧ(ЭлементПакета, ДанныеДокументРегистратор);  
	Если ОтразитьВУУ Тогда
		ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ДвижениеПартийТовара(ЭлементПакета, ДанныеДокументРегистратор);       
	КонецЕсли;
	ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_РегистрацияЦенПартийТовара(ЭлементПакета, ДанныеДокументРегистратор); 
	
КонецПроцедуры

Процедура ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ТЧ(ЭлементПакета, ДанныеДокументРегистратор)
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОТСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОТЧисло = Новый ОписаниеТипов(Массив, , КС);
	
	ОТУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ЭлементПакета.Вставить("Движения", новый ТаблицаЗначений);
	ЭлементПакета.Движения.Колонки.Добавить("Номенклатура", ОТУникальныйИдентификатор);
	ЭлементПакета.Движения.Колонки.Добавить("НоменклатураТип", ОТСтрока);
	ЭлементПакета.Движения.Колонки.Добавить("СчетДт", ОТСтрока);
	ЭлементПакета.Движения.Колонки.Добавить("СчетКт", ОТСтрока);
	ЭлементПакета.Движения.Колонки.Добавить("СкладМОЛ", ОТСтрока);
	ЭлементПакета.Движения.Колонки.Добавить("СкладМОЛГУИД", ОТУникальныйИдентификатор);
	ЭлементПакета.Движения.Колонки.Добавить("Количество", ОТЧисло);
	ЭлементПакета.Движения.Колонки.Добавить("Сумма", ОТЧисло);
	
	ДанныеТЧ = ДанныеДокументРегистратор.Выбрать();
	Пока ДанныеТЧ.Следующий()
			И (ДанныеДокументРегистратор.Проведен 
						ИЛИ (ДанныеДокументРегистратор.Регистратор.ПометкаУдаления = Ложь 
								И ТипЗнч(ДанныеДокументРегистратор.Регистратор)=Тип("ДокументСсылка.ОперацияБух")
							)
				)
			И ЗначениеЗаполнено(ДанныеТЧ.Номенклатура) Цикл
				
		СтрТч = ЭлементПакета.Движения.Добавить();			
		СтрТч.Номенклатура = ДанныеТЧ.Номенклатура.УникальныйИдентификатор();
		СтрТч.НоменклатураТип = Строка(ТипЗнч(ДанныеТЧ.Номенклатура));
		СтрТч.СчетДт = Строка(ДанныеТЧ.Счет);
		СтрТч.СчетКт = "";
		СтрТч.СкладМОЛ = Строка(ДанныеТЧ.СкладМОЛ);
		СтрТч.СкладМОЛГУИД = ДанныеТЧ.СкладМОЛ.УникальныйИдентификатор();
		СтрТч.Количество = ДанныеТЧ.Количество;
		СтрТч.Сумма = ДанныеТЧ.Сумма;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_ДвижениеПартийТовара(ЭлементПакета, ДанныеДокументРегистратор)
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОТСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОТЧисло = Новый ОписаниеТипов(Массив, , КС);
	
	ОТУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ОТДата = Новый ОписаниеТипов("Дата");  
	
	ЭлементПакета.Вставить("ДвижениеПартийТовара", новый ТаблицаЗначений);    
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("Период", ОТДата);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("Номенклатура", ОТУникальныйИдентификатор);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("НоменклатураТип", ОТСтрока);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("СкладМОЛ", ОТСтрока);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("СкладМОЛГУИД", ОТУникальныйИдентификатор); 
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("Партия", ОТСтрока);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("ПартияГУИД", ОТУникальныйИдентификатор);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("Количество", ОТЧисло);
	ЭлементПакета.ДвижениеПартийТовара.Колонки.Добавить("СчетУчета", ОТСтрока);
	
	Если Метаданные.РегистрыНакопления.Найти("ЦПЗ_ДвижениеПартийТовара") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеДокументРегистратор.Регистратор); 
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
					|	Регистр.Период КАК Период,
					|	Регистр.ВидДвижения КАК ВидДвижения,
					|	Регистр.Склад КАК СкладМОЛ,
					|	Регистр.Партия КАК Партия,
					|	Регистр.Номенклатура КАК Номенклатура, 
					|	Регистр.СчетУчета КАК СчетУчета,
					|	Регистр.Количество * Выбор когда Регистр.ВидДвижения = &ВидДвижения Тогда (-1) Иначе 1 Конец КАК Количество
					|	ИЗ
					|		РегистрНакопления.ЦПЗ_ДвижениеПартийТовара КАК Регистр
					|	ГДЕ
					|		Регистр.Регистратор = &ДокументСсылка "; 
	//
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрТч = ЭлементПакета.ДвижениеПартийТовара.Добавить();	
		СтрТЧ.Период = Выборка.Период;
		СтрТч.Номенклатура = Выборка.Номенклатура.УникальныйИдентификатор();
		СтрТч.НоменклатураТип = Строка(ТипЗнч(Выборка.Номенклатура));
		СтрТч.Партия = "" + Выборка.Партия; 
		СтрТч.ПартияГУИД = Выборка.Партия.УникальныйИдентификатор();
		СтрТч.СкладМОЛ = Строка(Выборка.СкладМОЛ);
		СтрТч.СкладМОЛГУИД = Выборка.СкладМОЛ.УникальныйИдентификатор();
		СтрТч.Количество = Выборка.Количество; 
		СтрТч.СчетУчета = Строка(Выборка.СчетУчета); 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьПакетДанныхНСИ_ДанныеНабораЗаписей_Хозрасчетный_ДокументРегистратор_РегистрацияЦенПартийТовара(ЭлементПакета, ДанныеДокументРегистратор)
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОТСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОТЧисло = Новый ОписаниеТипов(Массив, , КС);
	
	ОТУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ОТДата = Новый ОписаниеТипов("Дата");
	
	ЭлементПакета.Вставить("РегистрацияЦенПартийТовара", новый ТаблицаЗначений);   
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("Период", ОТДата);
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("Номенклатура", ОТУникальныйИдентификатор);
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("НоменклатураТип", ОТСтрока); 
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("Партия", ОТСтрока);
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("ПартияГУИД", ОТУникальныйИдентификатор);
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("Цена", ОТЧисло);
	ЭлементПакета.РегистрацияЦенПартийТовара.Колонки.Добавить("ЦенаБезНДС", ОТЧисло);
	
	Если Метаданные.РегистрыСведений.Найти("ЦПЗ_РегистрацияЦенПартийТовара") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеДокументРегистратор.Регистратор);
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
					|	Регистр.Период КАК Период,
					|	Регистр.Партия КАК Партия,
					|	Регистр.Номенклатура КАК Номенклатура,
					|	Регистр.Цена КАК Цена,
					|	Регистр.ЦенаБезНДС КАК ЦенаБезНДС
					|	ИЗ
					|		РегистрСведений.ЦПЗ_РегистрацияЦенПартийТовара КАК Регистр
					|	ГДЕ
					|		Регистр.Регистратор = &ДокументСсылка "; 
	//
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрТч = ЭлементПакета.РегистрацияЦенПартийТовара.Добавить();	
		СтрТч.Период = Выборка.Период;
		СтрТч.Номенклатура = Выборка.Номенклатура.УникальныйИдентификатор();
		СтрТч.НоменклатураТип = Строка(ТипЗнч(Выборка.Номенклатура));
		СтрТч.Партия = "" + Выборка.Партия; 
		СтрТч.ПартияГУИД = Выборка.Партия.УникальныйИдентификатор();
		СтрТч.Цена = Выборка.Цена;
		СтрТч.ЦенаБезНДС = Выборка.ЦенаБезНДС;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_ПартииТовара(ПакетДанных, Источник)   
	
	ЭлементПакета = Неопределено;
		
	Отказ = Ложь;

	Значение =  ПакетДанных.ВыгруженныеОбъекты.Найти(Источник);
	Если Значение <> Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник, Ложь);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Код",Строка(Источник.Код));
	ЭлементПакета.Вставить("Наименование", Строка(Источник.Наименование));
	
	ЭлементПакета.Вставить("ДатаПартии", Источник.ДатаПартии);
	ЭлементПакета.Вставить("СрокГодности", Источник.ДатаПартии);
	ЭлементПакета.Вставить("ДатаИзготовления", Источник.ДатаИзготовления);
	ЭлементПакета.Вставить("ДатаОкончанияСрокаГодности", Источник.ДатаОкончанияСрокаГодности);
	
	ЭлементПакета.Вставить("Владелец", Источник.Владелец.УникальныйИдентификатор());
	
	Возврат ЭлементПакета;
	
КонецФункции

#КонецОбласти

Функция ОтправитьПакетДанныхНСИ(НаименованиеУзла, ПакетДанных) Экспорт
	
	Если ПакетДанных.Объекты.Количество() = 0 Тогда 
		Возврат Новый Структура("Отказ, ОписаниеОшибки, Результат", Истина, "Пакет передаваемых данных пустой.", Неопределено);
	КонецЕсли;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
	Хранилище = Новый ХранилищеЗначения(ПакетДанных);
  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ОбменПакетамиНСИ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ХозяйственнаяОперация_ВозвратСОтветственногоХранения(ПоСсылке = Ложь)
	
	Наименование = "ВозвратСОтветственногоХранения";
	
	ЗначениеВозврата = Наименование;
	Если ПоСсылке = Истина Тогда
		ЗначениеВозврата = НайтиПеречисление("ХозяйственныеОперации", Наименование); 	
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
КонецФункции  

Функция ХозяйственнаяОперация_ПриемНаОтветственноеХранение(ПоСсылке = Ложь)
	
	Наименование = "ПриемНаОтветственноеХранение";
	
	ЗначениеВозврата = Наименование;
	Если ПоСсылке = Истина Тогда
		ЗначениеВозврата = НайтиПеречисление("ХозяйственныеОперации", Наименование); 	
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
КонецФункции  

Функция ИспользоватьРасширенныйСписокДокументовПриемников() Экспорт 

	Флаг = ЭтоБухгалтерияСельскохозяйственногоПредприятия(); 
	Возврат Флаг; 
		
КонецФункции

Функция ЭтоБухгалтерияСельскохозяйственногоПредприятия() Экспорт
	Возврат Метаданные.Имя = "БухгалтерияСельскохозяйственногоПредприятия";
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Возврат ИмяЗначенияПеречисления;
	
КонецФункции

Функция ПолучитьОрганизацию(Организация) Экспорт
	
	ЗначениеВозврата = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВозврата) Тогда 
		
		ОрганизацияПоГУИД = Справочники.Организации.ПолучитьСсылку(новый УникальныйИдентификатор(Организация.ГУИД));
		Если СокрЛП(ОрганизацияПоГУИД.ВерсияДанных) = "" Тогда
			ОрганизацияПоГУИД = Справочники.Организации.ПустаяСсылка();	
		КонецЕсли;                                                     
		
		ОрганизацияПоРеквизитам = Справочники.Организации.ПустаяСсылка();
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка,
		|	1 КАК ИД
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(ВЫРАЗИТЬ(Организации.Наименование КАК СТРОКА(150))) = (ВЫРАЗИТЬ(&Наименование КАК СТРОКА(150)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.ИД КАК ИД
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИД";; 
		//
		Запрос.УстановитьПараметр("ИНН", Организация.ИНН);
		Запрос.УстановитьПараметр("КПП", Организация.КПП);
		Запрос.УстановитьПараметр("Наименование", Организация.Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОрганизацияПоРеквизитам = Выборка.Ссылка;		
		
		Если ЗначениеЗаполнено(ОрганизацияПоГУИД) Тогда
			ЗначениеВозврата = ОрганизацияПоГУИД;		
		КонецЕсли;                               
		Если ЗначениеЗаполнено(ОрганизацияПоРеквизитам) Тогда 
			ЗначениеВозврата = ОрганизацияПоРеквизитам;		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;	
	
КонецФункции  

Функция ПолучитьСвязанныеДоговоры(Источник)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	| ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Справочник
	| ГДЕ
	|	Справочник.Владелец = &Владелец
	|	И Справочник.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	                
КонецФункции

Функция ПолучитьСвязанныеБансковскиеСчета(Источник)

	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Разрешенные Справочник.Ссылка Из Справочник.БанковскиеСчета КАК Справочник ГДЕ Справочник.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПодготовитьДанныеОрганизации(СсылкаНаОбъект) Экспорт 
	
	ЗначениеВозврата = Новый Структура();   
	
	ЗначениеВозврата.Вставить("ГУИД",Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
	ЗначениеВозврата.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	ЗначениеВозврата.Вставить("Префикс", СсылкаНаОбъект.Префикс);  
	ЗначениеВозврата.Вставить("ИНН",Строка(СсылкаНаОбъект.ИНН));
	ЗначениеВозврата.Вставить("КПП",Строка(СсылкаНаОбъект.КПП)); 
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ЗагрузитьДанныеИзУТ_Организцаия(ЧтениеXML, ТЗ = Неопределено)
			
	СтруктураДокумента = новый Структура;
	//ПолучитьСтандартныеАтрибуты(СтруктураДокумента, ЧтениеXML);
	СтруктураДокумента.Вставить("ГУИД", (ЧтениеXML.ЗначениеАтрибута("ОрганизацияГУИД"))); 
	СтруктураДокумента.Вставить("Наименование", (ЧтениеXML.ЗначениеАтрибута("ОрганизацияНаименование"))); 
	СтруктураДокумента.Вставить("Префикс", (ЧтениеXML.ЗначениеАтрибута("ОрганизацияПрефикс")));
	СтруктураДокумента.Вставить("ИНН", (ЧтениеXML.ЗначениеАтрибута("ОрганизацияИНН"))); 
	СтруктураДокумента.Вставить("КПП", (ЧтениеXML.ЗначениеАтрибута("ОрганизацияКПП")));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПодготовитьДанныеДляОбработки(ВходящиеДанные, ТипЗнчВозврата = "ПостроительDOM") Экспорт

	ЗначениеВозврата = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ХранилищеЗначения") Тогда
		
		Данные = ВходящиеДанные.Получить();	
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Поток = Данные.ОткрытьПотокДляЧтения();
			
			Если ТипЗнчВозврата = "ЧтениеXML" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ЗначениеВозврата = ЧтениеXML;
			ИначеЕсли ТипЗнчВозврата = "ПостроительDOM" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ПостроительDOM = Новый ПостроительDOM;
				ЗначениеВозврата = ПостроительDOM.Прочитать(ЧтениеXML);
			Иначе
				ЗначениеВозврата = ПолучитьСтрокуИзДвоичныхДанных(Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ЗначениеВозврата = Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НайтиОсновноеСредствоПоГУИД(ГУИД)
	
	Если СокрЛП(ГУИД) = "" Тогда
		Возврат Справочники.ОсновныеСредства.ПустаяСсылка();
	Иначе
		Возврат Справочники.ОсновныеСредства.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоГУИД(ГУИД)
	
	Если СокрЛП(ГУИД) = "" тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Возврат Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
	КонецЕсли;
	
КонецФункции

Функция НайтиСтруктураПосевныхПлощадейПоГУИД(ГУИД)
	
	Попытка	
		Если СокрЛП(ГУИД) = "" тогда
			Возврат Справочники.схСтруктураПосевныхПлощадей.ПустаяСсылка();
		Иначе
			Возврат Справочники.схСтруктураПосевныхПлощадей.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

Процедура ПолучитьСтандартныеАтрибуты(СтруктураДокумента, ЧтениеXML)
	
	СтруктураДокумента.Вставить("ВидОбъекта", ЧтениеXML.ЗначениеАтрибута("ВидОбъекта"));
	СтруктураДокумента.Вставить("ТипОбъекта", ЧтениеXML.ЗначениеАтрибута("ТипОбъекта"));
	СтруктураДокумента.Вставить("ПометкаУдаления", Булево(Число(ЧтениеXML.ЗначениеАтрибута("ПометкаУдаления"))));
	СтруктураДокумента.Вставить("ЭтоДанныеНабораЗаписей",  Булево(Число(ЧтениеXML.ЗначениеАтрибута("ЭтоДанныеНабораЗаписей"))));
	
	Проведен = ЧтениеXML.ЗначениеАтрибута("Проведен");
	Если Проведен <> Неопределено Тогда
		СтруктураДокумента.Вставить("Проведен", Булево(Число(Проведен)));
	КонецЕсли;
	
	Организация = ЧтениеXML.ЗначениеАтрибута("ОрганизацияГУИД");
	Если Организация <> Неопределено Тогда  
		
		СтруктураОрганизация = ЗагрузитьДанныеИзУТ_Организцаия(ЧтениеXML);
		СтруктураДокумента.Вставить("Организация", СтруктураОрганизация);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
    
    МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
    
    Если МетаданныеТипа = Неопределено Тогда
        
        Возврат "УдалениеОбъекта";
        
    ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
        
        Возврат "РегистрыСведений";
        
    ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
        
        Возврат "Документы";
        
    ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
        
        Возврат "Справочники";    
        
    ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеТипа) Тогда
    
        Возврат "РегистрыНакопления";    
        
    ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеТипа) Тогда
    
        Возврат "РегистрыБухгалтерии";    
       
    Иначе
       
        Возврат "";
        
    КонецЕсли;
            
КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект, ИмяТабличнойЧасти = "")
	
	МетаданныеОбъекта = Объект.Метаданные();

	Если ИмяТабличнойЧасти = "" Тогда
		Реквизиты = МетаданныеОбъекта.Реквизиты;
	Иначе
		Попытка
			Реквизиты = МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции 

Функция ОтразитьВУУ(Регистратор) 
	            
	ЗначениеВозврата = Ложь;
	
	МетаданныеРегистратор = Регистратор.Метаданные();
	Реквизиты = МетаданныеРегистратор.Реквизиты;
	
	ЕстьОтразитьВУУ = Реквизиты.Найти("ЦПЗ_флОтразитьвУУ");
	Если ЕстьОтразитьВУУ <> Неопределено Тогда
		ЗначениеВозврата = Регистратор.ЦПЗ_флОтразитьвУУ;
	Иначе	
		
		ПВХМенеджер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
		СвойствоПВХ = ПВХМенеджер.НайтиПоРеквизиту("Имя", "Операция_ЦПЗ_флОтразитьвУУ");
		Если ЗначениеЗаполнено(СвойствоПВХ) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	ДополнительныеСведения.Значение КАК Значение
							|ИЗ
							|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
							|ГДЕ
							|	ДополнительныеСведения.Свойство = &Свойство 
							|	И ДополнительныеСведения.Объект = &Регистратор";
			//
			Запрос.УстановитьПараметр("Свойство", СвойствоПВХ);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗначениеВозврата = Выборка.Значение;				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

#КонецОбласти
