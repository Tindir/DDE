#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
Функция СформироватьХешИдентификаторУзла(ИдентификаторСтрока) Экспорт 
	
	ЗначениеВозврата = "";
	
	ОбрабатываемаяСтрока = ВРег(ИдентификаторСтрока);
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, " ","");
	
	Хеш = новый ХешированиеДанных(ХешФункция.MD5);
	
	Хеш.Добавить(ОбрабатываемаяСтрока);
	
	ЗначениеВозврата = "" + Хеш.ХешСумма;
	ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, " ", "");
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьДанныеУзлаОбменаПоХешИдентификатору(ИдентификаторУзла) Экспорт
	
	ЗначениеВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	УзлыПрямогоОбменаДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УзлыПрямогоОбменаДанными КАК УзлыПрямогоОбменаДанными
		|ГДЕ
		|	УзлыПрямогоОбменаДанными.Код = &ХешИдентификатораУзла
		|	И УзлыПрямогоОбменаДанными.ПометкаУдаления = Ложь";
	//
	Запрос.УстановитьПараметр("ХешИдентификатораУзла", ИдентификаторУзла);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗначениеВозврата = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла) Экспорт
	
	ЗначениеВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	УзлыПрямогоОбменаДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УзлыПрямогоОбменаДанными КАК УзлыПрямогоОбменаДанными
		|ГДЕ
		|	УзлыПрямогоОбменаДанными.ПометкаУдаления = ЛОЖЬ
		|	И УзлыПрямогоОбменаДанными.Наименование = &НаименованиеУзла";
	//
	Запрос.УстановитьПараметр("НаименованиеУзла", НаименованиеУзла);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗначениеВозврата = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Функция - Подготовить данные для обработки
// 		Распаковывает данные и подготавливает их для дальнейшей обработки
// Параметры:
//  ВходящиеДанные - Произвольный - ХранилищеЗначения (ДвоичныеДанные - XML) - XML сообщение из базы источника
// 
// Возвращаемое значение:
//   ВходящиеДанные:ХранилищеЗначения - ЧтениеXML
//
Функция ПодготовитьДанныеДляОбработки(ВходящиеДанные, ТипЗнчВозврата = "ПостроительDOM") Экспорт

	ЗначениеВозврата = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ХранилищеЗначения") Тогда
		
		Данные = ВходящиеДанные.Получить();	
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Поток = Данные.ОткрытьПотокДляЧтения();
			
			Если ТипЗнчВозврата = "ЧтениеXML" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ЗначениеВозврата = ЧтениеXML;
			ИначеЕсли ТипЗнчВозврата = "ПостроительDOM" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ПостроительDOM = Новый ПостроительDOM;
				ЗначениеВозврата = ПостроительDOM.Прочитать(ЧтениеXML);
			Иначе
				ЗначениеВозврата = ПолучитьСтрокуИзДвоичныхДанных(Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ЗначениеВозврата = Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ВыполнитьСобытиеПрямогоОбменаНасервере(УзелИсточник, УзелПолучатель, ИмяМетода, ИмяВызываемогоСобытия, ИмяПредопределенногоМенеджераОбмена) Экспорт
	
	ОбработкаОбъект = Вычислить("Обработки." + ИмяПредопределенногоМенеджераОбмена + ".Создать()");//РеквизитФормыВЗначение("Объект");
	
	Результат = Вычислить("ОбработкаОбъект." + ИмяМетода + "(УзелПолучатель.Наименование)");
	
	Если Результат.Отказ = Истина Тогда
		Сообщить(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтандартныеАтрибутыДокументаDOM(СтруктураДокумента, ДокументDOM) Экспорт 
	
	Атрибуты = ДокументDOM.Атрибуты;

	СтруктураДокумента.Вставить("ДокументГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ДокументГУИД").Значение);
	
	СтруктураДокумента.Вставить("ВидОбъекта", Атрибуты.ПолучитьИменованныйЭлемент("", "ВидОбъекта").Значение);
	СтруктураДокумента.Вставить("ТипОбъекта", Атрибуты.ПолучитьИменованныйЭлемент("", "ТипОбъекта").Значение);
	СтруктураДокумента.Вставить("ПометкаУдаления", Булево(Число(Атрибуты.ПолучитьИменованныйЭлемент("", "ПометкаУдаления").Значение)));
	СтруктураДокумента.Вставить("ЭтоДанныеНабораЗаписей",  Булево(Число(Атрибуты.ПолучитьИменованныйЭлемент("", "ЭтоДанныеНабораЗаписей").Значение)));
	
	Проведен = Атрибуты.ПолучитьИменованныйЭлемент("", "Проведен").Значение;
	Если Проведен <> Неопределено Тогда
		СтруктураДокумента.Вставить("Проведен", Булево(Число(Проведен)));
	КонецЕсли;
	
	Организация = Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияГУИД");
	Если Организация <> Неопределено Тогда  
		
		СтруктураОрганизация = ЗагрузитьДанные_Организцаия(Атрибуты);
		СтруктураДокумента.Вставить("Организация", СтруктураОрганизация);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьДанные_Организцаия(Атрибуты, ТЗ = Неопределено)
			
	СтруктураДокумента = новый Структура;
	//ПолучитьСтандартныеАтрибуты(СтруктураДокумента, ЧтениеXML);
	СтруктураДокумента.Вставить("ГУИД", Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияГУИД").Значение); 
	СтруктураДокумента.Вставить("Наименование",Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияНаименование").Значение); 
	СтруктураДокумента.Вставить("Префикс",Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияПрефикс").Значение);
	СтруктураДокумента.Вставить("ИНН",Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияИНН").Значение); 
	СтруктураДокумента.Вставить("КПП",Атрибуты.ПолучитьИменованныйЭлемент("", "ОрганизацияКПП").Значение);
	
	Возврат СтруктураДокумента;
	
КонецФункции

#КонецОбласти

#КонецЕсли