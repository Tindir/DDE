
Функция Версия() Экспорт
	
	Возврат "ВС.1.240821";
	
КонецФункции

Функция ИнициализацияСоединения(ДанныеУзлаПодключения) Экспорт
	
	Определение = Новый WSОпределения(ДанныеУзлаПодключения.МестоположениеWSDL, ДанныеУзлаПодключения.Пользователь, ДанныеУзлаПодключения.Пароль);
    Прокси = Новый WSПрокси(Определение, ДанныеУзлаПодключения.URIПространстваИменСервиса, ДанныеУзлаПодключения.ИмяСервиса, ДанныеУзлаПодключения.ИмяТочкиПодключения);       
		
	Прокси.Пользователь = ДанныеУзлаПодключения.Пользователь;
    Прокси.Пароль = ДанныеУзлаПодключения.Пароль;
	
	Возврат Прокси;
	
КонецФункции

#Область Обмен_УТ

#Область Отправка_СтатусСостоянияУзла

Функция ПодготовитьДанныеДляОтправки_СтатусСостоянияУзла(ДанныеУзлаПодключения) Экспорт 
	
	ЗначениеВозврата = новый Структура;
	
	ЗначениеВозврата.Вставить("ИмяУзла", ДанныеУзлаПодключения.Наименование);
	ЗначениеВозврата.Вставить("Код", ДанныеУзлаПодключения.Код);
	ЗначениеВозврата.Вставить("ДатаСтатуса", ТекущаяДата());
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ВыполнитьОтправку_СтатусСостоянияУзла(НаименованиеУзла) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_СтатусСостоянияУзла(ТекущийУзел);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "Весовая_СтатусОбъекта");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Отправка_ОбменаДанными

Функция ВыполнитьОтправку_ОбменДанными(НаименованиеУзла) Экспорт
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ДанныеДляОбмена(ТекущийУзел);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "Весовая_ОбменДанными");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	ВыполнитьОбработкуРезультата_ДанныеДляОбмена(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьОбработкуРезультата_ДанныеДляОбмена(Результат) Экспорт 
	
	Если Результат.Отказ = Ложь Тогда
		
		Данные = Результат.Результат;
		
		Данные = Обработки.УправлениеНастройкамиПрямогоОбмена.ПодготовитьДанныеДляОбработки(Данные, "ЧтениеXML");
		
		ЦПЗ_Обмены.ЗагрузитьДанныеВБазуЧтениеXML(Данные);
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ДанныеДляОбмена(Отправитель_ИмяУзла) Экспорт 
	
	Стр = ЦПЗ_Обмены.ВыполнитьВыгрузкуВПоток();
	Возврат Стр;
	
КонецФункции

#КонецОбласти

#КонецОбласти