
Функция Версия() Экспорт
	
	Возврат "УТ.1.020322.1";
	
КонецФункции

Функция ИнициализацияСоединения(ДанныеУзлаПодключения) Экспорт
	
	Определение = Новый WSОпределения(ДанныеУзлаПодключения.МестоположениеWSDL, ДанныеУзлаПодключения.Пользователь, ДанныеУзлаПодключения.Пароль);
    Прокси = Новый WSПрокси(Определение, ДанныеУзлаПодключения.URIПространстваИменСервиса, ДанныеУзлаПодключения.ИмяСервиса, ДанныеУзлаПодключения.ИмяТочкиПодключения);       
		
	Прокси.Пользователь = ДанныеУзлаПодключения.Пользователь;
    Прокси.Пароль = ДанныеУзлаПодключения.Пароль;
	
	Возврат Прокси;
	
КонецФункции

#Область Обмен_Бухгалтерия

#Область ЗаявкаНаДС

#Область Отправка_ЗаявкаНаДС

Функция ВыполнитьОтправку_ЗаявкаНаДС(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ЗаявкаНаДС(ДокументСсылка);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ЗаявкаНаДенежныеСредства");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ЗаявкаНаДС(ДокументСсылка)
	
	Поток = Новый ПотокВПамяти(); 
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(Поток, "UTF-8"); //Открываем файл для записи, указываем кодировку
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеДляБП");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЦПЗ_ЗаявкаНаДенежныеСредства"); // Начало элемента Документа "ПоступлениеУслуг"
	//
	СС = НайтиЗначениеПеречисления("Оплачено", "СтатусыКоммерческихПредложенийКлиентам");
	
	ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ЗаписьXML, ДокументСсылка, Ложь);
	
	ЗаписьXML.ЗаписатьАтрибут("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("Номер", Строка(ДокументСсылка.номер));
	ЗаписьXML.ЗаписатьАтрибут("Дата", Строка(ДокументСсылка.дата));
	
	ЗаписьXML.ЗаписатьАтрибут("КонтрагентТип", Строка(ТипЗнч(ДокументСсылка.Контрагент)));
	ЗаписьXML.ЗаписатьАтрибут("КонтрагентНаименование", Строка(ДокументСсылка.Контрагент));
	Если ТипЗнч(ДокументСсылка.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентИНН", Строка(ДокументСсылка.Контрагент.ИНН));
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентКПП", Строка(ДокументСсылка.Контрагент.КПП));
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентГУИД", Строка(ДокументСсылка.Контрагент.УникальныйИдентификатор()));
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентИНН","");
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентКПП","");
		ЗаписьXML.ЗаписатьАтрибут("КонтрагентГУИД","");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("ДоговорТип", Строка(ТипЗнч(ДокументСсылка.ДоговорКонтрагента)));
	Если ТипЗнч(ДокументСсылка.ДоговорКонтрагента)=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаписьXML.ЗаписатьАтрибут("ДоговорНомер", Строка(ДокументСсылка.ДоговорКонтрагента.Номер));
		ЗаписьXML.ЗаписатьАтрибут("ДоговорДата", Строка(ДокументСсылка.ДоговорКонтрагента.Дата));
		ЗаписьXML.ЗаписатьАтрибут("ДоговорНаименование", Строка(ДокументСсылка.ДоговорКонтрагента.Наименование));
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("ДоговорНомер","");
		ЗаписьXML.ЗаписатьАтрибут("ДоговорДата","");
		ЗаписьXML.ЗаписатьАтрибут("ДоговорНаименование", Строка(ДокументСсылка.ДоговорКонтрагента));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетТип", Строка(ТипЗнч(ДокументСсылка.БанковскийСчетКонтрагента)));
	ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетКонтрагента", Строка(ДокументСсылка.БанковскийСчетКонтрагента));
	Если ТипЗнч(ДокументСсылка.БанковскийСчетКонтрагента) = Тип("Строка") Тогда
		ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетКонтрагентаНомер", Строка(ДокументСсылка.БанковскийСчетКонтрагента));
		ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетКонтрагентаБик", Строка(""));

	Иначе
		ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетКонтрагентаНомер", Строка(ДокументСсылка.БанковскийСчетКонтрагента.НомерСчета));
		ЗаписьXML.ЗаписатьАтрибут("БанковскийСчетКонтрагентаБик", Строка(ДокументСсылка.БанковскийСчетКонтрагента.БИКБанка));
	КонецЕсли;

	ЗаписьXML.ЗаписатьАтрибут("СуммаДокумента", Строка(ДокументСсылка.СуммаДокумента));
	ЗаписьXML.ЗаписатьАтрибут("Назначение", Строка(ДокументСсылка.Назначение));
	ЗаписьXML.ЗаписатьАтрибут("НазначениеПлатежа", Строка(ДокументСсылка.НазначениеПлатежа)); 
	ЗаписьXML.ЗаписатьАтрибут("ОбоснованиеПлатежа", Строка(ДокументСсылка.ОбоснованиеПлатежа));
	ЗаписьXML.ЗаписатьАтрибут("СтатьяДвиженияДенежныхСредствГУИД", Строка(ДокументСсылка.СтатьяДвиженияДенежныхСредствБУ.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("ВидОперации", Строка(ДокументСсылка.ВидОперации));
	ЗаписьXML.ЗаписатьАтрибут("ДатаПлатежа", Строка(ДокументСсылка.ДатаПлатежа));
	ЗаписьXML.ЗаписатьАтрибут("Статус", Строка(ДокументСсылка.Статус));
	ЗаписьXML.ЗаписатьАтрибут("ДатаФактическогоИсполненияОбязательств", Строка(ДокументСсылка.ДатаФактическогоИсполненияОбязательств));
	ЗаписьXML.ЗаписатьАтрибут("ДокументыПредоставленыВБухгалтерию", Формат(ДокументСсылка.ДокументыПредоставленыВБухгалтерию, "БЛ=0; БИ=1"));
	
	ЗаписьXML.ЗаписатьАтрибут("флСогласовалБухгалтер", Строка(ДокументСсылка.флСогласовалБухгалтер));
	ЗаписьXML.ЗаписатьАтрибут("флСогласовалЭкономист", Строка(ДокументСсылка.флСогласовалЭкономист));
	
	ЗаписьXML.ЗаписатьАтрибут("Сотрудник", Строка(ДокументСсылка.Сотрудник));
	ЗаписьXML.ЗаписатьАтрибут("ЗамечаниеБухгалтера", Строка(ДокументСсылка.ЗамечаниеБухгалтера));
	ЗаписьXML.ЗаписатьАтрибут("ТипОлаты", Строка(ДокументСсылка.ТипОлаты));
	ЗаписьXML.ЗаписатьАтрибут("ЗамечаниеЭкономиста", Строка(ДокументСсылка.ЗамечаниеЭкономиста));
	ЗаписьXML.ЗаписатьАтрибут("ВидЗаявки", Строка(ДокументСсылка.ВидЗаявки));
	ЗаписьXML.ЗаписатьАтрибут("ПодразделениеГУИД", Строка(ДокументСсылка.Подразделение.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("ЖелаемаяДатаПлатежа", Строка(ДокументСсылка.ЖелаемаяДатаПлатежа));
	ЗаписьXML.ЗаписатьАтрибут("СтавкаНДС", Строка(ДокументСсылка.СтавкаНДС));
	
	ТЧДокументыОплаты = ДокументСсылка.ДокументыОплаты;
	Для Каждого СтрТч из ТЧДокументыОплаты цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ЦПЗ_ЗаявкаНаДенежныеСредстваДокументыОплаты"); 
		ЗаписьXML.ЗаписатьАтрибут("ДокументыОплатыНомер", Строка(СтрТч.номер));
		ЗаписьXML.ЗаписатьАтрибут("ДокументыОплатыДата", Строка(СтрТч.Дата));
		ЗаписьXML.ЗаписатьАтрибут("ДокументыОплатыСумма", Строка(СтрТч.Сумма));
		ЗаписьXML.ЗаписатьАтрибут("ДокументыОплатыДатаФактическогоИсполненияОбязательств", Строка(СтрТч.ДатаФактическогоИсполненияОбязательств));
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	Конеццикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область Отправка_ЗаявкаНаДС_Статус

Функция ВыполнитьОтправку_ЗаявкаНаДС_Статус(ДокументыСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	СписокДокументов = Новый Массив;
	Если ТипЗНЧ(ДокументыСсылка) = Тип("Массив") Тогда
		СписокДокументов = ДокументыСсылка;
	Иначе
		СписокДокументов.Добавить(ДокументыСсылка);	
	КонецЕсли;
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ЗаявкаНаДС_Статус(СписокДокументов);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ЗаявкаНаДенежныеСредства_Статус");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Если Результат.Отказ = Ложь Тогда
		Результат.Результат = ОбработкатьОтвет_ЗаявкаНаДС_Статус(ДокументыСсылка, Результат.Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ЗаявкаНаДС_Статус(СписокДокументов)
	
	ДокументДом = Новый ДокументDOM;
	ЭлементСписок = ДокументДом.СоздатьЭлемент("СписокДокументов");
	ДокументДом.ДобавитьДочерний(ЭлементСписок);
	
	Для Каждого Стр Из СписокДокументов Цикл
		
		ЭлементСтрокаСписка = ДокументДом.СоздатьЭлемент("Документ");
		//ЭлементСтрокаСписка.УстановитьАтрибут("ТипЗнч", "" + ТипЗнч(Стр));
		
			ЭлементДокументСсылка = ДокументДом.СоздатьЭлемент("ДокументСсылка");
			ДанныеСтрокаСписка = ДокументДом.СоздатьТекстовыйУзел(Строка(Стр.УникальныйИдентификатор()));
			ЭлементДокументСсылка.ДобавитьДочерний(ДанныеСтрокаСписка);
		    ЭлементСтрокаСписка.ДобавитьДочерний(ЭлементДокументСсылка);
			
			
			ОбъектМетаданные = Стр.Метаданные();
   			ИмяТипа = ОбъектМетаданные.ПолноеИмя();
			
			ЭлементДокументТипЗнч = ДокументДом.СоздатьЭлемент("ТипЗнч");
			ДанныеСтрокаСписка = ДокументДом.СоздатьТекстовыйУзел(Строка(ИмяТипа));
			ЭлементДокументТипЗнч.ДобавитьДочерний(ДанныеСтрокаСписка);
		    ЭлементСтрокаСписка.ДобавитьДочерний(ЭлементДокументТипЗнч);

			
		ЭлементСписок.ДобавитьДочерний(ЭлементСтрокаСписка);
		
	КонецЦикла;	
	
	Поток = Новый ПотокВПамяти(); 
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(Поток, "UTF-8");
	
	ЗаписьДОМ = Новый ЗаписьDOM;
    ЗаписьДОМ.Записать(ДокументДом, ЗаписьXML);
	    
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	//ПолучитьСтрокуИзДвоичныхДанных(Результат.Результат.Получить());
	
	Возврат ДвоичныеДанные;

КонецФункции

// Функция - Обработкать ответ заявка на д с статус
//
// Параметры:
//  ДокументыСсылка	 - Массив,Ссылка - Объекты, по которым должен поступить ответ от сервиса
//  ОтветСервиса	 - ХранилищеЗначения - ХранилищеЗначения с XML документом 
// 
// Возвращаемое значение:
//  Соответствие - Соответвие ссылок из ДокументСсылка полученным статусам из ОтветСервиса
//
Функция ОбработкатьОтвет_ЗаявкаНаДС_Статус(ДокументыСсылка, ОтветСервиса)
	
	ЗначениеВозврата = новый Соответствие;
	
	Если ТипЗнч(ДокументыСсылка) = Тип("Массив") Тогда
		Для каждого эл Из ДокументыСсылка Цикл
			ЗначениеВозврата.Вставить(эл, НайтиЗначениеПеречисления("", "СтатусыКоммерческихПредложенийКлиентам"));
		КонецЦикла;		
	Иначе
		ЗначениеВозврата.Вставить(ДокументыСсылка, НайтиЗначениеПеречисления("", "СтатусыКоммерческихПредложенийКлиентам"));
	КонецЕсли;
	
	ДанныеОтвет = Обработки.УправлениеНастройкамиПрямогоОбмена.ПодготовитьДанныеДляОбработки(ОтветСервиса);
	
	СпискиДокументов = ДанныеОтвет.ДочерниеУзлы;
	Для каждого СписокДокументов Из СпискиДокументов Цикл
		Для каждого СтрСписка Из СписокДокументов.ДочерниеУзлы Цикл
			СтрокаГУИД = "";
			ТипЗнчДанных = "";
			СтатусДокументаОтвет = "";
			Для каждого РеквизитыСтр Из СтрСписка.ДочерниеУзлы Цикл
				Если РеквизитыСтр.ИмяУзла = "ДокументСсылка" Тогда
					СтрокаГУИД = РеквизитыСтр.ТекстовоеСодержимое;	
				ИначеЕсли РеквизитыСтр.ИмяУзла = "ТипЗнч" Тогда
					ТипЗнчДанных = РеквизитыСтр.ТекстовоеСодержимое;
				ИначеЕсли РеквизитыСтр.ИмяУзла = "СтатусДокумента" Тогда
					СтатусДокументаОтвет = РеквизитыСтр.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаГУИД <> "" И ТипЗнчДанных <> "" Тогда
				
				СтатусДокумента = НайтиЗначениеПеречисления(СтатусДокументаОтвет, "СтатусыКоммерческихПредложенийКлиентам");
				Если ЗначениеЗаполнено(СтатусДокумента) Тогда
					МенеджерОбъекта = Новый (СтрЗаменить(ТипЗнчДанных, ".", "Менеджер.")); 
					СсылкаНаДокумент = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаГУИД)));
				
					ОбъектДок = СсылкаНаДокумент.ПолучитьОбъект();
					Если ОбъектДок <> Неопределено Тогда
						Если ЗначениеВозврата.Получить(СсылкаНаДокумент) <> Неопределено Тогда
							ЗначениеВозврата.Вставить(СсылкаНаДокумент, СтатусДокумента); 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;

	Возврат ЗначениеВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаказыКлиента_РасходныеОрдера

Функция ПодготовитьДанныеДляОтправки_ДанныеОтгрузки(ВходящиеПараметры) Экспорт
	
	ВходящиеНомера = Новый Массив;
	Если ВходящиеПараметры.Свойство("НомераВходящихТранспортныхДокументов") Тогда
		ВходящиеНомера = ВходящиеПараметры.НомераВходящихТранспортныхДокументов;
	КонецЕсли;
	
	ПериодНачало = НачалоГода(ТекущаяДата()); 
	Если ВходящиеПараметры.Свойство("ПериодНачало") Тогда 
		ПериодНачало = ВходящиеПараметры.ПериодНачало;
	КонецЕсли;
	ПериодОкончание = КонецГода(ТекущаяДата());
	Если ВходящиеПараметры.Свойство("ПериодОкончание") Тогда 
		ПериодОкончание = ВходящиеПараметры.ПериодОкончание;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоВходящимНомерам", ?(ВходящиеНомера.Количество() <> 0 , Истина, Ложь));
	Запрос.УстановитьПараметр("ВходящиеНомераТранспортныхДокументов", ВходящиеНомера);
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодОкончание", ПериодОкончание);
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));  
	Запрос.УстановитьПараметр("ПустойГУИДСтрока", "00000000-0000-0000-0000-000000000000");
	
	Организация = ПолучитьОрганизацию(ВходящиеПараметры.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//Поумолчанию отрабатываем только документы с установленным номерами накладных поставщика.
	Запрос.УстановитьПараметр("СпособОбеспечения", 0);
	Если ВходящиеПараметры.Свойство("СпособОбеспечения") Тогда
		Запрос.УстановитьПараметр("СпособОбеспечения", ВходящиеПараметры.СпособОбеспечения);
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_ДанныеОтгрузки();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	Если ТаблицаДанных.Колонки.Найти("Организация") <> Неопределено Тогда
		КолонкаДанныхОрганизации = ТаблицаДанных.Колонки.Добавить("ДанныеОрганизации", новый ОписаниеТипов("Структура"));	
	КонецЕсли;
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(Стр.ДокументЗаказКлиента) Тогда
			Стр.ДокументЗаказКлиентаГУИД = Стр.ДокументЗаказКлиента.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументРасходныйОрдерНаТовары) Тогда
			Стр.ДокументРасходныйОрдерНаТоварыГУИД = Стр.ДокументРасходныйОрдерНаТовары.УникальныйИдентификатор(); 
			Стр.ДокументРасходныйОрдерНаТоварыВнешняяСсылка = ПолучитьВнешнююНавигационнуюСсылку(ПолучитьНавигационнуюСсылкуИнформационнойБазы(), ПолучитьНавигационнуюСсылку(Стр.ДокументРасходныйОрдерНаТовары));
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Стр.НоменклатураГУИД = Стр.Номенклатура.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ПартияТовара) Тогда
			Стр.ПартияТовараГУИД = Стр.ПартияТовара.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Организация) Тогда
			Стр.ОрганизацияГУИД = Стр.Организация.УникальныйИдентификатор();
			Стр.ДанныеОрганизации = ПодготовитьДанныеОрганизации(Стр.Организация); 
		Иначе
			Стр.ДанныеОрганизации = ПодготовитьДанныеОрганизации(Стр.Организация); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладРасходногоОрдера) Тогда
			Стр.СкладРасходногоОрдераГУИД = Стр.СкладРасходногоОрдера.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладЗаказа) Тогда
			Стр.СкладЗаказаГУИД = Стр.СкладЗаказа.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Стр.КонтрагентГУИД = Стр.Контрагент.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Грузополучатель) Тогда
			Стр.ГрузополучательГУИД = Стр.Грузополучатель.УникальныйИдентификатор();
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Перевозчик) Тогда
			Стр.ПеревозчикГУИД = Стр.Перевозчик.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДокументЗаказКлиента) Тогда
			Стр.ДокументЗаказКлиентаВнешняяСсылка = ПолучитьВнешнююНавигационнуюСсылку(ПолучитьНавигационнуюСсылкуИнформационнойБазы(), ПолучитьНавигационнуюСсылку(Стр.ДокументЗаказКлиента));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_ДанныеОтгрузки()
	
	Текст = "ВЫБРАТЬ
        |	ОтгружаемыеТовары.Ссылка КАК ДокументРасходныйОрдерНаТовары,
		|	ОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
		|	ОтгружаемыеТовары.Ссылка.Перевозчик КАК Перевозчик,
		|	Выразить(ОтгружаемыеТовары.Ссылка.АдресДоставки КАК СТРОКА(500)) КАК АдресДоставки,
		|	НачалоПериода(ОтгружаемыеТовары.ДатаФакт, ДЕНЬ) КАК ДатаОтгрузки,
        |	ОтгружаемыеТовары.Ссылка.Склад КАК СкладРасходногоОрдера,
        |	ОтгружаемыеТовары.Номенклатура КАК Номенклатура,
		|	ОтгружаемыеТовары.ПартияТовара КАК ПартияТовара,
        |	СУММА(ОтгружаемыеТовары.Количество) КАК Количество,
        |	СУММА(ОтгружаемыеТовары.КоличествоБаза) КАК КоличествоБаза,
        |	СУММА(ОтгружаемыеТовары.КоличествоФакт) КАК КоличествоФакт,
        |	ОтгружаемыеТовары.номерНакладной КАК НомерНакладной,
        |	ОтгружаемыеТовары.ВесГруженный КАК ВесГруженный,
        |	ОтгружаемыеТовары.Ссылка.ДокументОснование КАК ДокументЗаказКлиента,
        |	ОтгружаемыеТовары.Ссылка.ДокументОснование.Организация КАК Организация
        |ПОМЕСТИТЬ ДанныеРасходныхОрдеров
        |ИЗ
        |	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоВходящимНомерам
        |				ТОГДА ОтгружаемыеТовары.номерНакладной В (&ВходящиеНомераТранспортныхДокументов)
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ    
		|	И ВЫБОР 
		|		КОГДА &СпособОбеспечения = 0 
        |			ТОГДА ОтгружаемыеТовары.номерНакладной <> """"
        |					И ОтгружаемыеТовары.номерНакладной <> ""0"" 
		|		КОГДА &СпособОбеспечения = 1 
        |			ТОГДА ОтгружаемыеТовары.номерНакладной = """"
        |					ИЛИ ОтгружаемыеТовары.номерНакладной = ""0""
		|		КОГДА &СпособОбеспечения = 3 
        |			ТОГДА Истина
		|		КОНЕЦ	
        |	И ОтгружаемыеТовары.Ссылка.Проведен = ИСТИНА
        |	И ОтгружаемыеТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
        |	И ОтгружаемыеТовары.ДатаФакт МЕЖДУ &ПериодНачало И &ПериодОкончание
        |	И ОтгружаемыеТовары.Ссылка.ДокументОснование.Организация = &Организация 
        |			
        |СГРУППИРОВАТЬ ПО
        |	ОтгружаемыеТовары.Ссылка,   
		|	ОтгружаемыеТовары.НомерСтроки,
        |	ОтгружаемыеТовары.Ссылка.Перевозчик,
        |	ОтгружаемыеТовары.Ссылка.Склад,
        |	ОтгружаемыеТовары.Номенклатура,
		|	ОтгружаемыеТовары.ПартияТовара,
        |	ОтгружаемыеТовары.НомерНакладной,
        |	ОтгружаемыеТовары.ВесГруженный,
        |	ОтгружаемыеТовары.Ссылка.ДокументОснование,
        |	ОтгружаемыеТовары.Ссылка.ДокументОснование.Организация,
        |	ВЫРАЗИТЬ(ОтгружаемыеТовары.Ссылка.АдресДоставки КАК СТРОКА(500)),
        |	НАЧАЛОПЕРИОДА(ОтгружаемыеТовары.ДатаФакт, ДЕНЬ)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ЗаказКлиентаТовары.Ссылка.Организация КАК Организация,
        |	ЗаказКлиентаТовары.Ссылка.Контрагент КАК Контрагент,
        |	ВЫБОР КОГДА ЗаказКлиентаТовары.Ссылка.СпособДоставки = Значение(Перечисление.СпособыДоставки.ЖДДоставка)
		|		ТОГДА ЗаказКлиентаТовары.Ссылка.ЦПЗ_ЖДГрузополучатель
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Грузополучатель 
		|	КОНЕЦ КАК Грузополучатель,
        |	ЗаказКлиентаТовары.Ссылка.Договор КАК Договор,
        |	ЗаказКлиентаТовары.Ссылка КАК ДокументЗаказКлиента,
        |	ЗаказКлиентаТовары.Ссылка.Склад КАК Склад,
        |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
        |	ЗаказКлиентаТовары.Количество КАК Количество,
        |	ЗаказКлиентаТовары.Цена КАК Цена
        |ПОМЕСТИТЬ ДанныеЗаказовКлиента
        |ИЗ
        |	(ВЫБРАТЬ
        |		ДанныеРасходныхОрдеров.ДокументЗаказКлиента КАК ДокументЗаказКлиента
        |	ИЗ
        |		ДанныеРасходныхОрдеров КАК ДанныеРасходныхОрдеров
        |	
        |	СГРУППИРОВАТЬ ПО
        |		ДанныеРасходныхОрдеров.ДокументЗаказКлиента) КАК ИспользуемыеЗаказы
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
        |		ПО ИспользуемыеЗаказы.ДокументЗаказКлиента = ЗаказКлиентаТовары.Ссылка
        |			И ИспользуемыеЗаказы.ДокументЗаказКлиента.Организация = ЗаказКлиентаТовары.Ссылка.Организация
        |ГДЕ
        |	ЗаказКлиентаТовары.Ссылка.Организация = &Организация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ДанныеРасходныхОрдеров.ДокументРасходныйОрдерНаТовары КАК ДокументРасходныйОрдерНаТовары,
		|	ДанныеРасходныхОрдеров.НомерСтроки КАК НомерСтроки,
		|	ДанныеРасходныхОрдеров.ДатаОтгрузки КАК ДатаОтгрузки,
        |	ВЫРАЗИТЬ("""" КАК СТРОКА(150)) КАК ДокументРасходныйОрдерНаТоварыВнешняяСсылка,
        |	&ПустойГУИД КАК ДокументРасходныйОрдерНаТоварыГУИД,
        |	ДанныеРасходныхОрдеров.ДокументРасходныйОрдерНаТовары.Номер КАК ДокументРасходныйОрдерНаТоварыНомер,
        |	ДанныеРасходныхОрдеров.ДокументРасходныйОрдерНаТовары.Дата КАК ДокументРасходныйОрдерНаТоварыДата,
        |	ДанныеРасходныхОрдеров.Номенклатура КАК Номенклатура,
        |	&ПустойГУИД КАК НоменклатураГУИД,
        |	ДанныеРасходныхОрдеров.ПартияТовара КАК ПартияТовара,
        |	&ПустойГУИД КАК ПартияТовараГУИД,
        |	ВЫРАЗИТЬ(ДанныеРасходныхОрдеров.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
        |	ВЫРАЗИТЬ(ДанныеРасходныхОрдеров.КоличествоБаза КАК ЧИСЛО(15, 3)) КАК КоличествоБаза,
        |	ВЫРАЗИТЬ(ДанныеРасходныхОрдеров.КоличествоФакт КАК ЧИСЛО(15, 3)) КАК КоличествоФакт,
        |	ДанныеРасходныхОрдеров.НомерНакладной КАК НомерНакладной,
        |	ДанныеРасходныхОрдеров.ВесГруженный КАК ВесГруженный,
        |	ЕСТЬNULL(ДанныеЗаказовКлиента.Организация, Значение(Справочник.Организации.ПустаяСсылка)) КАК Организация,
        |	&ПустойГУИД КАК ОрганизацияГУИД,
        |	ДанныеЗаказовКлиента.Организация.Наименование КАК ОрганизацияНаименование,
        |	ДанныеЗаказовКлиента.Контрагент КАК Контрагент,
        |	&ПустойГУИД КАК КонтрагентГУИД,
        |	ДанныеЗаказовКлиента.Контрагент.Наименование КАК КонтрагентНаименование,
        |	ДанныеЗаказовКлиента.Контрагент.ИНН КАК КонтрагентИНН,
        |	ДанныеЗаказовКлиента.Контрагент.КПП КАК КонтрагентКПП,
        |	ДанныеЗаказовКлиента.Грузополучатель КАК Грузополучатель,
        |	&ПустойГУИД КАК ГрузополучательГУИД,
        |	ДанныеЗаказовКлиента.Грузополучатель.Наименование КАК ГрузополучательНаименование,
        |	ДанныеЗаказовКлиента.Грузополучатель.ИНН КАК ГрузополучательИНН,
        |	ДанныеЗаказовКлиента.Грузополучатель.КПП КАК ГрузополучательКПП,
        |	ДанныеРасходныхОрдеров.Перевозчик КАК Перевозчик,
        |	ДанныеРасходныхОрдеров.Перевозчик.Наименование КАК ПеревозчикНаименование,
        |	ДанныеРасходныхОрдеров.Перевозчик.ИНН КАК ПеревозчикИНН,
        |	ДанныеРасходныхОрдеров.Перевозчик.КПП КАК ПеревозчикКПП,
        |	&ПустойГУИД КАК ПеревозчикГУИД,
        |	ДанныеРасходныхОрдеров.АдресДоставки КАК АдресДоставки,
        |	ДанныеЗаказовКлиента.Договор КАК Договор,
        |	ДанныеЗаказовКлиента.Договор.Номер КАК ДоговорНомер,
        |	ДанныеЗаказовКлиента.ДокументЗаказКлиента КАК ДокументЗаказКлиента,
        |	ДанныеЗаказовКлиента.ДокументЗаказКлиента.ЦенаВключаетНДС КАК ЦенаЗаказаВключаетНДС, 
        |	&ПустойГУИДСтрока КАК ДокументЗаказКлиентаГУИД,
        |	ДанныеЗаказовКлиента.ДокументЗаказКлиента.Номер КАК ДокументЗаказКлиентаНомер,
        |	ДанныеЗаказовКлиента.ДокументЗаказКлиента.Дата КАК ДокументЗаказКлиентаДата,
        |	ВЫРАЗИТЬ("""" КАК СТРОКА(150)) КАК ДокументЗаказКлиентаВнешняяСсылка,
        |	ДанныеЗаказовКлиента.Склад КАК СкладЗаказа, 
        |	&ПустойГУИД КАК СкладЗаказаГУИД,
		|	ДанныеРасходныхОрдеров.СкладРасходногоОрдера КАК СкладРасходногоОрдера,
        |	&ПустойГУИД КАК СкладРасходногоОрдераГУИД,
        |	ДанныеЗаказовКлиента.Количество КАК КоличествоЗаказа,
        |	ВЫРАЗИТЬ(ДанныеЗаказовКлиента.Цена КАК ЧИСЛО(15, 2)) КАК ЦенаЗаказа
        |ИЗ
        |	ДанныеРасходныхОрдеров КАК ДанныеРасходныхОрдеров
        |		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеЗаказовКлиента КАК ДанныеЗаказовКлиента
        |		ПО ДанныеРасходныхОрдеров.ДокументЗаказКлиента = ДанныеЗаказовКлиента.ДокументЗаказКлиента
        |			И ДанныеРасходныхОрдеров.Номенклатура = ДанныеЗаказовКлиента.Номенклатура
		|
		|ГДЕ 
		|	ДанныеРасходныхОрдеров.ДокументРасходныйОрдерНаТовары ЕСТЬ НЕ NULL";
	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область РасходныеОрдерНаТовары

Функция ВыполнитьОтправку_РасходныйОрдерНаТовары(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары(ДокументСсылка);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_РасходныйОрдерНаТовары");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары(ДокументСсылка) Экспорт 
	
	Поток = Новый ПотокВПамяти(); 
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(Поток, "UTF-8"); //Открываем файл для записи, указываем кодировку
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеДляБП");	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("РасходныйОрдерНаТовары");
	ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ЗаписьXML, ДокументСсылка, Ложь); 
	ЗаписьXML.ЗаписатьАтрибут("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("Номер", Строка(ДокументСсылка.номер));
	ЗаписьXML.ЗаписатьАтрибут("Дата", Строка(ДокументСсылка.ДатаОтгрузки));
	ЗаписьXML.ЗаписатьАтрибут("СкладГУИД", Строка(ДокументСсылка.Склад.УникальныйИдентификатор()));
	Контрагент = НайтиКонтрагентаПоПартнеру(ДокументСсылка.Получатель);
	ЗаписьXML.ЗаписатьАтрибут("КонтрагентИНН", Строка(Контрагент.ИНН));
	ЗаписьXML.ЗаписатьАтрибут("КонтрагентКПП", Строка(Контрагент.КПП));
	ЗаписьXML.ЗаписатьАтрибут("КонтрагентГУИД", Строка(Контрагент.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("Автомобиль", Строка(ДокументСсылка.Транспорт));
	ЗаписьXML.ЗаписатьАтрибут("Водитель", Строка(ДокументСсылка.Водитель));
	ЗаписьXML.ЗаписатьАтрибут("Ответственный", Строка(ДокументСсылка.Ответственный));
	ЗаписьXML.ЗаписатьАтрибут("Комментарий", Строка(ДокументСсылка.Комментарий));  
	
	Грузополучатель = ДокументСсылка.Грузополучатель;
	Если Не ЗначениеЗаполнено(Грузополучатель) Тогда
		Грузополучатель = Контрагент;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("Грузополучатель", Строка(Грузополучатель.УникальныйИдентификатор()));
	Попытка
		ЗаписьXML.ЗаписатьАтрибут("ГрузополучательИНН",Строка(Грузополучатель.ИНН));
		ЗаписьXML.ЗаписатьАтрибут("ГрузополучательКПП",Строка(Грузополучатель.КПП));
	Исключение
	Конецпопытки;
	
	ЗаписьXML.ЗаписатьАтрибут("СостояниеДокумента", Строка(ДокументСсылка.СостояниеДокумента));
	
	ЗаписьXML.ЗаписатьАтрибут("ПриемПоВесамКлиента",Строка(ДокументСсылка.ПриемПоВесамКлиента));
	Для Каждого СтрТч из ДокументСсылка.ОтгружаемыеТовары цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасходныйОрдерНаТоварыТаблицаТовары"); 
		ЗаписьXML.ЗаписатьАтрибут("ТоварыНоменклатураГУИД",Строка(СтрТч.номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("ТоварыНоменклатураНаименование",Строка(СтрТч.номенклатура.Наименование));
		ЗаписьXML.ЗаписатьАтрибут("ТоварыКоличество",Строка(СтрТч.Количество));
		ЗаписьXML.ЗаписатьАтрибут("ТоварыКоличествоФакт",Строка(СтрТч.КоличествоФакт));
		ЗаписьXML.ЗаписатьАтрибут("ТоварыКоличествоК",Строка(СтрТч.КоличествоК));
		ЗаписьXML.ЗаписатьАтрибут("ТоварыЦена", Строка(ПолучитьПродажнуюЦенуЗаказа(ДокументСсылка.ДокументОснование, СтрТч.Номенклатура)));
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
	Конеццикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область СписаниеТМЦ

#Область СписаниеТМЦ_Список

Функция ПодготовитьДанныеДляОтправки_СписаниеТМЦ_Список(ВходящиеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоПериоду", Ложь);
	Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ДатаНачала")
			И ВходящиеПараметры.Свойство("ДатаОкончания")
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала)
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		//
		Запрос.УстановитьПараметр("ОтборПоПериоду", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания);
		
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Запрос.УстановитьПараметр("ИНН", ВходящиеПараметры.Организация.ИНН);
			Запрос.УстановитьПараметр("КПП", ВходящиеПараметры.Организация.КПП);
		КонецЕсли;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = ПолучитьТекстЗапроса_СписаниеТМЦ_Список();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(Стр.СписаниеТМЦ_Ссылка) Тогда
			Стр.СписаниеТМЦ_ГУИД = Стр.СписаниеТМЦ_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладГлавный_Ссылка) Тогда
			Стр.СкладГлавныйГУИД = Стр.СкладГлавный_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_СписаниеТМЦ_Список()
	
	Текст = "ВЫБРАТЬ
        |	Документ.Представление КАК СписаниеТМЦ_Предстваление,
        |	Документ.Проведен КАК СписаниеТМЦПроведен,
        |	Документ.Дата КАК ДатаДокумента,
        |	Документ.Ссылка КАК СписаниеТМЦ_Ссылка,
        |	&ПустойГУИД КАК СписаниеТМЦ_ГУИД,
        |	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
        |	Документ.ДокументУчетаВЭксплуатацииГУИД КАК ДокументУчетаВЭксплуатацииГУИД,
        |	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
        |	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
        |	ВЫРАЗИТЬ(Документ.СкладГлавный.Наименование КАК СТРОКА(100)) КАК СкладГлавный,
        |	Документ.СкладГлавный КАК СкладГлавный_Ссылка,
        |	&ПустойГУИД КАК СкладГлавныйГУИД,
        |	ВЫРАЗИТЬ(Документ.ОбъектСписания.Наименование КАК СТРОКА(100)) КАК ОбъектСписания,
        |	ВЫРАЗИТЬ(Документ.Мастер.Наименование КАК СТРОКА(100)) КАК Мастер,
        |	ВЫРАЗИТЬ(Документ.Комментарий КАК СТРОКА(100)) КАК Комментарий,
        |	Документ.флОсСписком КАК флОсСписком
        |ИЗ
        |	Документ.ЦПЗ_СписаниеТМЦ КАК Документ
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ 
		|	И Документ.ВидОперации <> Значение(Перечисление.ЦПЗ_ОперацияДокументаДвижения.РеализацияТоваровУслуг)
        |	И Документ.Проведен = ИСТИНА
        |	И Документ.Организация.ИНН = &ИНН
        |	И Документ.Организация.КПП = &КПП";
	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СписаниеТМЦ_Объект

Функция ВыполнитьОтправку_СписаниеТМЦ(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_СписаниеТМЦ(ПараметрыДанных);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СписаниеТМЦ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_СписаниеТМЦ(ВходящиеПараметры) Экспорт
	
	Поток = Новый ПотокВПамяти(); 
	
	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(Поток, "UTF-8"); //Открываем файл для записи, указываем кодировку
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеДляБП");	
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				ДокументСсылка = Документы.ЦПЗ_СписаниеТМЦ.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_СписаниеТМЦ(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СписанияТМЦ");
	КонецЕсли;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СписаниеТМЦ");
		ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ЗаписьXML, ДокументСсылка, Ложь); 
		ЗаписьXML.ЗаписатьАтрибут("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("Номер", Строка(ДокументСсылка.Номер));
		ЗаписьXML.ЗаписатьАтрибут("Дата", Строка(ДокументСсылка.Дата));
		
		ЗаписьXML.ЗаписатьАтрибут("ДокументСкладскогоУчетаГУИД", ДокументСсылка.ДокументСкладскогоУчетаГУИД);
		ЗаписьXML.ЗаписатьАтрибут("ДокументУчетаВЭксплуатацииГУИД", ДокументСсылка.ДокументУчетаВЭксплуатацииГУИД);
		
		ЗаписьXML.ЗаписатьАтрибут("СкладГлавный", Строка(ДокументСсылка.СкладГлавный.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("Комментарий", Строка(ДокументСсылка.Комментарий));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СписаниеТМЦ_СписокТМЦ");
		Для Каждого СтрТЧ Из ДокументСсылка.СписокТМЦ Цикл 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СписаниеТМЦ_СписокТМЦ_Строка");
			ЗаписьXML.ЗаписатьАтрибут("НомерСтроки", Строка(СтрТЧ.НомерСтроки));
			ЗаписьXML.ЗаписатьАтрибут("ТМЦ", Строка(СтрТЧ.ТМЦ.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("Количество", Строка(СтрТЧ.Количество));
			
			ЗаписьXML.ЗаписатьАтрибут("ДополнительнаяАналитика", Строка(СтрТЧ.ДополнительнаяАналитика));
			ЗаписьXML.ЗаписатьАтрибут("СчетУчетаСтрока", СтрТЧ.ДополнительнаяАналитика.СчетУчетаБУ);
			
			Если ДокументСсылка.флОсСписком Тогда
				ЗаписьXML.ЗаписатьАтрибут("ОбъектСписания", Строка(СтрТЧ.ОбъектСписания.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьАтрибут("ТипОбъектСписания", СтрТЧ.ОбъектСписания.Метаданные().Имя);
			Иначе 
				ЗаписьXML.ЗаписатьАтрибут("ОбъектСписания", Строка(ДокументСсылка.ОбъектСписания.УникальныйИдентификатор()));
				ЗаписьXML.ЗаписатьАтрибут("ТипОбъектСписания", ДокументСсылка.ОбъектСписания.Метаданные().Имя);
			КонецЕсли;           
			        
			ОснованиеВыбытия = ПодготовитьПередставлениеОснованияВыбытия(ДокументСсылка, СтрТЧ);
			ЗаписьXML.ЗаписатьАтрибут("ТипОснованиеДляВыбытия", ОснованиеВыбытия.Тип);
			ЗаписьXML.ЗаписатьАтрибут("ОснованиеДляВыбытия", ОснованиеВыбытия.Значение);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
			
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	КонецЦикла;
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

Функция ПодготовитьПередставлениеОснованияВыбытия(ДокументСсылка, СтрТЧ)
	
	ЗначениеВозврата = новый Структура("Тип, Значение", "", "");
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрТЧ.ОснованиеДляВыбытия)) 
			И ЗначениеЗаполнено(СтрТЧ.ОснованиеДляВыбытия) Тогда
		ЗначениеВозврата.Тип = "" + СтрТЧ.ОснованиеДляВыбытия.Метаданные().ПолноеИмя();
		ЗначениеВозврата.Значение = "" + Строка(СтрТЧ.ОснованиеДляВыбытия.УникальныйИдентификатор()); 
	КонецЕсли;
	Если ТипЗнч(СтрТЧ.ОснованиеДляВыбытия) = Тип("Строка") Тогда
		ЗначениеВозврата.Тип = "Строка";
		ЗначениеВозврата.Значение = "" + СтрТЧ.ОснованиеДляВыбытия;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;	
	
КонецФункции

Функция ПолучитьТекстЗапроса_СписаниеТМЦ(ВходящиеПараметры)
	
	Текст = "ВЫБРАТЬ
        |	Документ.Ссылка КАК Ссылка
        |ИЗ
        |	Документ.ЦПЗ_СписаниеТМЦ КАК Документ
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоСсылке
        |				ТОГДА Документ.Ссылка В (&ДокументСсылка)
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ
        |	И ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ
        |	И Документ.Проведен = ИСТИНА";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_СписаниеТМЦ(ДанныеДляОбработки) Экспорт 
	
	ДокументСсылка = Документы.ЦПЗ_СписаниеТМЦ.ПолучитьСсылку(ДанныеДляОбработки.ДокументГУИД);
	Документы.ЦПЗ_СписаниеТМЦ.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РеализацияТоваровУслуг_СписаниеТМЦ

///////////////////////////////////////////
//Обмен Списание ТМЦ - Реализация товаров и услуг

#Область РеализацияТоваровУслуг_Список

Функция ПодготовитьДанныеДляОтправки_РеализацияТоваровУслуг_Список(ВходящиеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоПериоду", Ложь);
	Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ДатаНачала")
			И ВходящиеПараметры.Свойство("ДатаОкончания")
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала)
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		//
		Запрос.УстановитьПараметр("ОтборПоПериоду", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания);
		
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Запрос.УстановитьПараметр("ИНН", ВходящиеПараметры.Организация.ИНН);
			Запрос.УстановитьПараметр("КПП", ВходящиеПараметры.Организация.КПП);
		КонецЕсли;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = ПолучитьТекстЗапроса_РеализацияТоваровУслуг_Список();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(Стр.ДокументТМЦ_Ссылка) Тогда
			Стр.ДокументТМЦ_ГУИД = Стр.ДокументТМЦ_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладГлавный_Ссылка) Тогда
			Стр.СкладГлавныйГУИД = Стр.СкладГлавный_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_РеализацияТоваровУслуг_Список()
	
	Текст = "ВЫБРАТЬ
        |	Документ.Представление КАК ДокументТМЦ_Предстваление,
        |	Документ.Проведен КАК ДокументТМЦПроведен,
        |	Документ.Дата КАК ДатаДокумента,
        |	Документ.Ссылка КАК ДокументТМЦ_Ссылка,
        |	Документ.Контрагент.Наименование КАК Контрагент,
        |	Документ.Контрагент.ИНН КАК КонтрагентИНН,
        |	Документ.Контрагент.КПП КАК КонтрагентКПП,
        |	Документ.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагента,
        |	Документ.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
        |	Документ.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДата,
        |	&ПустойГУИД КАК ДокументТМЦ_ГУИД,
        |	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
        |	Документ.ДокументУчетаВЭксплуатацииГУИД КАК ДокументУчетаВЭксплуатацииГУИД,
        |	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
        |	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
        |	ВЫРАЗИТЬ(Документ.СкладГлавный.Наименование КАК СТРОКА(100)) КАК СкладГлавный,
        |	Документ.СкладГлавный КАК СкладГлавный_Ссылка,
        |	&ПустойГУИД КАК СкладГлавныйГУИД,
        |	ВЫРАЗИТЬ(Документ.ОбъектСписания.Наименование КАК СТРОКА(100)) КАК ОбъектСписания,
        |	ВЫРАЗИТЬ(Документ.Мастер.Наименование КАК СТРОКА(100)) КАК Мастер,
        |	ВЫРАЗИТЬ(Документ.Комментарий КАК СТРОКА(100)) КАК Комментарий,
        |	Документ.флОсСписком КАК флОсСписком
        |ИЗ
        |	Документ.ЦПЗ_СписаниеТМЦ КАК Документ
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ 
		|	И Документ.ВидОперации = Значение(Перечисление.ЦПЗ_ОперацияДокументаДвижения.РеализацияТоваровУслуг)
        |	И Документ.Проведен = ИСТИНА
        |	И Документ.Организация.ИНН = &ИНН
        |	И Документ.Организация.КПП = &КПП";
	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область РеализацияТоваровУслуг_Объект

Функция ВыполнитьОтправку_РеализацияТоваровУслуг(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_СписаниеТМЦ(ПараметрыДанных);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СписаниеТМЦ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_РеализацияТоваровУслуг(ВходящиеПараметры) Экспорт
    	
	ДанныеДляОтправки = Новый Структура();
	ДанныеДляОтправки.Вставить("ДанныеДляБП", Новый Структура);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				ДокументСсылка = Документы.ЦПЗ_СписаниеТМЦ.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_РеализацияТоваровУслуг(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		
		ДанныеДляОтправки.ДанныеДляБП.Вставить("РеализацииТоваровУслуг_Ордер", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			
			СтруктураДокумент = Новый Структура("РеализацияТоваровУслуг", Новый Структура());
			
			ДополнитьЗаписьАтрибутами_СтандартныеПараметры(СтруктураДокумент, ДокументСсылка, Ложь); 
			СтруктураДокумент.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
			СтруктураДокумент.Вставить("Номер", Строка(ДокументСсылка.Номер));
			СтруктураДокумент.Вставить("Дата", ДокументСсылка.Дата);
			
			СтруктураКонтрагент = новый Структура("Наименование, ГУИД, ИНН, КПП"
													,ДокументСсылка.Контрагент.Наименование
													,ДокументСсылка.Контрагент.УникальныйИдентификатор()
													,ДокументСсылка.Контрагент.ИНН
													,ДокументСсылка.Контрагент.КПП);
			СтруктураДокумент.Вставить("Контрагент", СтруктураКонтрагент);
			
			СтруктураДоговорКонтрагента = новый Структура("Наименование, ГУИД, Номер, Дата"
															,ДокументСсылка.ДоговорКонтрагента.Наименование
															,ДокументСсылка.ДоговорКонтрагента.УникальныйИдентификатор()
															,ДокументСсылка.ДоговорКонтрагента.Номер
															,ДокументСсылка.ДоговорКонтрагента.Дата);
			СтруктураДокумент.Вставить("ДоговорКонтрагента", СтруктураДоговорКонтрагента);
			
			СтруктураДокумент.Вставить("ДокументСкладскогоУчетаГУИД", "" + ДокументСсылка.ДокументСкладскогоУчетаГУИД);
			СтруктураДокумент.Вставить("ДокументУчетаВЭксплуатацииГУИД", "" + ДокументСсылка.ДокументУчетаВЭксплуатацииГУИД);
			
			СтруктураДокумент.Вставить("СкладГлавный", Строка(ДокументСсылка.СкладГлавный.УникальныйИдентификатор()));
			СтруктураДокумент.Вставить("Комментарий", Строка(ДокументСсылка.Комментарий));
			
			СтруктураДокумент.Вставить("РеализацияТоваровУслуг_СписокТМЦ", Новый Массив);
			Для Каждого СтрТЧ Из ДокументСсылка.СписокТМЦ Цикл 
				
				Если ТипЗнч(СтрТч.ТМЦ) <> Тип("СправочникСсылка.Номенклатура") Тогда
					Продолжить;
				КонецЕсли;
				
				ПеремещениеТМЦ_СписокТМЦ_Строка = Новый Структура();
				
				ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("НомерСтроки", Строка(СтрТЧ.НомерСтроки));
				ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("Номенклатура", Строка(СтрТЧ.ТМЦ.УникальныйИдентификатор()));
				ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("Количество", СтрТЧ.Количество);
				
				ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ДополнительнаяАналитика", Строка(СтрТЧ.ДополнительнаяАналитика));
				ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("СчетУчета", СтрТЧ.ДополнительнаяАналитика.СчетУчетаБУ);
				
				СтруктураДокумент.РеализацияТоваровУслуг_СписокТМЦ.Добавить(ПеремещениеТМЦ_СписокТМЦ_Строка);
				
			КонецЦикла;
			
			ДанныеДляОтправки.ДанныеДляБП.РеализацииТоваровУслуг_Ордер.Добавить(СтруктураДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляОтправки;
	
КонецФункции

Функция ПолучитьТекстЗапроса_РеализацияТоваровУслуг(ВходящиеПараметры)
	
	Текст = "ВЫБРАТЬ
        |	Документ.Ссылка КАК Ссылка
        |ИЗ
        |	Документ.ЦПЗ_СписаниеТМЦ КАК Документ
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоСсылке
        |				ТОГДА Документ.Ссылка В (&ДокументСсылка)
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ
        |	И ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ
        |	И Документ.Проведен = ИСТИНА";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_РеализацияТоваровУслуг(ДанныеДляОбработки) Экспорт 
	
	ДокументСсылка = Документы.ЦПЗ_СписаниеТМЦ.ПолучитьСсылку(ДанныеДляОбработки.ДокументГУИД);
	Документы.ЦПЗ_СписаниеТМЦ.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПеремещениеТМЦ

#Область ПеремещениеТМЦ_Список

Функция ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ_Список(ВходящиеПараметры) Экспорт
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("СкладскиеОперации", Документы.РасходныйОрдерНаТовары.СкладскиеОперацииПеремещения());
	Запрос.УстановитьПараметр("ОтборПоПериоду", Ложь);
	Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ДатаНачала")
			И ВходящиеПараметры.Свойство("ДатаОкончания")
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала)
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		//
		Запрос.УстановитьПараметр("ОтборПоПериоду", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания); 
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Запрос.УстановитьПараметр("ИНН", ВходящиеПараметры.Организация.ИНН);
			Запрос.УстановитьПараметр("КПП", ВходящиеПараметры.Организация.КПП);
		КонецЕсли;
				
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = ПолучитьТекстЗапроса_ПеремещениеТМЦ_Список();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	КС = Новый КвалификаторыСтроки(500);
	ТаблицаДанных.Колонки.Добавить("ТипОбъекта", новый ОписаниеТипов("Строка",,,,КС));
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Стр.ТипОбъекта = "" + Стр.ДокументТМЦ_Ссылка.Метаданные().ПолноеИмя();
		
		Если ЗначениеЗаполнено(Стр.ДокументТМЦ_Ссылка) Тогда
			Стр.ДокументТМЦ_ГУИД = Стр.ДокументТМЦ_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладГлавныйОтправитель_Ссылка) Тогда
			Стр.СкладГлавныйОтправительГУИД = Стр.СкладГлавныйОтправитель_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладГлавныйПолучатель_Ссылка) Тогда
			Стр.СкладГлавныйПолучательГУИД = Стр.СкладГлавныйПолучатель_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_ПеремещениеТМЦ_Список()
	
	Текст = "ВЫБРАТЬ
        |	Документ.Представление КАК ДокументТМЦ_Предстваление,
        |	Документ.Проведен КАК ДокументТМЦПроведен,
        |	Документ.Дата КАК ДатаДокумента,
        |	Документ.Ссылка КАК ДокументТМЦ_Ссылка,
        |	&ПустойГУИД КАК ДокументТМЦ_ГУИД,
        |	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
        |	Документ.ДокументУчетаВЭксплуатацииГУИД КАК ДокументУчетаВЭксплуатацииГУИД,
        |	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
        |	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
        |	ВЫРАЗИТЬ(Документ.СкладГлавныйОтправитель.Наименование КАК СТРОКА(100)) КАК СкладГлавныйОтправитель,
        |	ВЫРАЗИТЬ(Документ.СкладГлавныйПолучатель.Наименование КАК СТРОКА(100)) КАК СкладГлавныйПолучатель,
        |	Документ.СкладГлавныйОтправитель КАК СкладГлавныйОтправитель_Ссылка,
        |	Документ.СкладГлавныйПолучатель КАК СкладГлавныйПолучатель_Ссылка,
        |	&ПустойГУИД КАК СкладГлавныйОтправительГУИД,
        |	&ПустойГУИД КАК СкладГлавныйПолучательГУИД,
        |	ВЫРАЗИТЬ(Документ.Комментарий КАК СТРОКА(100)) КАК Комментарий
        |ИЗ
        |	Документ.ЦПЗ_ПеремещениеТМЦ КАК Документ
        |ГДЕ
        |	ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ
        |	И Документ.Проведен = ИСТИНА
		//08/06/2022 - перемещение возможно с "выдачей в руки"
		//|	И Документ.СкладГлавныйОтправитель = Документ.СкладОтправитель
        //|	И Документ.СкладГлавныйПолучатель = Документ.СкладПолучатель
        |	И Документ.СкладГлавныйОтправитель <> Документ.СкладГлавныйПолучатель
        |	И Документ.Организация.ИНН = &ИНН
        |	И Документ.Организация.КПП = &КПП
		|
		| ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
        |	Документ.Представление КАК ДокументТМЦ_Предстваление,
        |	Документ.Проведен КАК ДокументТМЦПроведен,
        |	Документ.Дата КАК ДатаДокумента,
        |	Документ.Ссылка КАК ДокументТМЦ_Ссылка,
        |	&ПустойГУИД КАК ДокументТМЦ_ГУИД,
        |	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
        |	Документ.ДокументУчетаВЭксплуатацииГУИД КАК ДокументУчетаВЭксплуатацииГУИД,
        |	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
        |	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
        |	ВЫРАЗИТЬ(Документ.Склад.Наименование КАК СТРОКА(100)) КАК СкладГлавныйОтправитель,
        |	ВЫРАЗИТЬ(Документ.СкладПолучатель.Наименование КАК СТРОКА(100)) КАК СкладГлавныйПолучатель,
        |	Документ.Склад КАК СкладГлавныйОтправитель_Ссылка,
        |	Документ.СкладПолучатель КАК СкладГлавныйПолучатель_Ссылка,
        |	&ПустойГУИД КАК СкладГлавныйОтправительГУИД,
        |	&ПустойГУИД КАК СкладГлавныйПолучательГУИД,
        |	ВЫРАЗИТЬ(Документ.Комментарий КАК СТРОКА(100)) КАК Комментарий
        |ИЗ
        |	Документ.РасходныйОрдерНаТовары КАК Документ
        |ГДЕ  
		|	Документ.СкладскаяОперация в (&СкладскиеОперации)
        |	И ВЫБОР
        |			КОГДА &ОтборПоПериоду
        |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |			ИНАЧЕ ИСТИНА
        |		КОНЕЦ 
		|	И Документ.Проведен = ИСТИНА
        |	И Документ.Организация.ИНН = &ИНН
        |	И Документ.Организация.КПП = &КПП";	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПеремещениеТМЦ_Объект

Функция ВыполнитьОтправку_ПеремещениеТМЦ(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ(ПараметрыДанных);
						
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ПеремещениеТМЦ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ(ВходящиеПараметры) Экспорт
	
	ДанныеДляОтправки = Новый Структура();
	ДанныеДляОтправки.Вставить("ДанныеДляБП", Новый Структура);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				
				Если ВходящиеПараметры.Свойство("ТипОбъекта") Тогда
					Если ВходящиеПараметры.ТипОбъекта = "Документ.ЦПЗ_ПеремещениеТМЦ" Тогда
						МенеджерДокумента = Документы.ЦПЗ_ПеремещениеТМЦ;	
					КонецЕсли;
					Если ВходящиеПараметры.ТипОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
						МенеджерДокумента = Документы.РасходныйОрдерНаТовары;	
					КонецЕсли;					
				Иначе
					МенеджерДокумента = Документы.ЦПЗ_ПеремещениеТМЦ;
				КонецЕсли;
				
				ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_ПеремещениеТМЦ(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		
		ДанныеДляОтправки.ДанныеДляБП.Вставить("ПеремещенияТМЦ", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ПеремещениеТМЦ = Новый Структура("ПеремещениеТМЦ", Новый Структура());
			
			Если ВходящиеПараметры.ТипОбъекта = "Документ.ЦПЗ_ПеремещениеТМЦ" Тогда
				ЗаполнитьЭлементДанныхДляОтправки_ПеремещениеТМЦ(ПеремещениеТМЦ, ДокументСсылка);	
			КонецЕсли;
			Если ВходящиеПараметры.ТипОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
				ЗаполнитьЭлементДанныхДляОтправки_РасходныйОрдерНаТовары(ПеремещениеТМЦ, ДокументСсылка);	
			КонецЕсли;	
			
			ДанныеДляОтправки.ДанныеДляБП.ПеремещенияТМЦ.Добавить(ПеремещениеТМЦ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляОтправки;
	
КонецФункции

Процедура ЗаполнитьЭлементДанныхДляОтправки_ПеремещениеТМЦ(ПеремещениеТМЦ, ДокументСсылка);	
	
	ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ПеремещениеТМЦ, ДокументСсылка, Ложь); 
	ПеремещениеТМЦ.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("Номер", Строка(ДокументСсылка.Номер));
	ПеремещениеТМЦ.Вставить("Дата", ДокументСсылка.Дата);
	
	ПеремещениеТМЦ.Вставить("ДокументСкладскогоУчетаГУИД", "" + ДокументСсылка.ДокументСкладскогоУчетаГУИД);
	ПеремещениеТМЦ.Вставить("ДокументУчетаВЭксплуатацииГУИД", "" + ДокументСсылка.ДокументУчетаВЭксплуатацииГУИД);
	
	ПеремещениеТМЦ.Вставить("СкладГлавныйОтправитель", Строка(ДокументСсылка.СкладГлавныйОтправитель.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("СкладГлавныйПолучатель", Строка(ДокументСсылка.СкладГлавныйПолучатель.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("Комментарий", Строка(ДокументСсылка.Комментарий));
	
	ПеремещениеТМЦ.Вставить("ПеремещениеТМЦ_СписокТМЦ", Новый Массив);
	Для Каждого СтрТЧ Из ДокументСсылка.СписокТМЦ Цикл 
		
		Если ТипЗнч(СтрТч.ТМЦ) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		ПеремещениеТМЦ_СписокТМЦ_Строка = Новый Структура();
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("НомерСтроки", Строка(СтрТЧ.НомерСтроки));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ТМЦ", Строка(СтрТЧ.ТМЦ.УникальныйИдентификатор()));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("Количество", СтрТЧ.Количество);
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ДополнительнаяАналитикаОтправитель", Строка(СтрТЧ.ДополнительнаяАналитикаОтправитель));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ОтправительСчетУчетаСтрока", СтрТЧ.ДополнительнаяАналитикаОтправитель.СчетУчетаБУ);
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ДополнительнаяАналитикаПолучатель", Строка(СтрТЧ.ДополнительнаяАналитикаПолучатель));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ПолучательСчетУчетаСтрока", СтрТЧ.ДополнительнаяАналитикаПолучатель.СчетУчетаБУ);
		
		ПеремещениеТМЦ.ПеремещениеТМЦ_СписокТМЦ.Добавить(ПеремещениеТМЦ_СписокТМЦ_Строка);
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьЭлементДанныхДляОтправки_РасходныйОрдерНаТовары(ПеремещениеТМЦ, ДокументСсылка)	
	
	ДополнительнаяАналитикаПоУмолчанию = Справочники.ЦПЗ_ДополнительнаяАналитикаУчетаДвиженияТоваров.ТоварыНаСкладах();
	
	ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ПеремещениеТМЦ, ДокументСсылка, Ложь); 
	ПеремещениеТМЦ.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("Номер", Строка(ДокументСсылка.Номер));
	ПеремещениеТМЦ.Вставить("Дата", ДокументСсылка.Дата);
	
	ПеремещениеТМЦ.Вставить("ДокументСкладскогоУчетаГУИД", "" + ДокументСсылка.ДокументСкладскогоУчетаГУИД);
	ПеремещениеТМЦ.Вставить("ДокументУчетаВЭксплуатацииГУИД", "" + ДокументСсылка.ДокументУчетаВЭксплуатацииГУИД);
	
	ПеремещениеТМЦ.Вставить("СкладГлавныйОтправитель", Строка(ДокументСсылка.Склад.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("СкладГлавныйПолучатель", Строка(ДокументСсылка.СкладПолучатель.УникальныйИдентификатор()));
	ПеремещениеТМЦ.Вставить("Комментарий", Строка(ДокументСсылка.Комментарий));
	
	ПеремещениеТМЦ.Вставить("ПеремещениеТМЦ_СписокТМЦ", Новый Массив);
	Для Каждого СтрТЧ Из ДокументСсылка.ОтгружаемыеТовары Цикл 
		
		Если ТипЗнч(СтрТч.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
				
		Если ТипЗнч(СтрТч.КоличествоФакт) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПеремещениеТМЦ_СписокТМЦ_Строка = Новый Структура();
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("НомерСтроки", Строка(СтрТЧ.НомерСтроки));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ТМЦ", Строка(СтрТЧ.Номенклатура.УникальныйИдентификатор()));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("Количество", СтрТЧ.КоличествоФакт);
		
		Если ЗначениеЗаполнено(СтрТч.ДополнительнаяАналитика) Тогда
			ДополнительнаяАналитикаОтправитель = СтрТч.ДополнительнаяАналитика; 
			ДополнительнаяАналитикаПолучатель = СтрТч.ДополнительнаяАналитика;
		Иначе 
			ДополнительнаяАналитикаОтправитель = ДополнительнаяАналитикаПоУмолчанию;
			ДополнительнаяАналитикаПолучатель = ДополнительнаяАналитикаПоУмолчанию;
		КонецЕсли;
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ДополнительнаяАналитикаОтправитель", Строка(ДополнительнаяАналитикаОтправитель));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ОтправительСчетУчетаСтрока", ДополнительнаяАналитикаОтправитель.СчетУчетаБУ);
		
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ДополнительнаяАналитикаПолучатель", Строка(ДополнительнаяАналитикаПолучатель));
		ПеремещениеТМЦ_СписокТМЦ_Строка.Вставить("ПолучательСчетУчетаСтрока", ДополнительнаяАналитикаПолучатель.СчетУчетаБУ);
		
		ПеремещениеТМЦ.ПеремещениеТМЦ_СписокТМЦ.Добавить(ПеремещениеТМЦ_СписокТМЦ_Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапроса_ПеремещениеТМЦ(ВходящиеПараметры)
	
	Текст = "ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЦПЗ_ПеремещениеТМЦ КАК Документ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСсылке
		|				ТОГДА Документ.Ссылка В (&ДокументСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПериоду
		|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Документ.Проведен = ИСТИНА ОБЪЕДИНИТЬ
		| ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК Документ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСсылке
		|				ТОГДА Документ.Ссылка В (&ДокументСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПериоду
		|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Документ.Проведен = ИСТИНА";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_ПеремещениеТМЦ(ДанныеДляОбработки) Экспорт 
	
	Если ДанныеДляОбработки.Свойство("ТипОбъекта") Тогда
		Если ДанныеДляОбработки.ТипОбъекта = "Документ.ЦПЗ_ПеремещениеТМЦ" Тогда
			МенеджерДокумента = Документы.ЦПЗ_ПеремещениеТМЦ; 		
		КонецЕсли;
		Если ДанныеДляОбработки.ТипОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
			МенеджерДокумента = Документы.РасходныйОрдерНаТовары; 		
		КонецЕсли;
	Иначе
		МенеджерДокумента = Документы.ЦПЗ_ПеремещениеТМЦ; 		
	КонецЕсли;
	
	ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(ДанныеДляОбработки.ДокументГУИД);
	МенеджерДокумента.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РасходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары_Список

Функция ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ_Список(ВходящиеПараметры) Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_РасходныйОрдерНаТовары_УТ_Список()
	
	Текст = "";	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область РасходныйОрдерНаТовары_Объект

Функция ВыполнитьОтправку_РасходныйОрдерНаТовары_УТ(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ(ПараметрыДанных);
						
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "РасходныйОрдерНаТовары_УТ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ(ВходящиеПараметры) Экспорт
	
	ДанныеДляОтправки = Новый Структура();
	ДанныеДляОтправки.Вставить("ДанныеДляБП", Новый Структура);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				ДокументСсылка = Документы.ЦПЗ_ПеремещениеТМЦ.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_РасходныйОрдерНаТовары_УТ(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		
		ДанныеДляОтправки.ДанныеДляБП.Вставить("РасходныеОрдераНаТовары_УТ", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			
			РасходныйОрдерНаТовары_УТ = Новый Структура("РасходныйОрдерНаТовары_УТ", Новый Структура());
			
			ДополнитьЗаписьАтрибутами_СтандартныеПараметры(РасходныйОрдерНаТовары_УТ, ДокументСсылка, Ложь); 
			РасходныйОрдерНаТовары_УТ.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
			РасходныйОрдерНаТовары_УТ.Вставить("Номер", Строка(ДокументСсылка.Номер));
			РасходныйОрдерНаТовары_УТ.Вставить("Дата", ДокументСсылка.Дата);
			
			ДанныеДляОтправки.ДанныеДляБП.РасходныеОрдераНаТовары_УТ.Добавить(РасходныйОрдерНаТовары_УТ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляОтправки;
	
КонецФункции

Функция ПолучитьТекстЗапроса_РасходныйОрдерНаТовары_УТ(ВходящиеПараметры)
	
	Текст = "Выбрать Истина Где Ложь";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_РасходныйОрдерНаТовары_УТ(ДанныеДляОбработки) Экспорт 
	
	ДокументСсылка = Документы.РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор("" + ДанныеДляОбработки.ДокументГУИД));
	Документы.РасходныйОрдерНаТовары.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомплектацияНоменклатуры

#Область КомплектацияНоменклатуры_Список

Функция ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_Список(ВходящиеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоПериоду", Ложь);
	Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ДатаНачала")
			И ВходящиеПараметры.Свойство("ДатаОкончания")
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала)
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		//
		Запрос.УстановитьПараметр("ОтборПоПериоду", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания); 
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Запрос.УстановитьПараметр("ИНН", ВходящиеПараметры.Организация.ИНН);
			Запрос.УстановитьПараметр("КПП", ВходящиеПараметры.Организация.КПП);
		КонецЕсли;
				
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = ПолучитьТекстЗапроса_КомплектацияНоменклатуры_Список();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(Стр.ДокументТМЦ_Ссылка) Тогда
			Стр.ДокументТМЦ_ГУИД = Стр.ДокументТМЦ_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СкладГлавный_Ссылка) Тогда
			Стр.СкладГлавныйГУИД = Стр.СкладГлавный_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_КомплектацияНоменклатуры_Список()
	             
	Текст = "ВЫБРАТЬ
	    |	Документ.Представление КАК ДокументТМЦ_Предстваление,
	    |	Документ.Проведен КАК ДокументТМЦПроведен,
	    |	Документ.Дата КАК ДатаДокумента,
	    |	Документ.Ссылка КАК ДокументТМЦ_Ссылка,
	    |	&ПустойГУИД КАК ДокументТМЦ_ГУИД,  
		|	ВЫБОР КОГДА Документ.ВидОперации = Истина ТОГДА ""Разукомплектация"" ИНАЧЕ ""Комплектация"" КОНЕЦ как ВидОперации,
	    |	ВЫРАЗИТЬ(Документ.Номенклатура.Наименование КАК СТРОКА(100)) КАК Номенклатура,  
	    |	ВЫРАЗИТЬ(Документ.ОписаниеНоменклатуры КАК СТРОКА(100)) КАК ОписаниеНоменклатуры, 
		|	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
	    |	Документ.ДокументУчетаВЭксплуатацииГУИД КАК ДокументУчетаВЭксплуатацииГУИД,
	    |	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
	    |	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
	    |	ВЫРАЗИТЬ(Документ.СкладГлавный.Наименование КАК СТРОКА(100)) КАК СкладГлавный,
	    |	Документ.СкладГлавный КАК СкладГлавный_Ссылка,
	    |	&ПустойГУИД КАК СкладГлавныйГУИД,
	    |	ВЫРАЗИТЬ(Документ.Комментарий КАК СТРОКА(100)) КАК Комментарий
	    |ИЗ
	    |	Документ.ЦПЗ_КомплектацияНоменклатуры КАК Документ
	    |ГДЕ
	    |	ВЫБОР
	    |			КОГДА &ОтборПоПериоду
	    |				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	    |			ИНАЧЕ ИСТИНА
	    |		КОНЕЦ
	    |	И Документ.Проведен = ИСТИНА
	    |	И Документ.СкладГлавный = Документ.Склад
	    |	И Документ.Организация.ИНН = &ИНН
	    |	И Документ.Организация.КПП = &КПП";	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область КомплектацияНоменклатуры_Объект

Функция ВыполнитьОтправку_КомплектацияНоменклатуры(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры(ПараметрыДанных);
						
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_КомплектацияНоменклатуры");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры(ВходящиеПараметры) Экспорт
	
	ДанныеДляОтправки = Новый Структура();
	ДанныеДляОтправки.Вставить("ДанныеДляБП", Новый Структура);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				ДокументСсылка = Документы.ЦПЗ_КомплектацияНоменклатуры.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_КомплектацияНоменклатуры(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		
		ДанныеДляОтправки.ДанныеДляБП.Вставить("КомплектацииНоменклатуры", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			
			ДокументСтруктура = Новый Структура("КомплектацияНоменклатуры", Новый Структура());
			
			ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ДокументСтруктура, ДокументСсылка, Ложь); 
			ДокументСтруктура.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
			ДокументСтруктура.Вставить("Номер", Строка(ДокументСсылка.Номер));
			ДокументСтруктура.Вставить("Дата", ДокументСсылка.Дата);
			
			ДокументСтруктура.Вставить("ДокументСкладскогоУчетаГУИД", "" + ДокументСсылка.ДокументСкладскогоУчетаГУИД);
			ДокументСтруктура.Вставить("ДокументУчетаВЭксплуатацииГУИД", "" + ДокументСсылка.ДокументУчетаВЭксплуатацииГУИД);
			
			ДокументСтруктура.Вставить("ВидОперации", ?(ДокументСсылка.ВидОперации, "Разукомплектация", "Комплектация"));
			
			ДопАналитика = Новый Структура("Наименование, Счет"
												,ДокументСсылка.ДополнительнаяАналитика.Наименование
												,ДокументСсылка.ДополнительнаяАналитика.СчетУчетаБУ); 
			ДокументСтруктура.Вставить("ДопАналитика", ДопАналитика);
			
			ДокументСтруктура.Вставить("СкладГлавный", Строка(ДокументСсылка.СкладГлавный.УникальныйИдентификатор()));
			
			ДокументСтруктура.Вставить("Номенклатура", Строка(ДокументСсылка.Номенклатура.УникальныйИдентификатор())); 
			ДокументСтруктура.Вставить("ОписаниеНоменклатуры", ДокументСсылка.ОписаниеНоменклатуры);
			
			ДокументСтруктура.Вставить("Количество", ДокументСсылка.Количество);
			
			ПредставлениеКомментария = ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_ПредставлениеКомментарий(ДокументСсылка);
			
			ДокументСтруктура.Вставить("Комментарий", Строка(ПредставлениеКомментария));
			                                  
			ДокументСтруктура.Вставить("Комплектующие", Новый Массив);
			Для Каждого СтрТЧ Из ДокументСсылка.Комплектующие Цикл 
				
				Если ТипЗнч(СтрТч.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
					Продолжить;
				КонецЕсли;
				
				Комплектующие_Строка = Новый Структура();
				
				Комплектующие_Строка.Вставить("НомерСтроки", Строка(СтрТЧ.НомерСтроки));
				Комплектующие_Строка.Вставить("Номенклатура", Строка(СтрТЧ.Номенклатура.УникальныйИдентификатор())); 
				Комплектующие_Строка.Вставить("ОписаниеНоменклатуры", СтрТЧ.ОписаниеНоменклатуры); 
				Комплектующие_Строка.Вставить("Количество", СтрТЧ.Количество);
				
				ДопАналитика = Новый Структура("Наименование, Счет"
												,СтрТЧ.ДополнительнаяАналитика.Наименование
												,СтрТЧ.ДополнительнаяАналитика.СчетУчетаБУ); 
				Комплектующие_Строка.Вставить("ДопАналитика", ДопАналитика);
				
				ДокументСтруктура.Комплектующие.Добавить(Комплектующие_Строка);
				
			КонецЦикла;
			
			ДанныеДляОтправки.ДанныеДляБП.КомплектацииНоменклатуры.Добавить(ДокументСтруктура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляОтправки;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_ПредставлениеКомментарий(ДокументСсылка)

	ЗначениеВозврата = ДокументСсылка.Комментарий;
	
	ПредставлениеОперации = "" + ?(ДокументСсылка.ВидОперации, "Разукомплектация", "Комплектация");
	
	ОписаниеКомплекта = "Комплект: " + ?(ЗначениеЗаполнено(ДокументСсылка.ОписаниеНоменклатуры), ДокументСсылка.ОписаниеНоменклатуры, ДокументСсылка.Номенклатура) 
									+ " кол. " + ДокументСсылка.Количество
									+ " " + ДокументСсылка.ДополнительнаяАналитика.Наименование 
									+ " (" + ДокументСсылка.ДополнительнаяАналитика.СчетУчетаБУ + ")";
	//
	ОписаниеКомплектующих = "Комплектующие.";
	Для Каждого СтрТч Из ДокументСсылка.Комплектующие Цикл
		
		ПредставлениеСтроки = "" + СтрТч.НомерСтроки + ". " 
									+ ?(ЗначениеЗаполнено(ДокументСсылка.ОписаниеНоменклатуры), ДокументСсылка.ОписаниеНоменклатуры, ДокументСсылка.Номенклатура) 
									+ " кол. " + ДокументСсылка.Количество
									+ " " + ДокументСсылка.ДополнительнаяАналитика.Наименование 
									+ " (" + ДокументСсылка.ДополнительнаяАналитика.СчетУчетаБУ + ")";
		//
		ОписаниеКомплектующих = ОписаниеКомплектующих
									+ Символы.ПС
									+ ПредставлениеСтроки; 
	КонецЦикла;
	
	ЗначениеВозврата = "" + ?(ЗначениеВозврата <> "", ЗначениеВозврата + Символы.ПС, "") 
							+ ПредставлениеОперации + Символы.ПС
							+ ОписаниеКомплекта + Символы.ПС
							+ ОписаниеКомплектующих;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьТекстЗапроса_КомплектацияНоменклатуры(ВходящиеПараметры)
	
	Текст = "ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЦПЗ_КомплектацияНоменклатуры КАК Документ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСсылке
		|				ТОГДА Документ.Ссылка В (&ДокументСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПериоду
		|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Документ.Проведен = ИСТИНА";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_КомплектацияНоменклатуры(ДанныеДляОбработки) Экспорт 
	
	ДокументСсылка = Документы.ЦПЗ_КомплектацияНоменклатуры.ПолучитьСсылку(ДанныеДляОбработки.ДокументГУИД);
	Документы.ЦПЗ_КомплектацияНоменклатуры.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область АктПриемаПередачиТоваровНаОтветственноеХранение

#Область АктПриемаПередачиТоваровНаОтветственноеХранениеСписок

Функция ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(ВходящиеПараметры) Экспорт
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПриемНаОтветственноеХранение);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", НайтиПеречисление("ХозяйственныеОперации", ВходящиеПараметры.ХозяйственнаяОперация));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтборПоПериоду", Ложь);
	Запрос.УстановитьПараметр("ДатаНачала", Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", Неопределено);
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура")
			И ВходящиеПараметры.Свойство("ДатаНачала")
			И ВходящиеПараметры.Свойство("ДатаОкончания")
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаНачала)
			И ЗначениеЗаполнено(ВходящиеПараметры.ДатаОкончания) Тогда
		//
		Запрос.УстановитьПараметр("ОтборПоПериоду", Истина);
		Запрос.УстановитьПараметр("ДатаНачала", ВходящиеПараметры.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ВходящиеПараметры.ДатаОкончания); 
		Если ВходящиеПараметры.Свойство("Организация") Тогда
			Запрос.УстановитьПараметр("ИНН", ВходящиеПараметры.Организация.ИНН);
			Запрос.УстановитьПараметр("КПП", ВходящиеПараметры.Организация.КПП);
		КонецЕсли;
				
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойГУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = ПолучитьТекстЗапроса_АктПриемаПередачиТоваровНаОтветственноеХранениеСписок_Список();
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	КС = Новый КвалификаторыСтроки(500);
	ТаблицаДанных.Колонки.Добавить("ТипОбъекта", новый ОписаниеТипов("Строка",,,,КС));
	
	//Дообработка таблицы
	Для каждого Стр Из ТаблицаДанных Цикл
		
		Стр.ТипОбъекта = "" + Стр.ДокументТМЦ_Ссылка.Метаданные().ПолноеИмя();
		
		Если ЗначениеЗаполнено(Стр.ДокументТМЦ_Ссылка) Тогда
			Стр.ДокументТМЦ_ГУИД = Стр.ДокументТМЦ_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Склад_Ссылка) Тогда
			Стр.СкладГУИД = Стр.Склад_Ссылка.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТекстЗапроса_АктПриемаПередачиТоваровНаОтветственноеХранениеСписок_Список()
	
	Текст = "ВЫБРАТЬ
	|	Документ.Представление КАК ДокументТМЦ_Представление,
	|	Документ.Проведен КАК ДокументТМЦПроведен,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Ссылка КАК ДокументТМЦ_Ссылка,
	|	&ПустойГУИД КАК ДокументТМЦ_ГУИД,
	|	Документ.ДокументСкладскогоУчетаГУИД КАК ДокументСкладскогоУчетаГУИД,
	|	ВЫРАЗИТЬ(Документ.Организация.Наименование КАК СТРОКА(100)) КАК Организация,
	|	ВЫРАЗИТЬ(Документ.Ответственный.Наименование КАК СТРОКА(100)) КАК Ответственный,
	|	ВЫРАЗИТЬ(Документ.Склад.Наименование КАК СТРОКА(100)) КАК Склад,
	|	Документ.Склад КАК Склад_Ссылка,
	|	&ПустойГУИД КАК СкладГУИД,
	|	ВЫРАЗИТЬ(Документ.Контрагент.Наименование КАК СТРОКА(100)) КАК Контрагент,
	|	ВЫРАЗИТЬ(Документ.Договор.Наименование КАК СТРОКА(100)) КАК Договор
	| ИЗ
	|	Документ.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение КАК Документ
	| ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоПериоду
	|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И Документ.Проведен = ИСТИНА
	|	И Документ.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Документ.Организация.ИНН = &ИНН
    |	И Документ.Организация.КПП = &КПП";	
	//
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект

Функция ВыполнитьОтправку_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ДокументСсылка, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ПараметрыДанных = Новый Структура("ДокументСсылка", ДокументСсылка);
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ПараметрыДанных);
						
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ВходящиеПараметры) Экспорт
	
	ДанныеДляОтправки = Новый Структура();
	ДанныеДляОтправки.Вставить("ДанныеДляБП", Новый Структура);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		
		Если ВходящиеПараметры.Свойство("ДокументГУИД") Тогда
			Если ТипЗнч(ВходящиеПараметры.ДокументГУИД) = Тип("УникальныйИдентификатор") Тогда
				
				Если ВходящиеПараметры.Свойство("ТипОбъекта") Тогда
					Если ВходящиеПараметры.ТипОбъекта = "Документ.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение" Тогда
						МенеджерДокумента = Документы.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение;	
					КонецЕсли;
				Иначе
					МенеджерДокумента = Документы.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение;
				КонецЕсли;
				
				ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(ВходящиеПараметры.ДокументГУИД);
				Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
					ВходящиеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
				Иначе
					ВызватьИсключение "Неудалось получить объект по уникальному идентификатору: " + ВходящиеПараметры.ДокументГУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоСсылке", ВходящиеПараметры.Свойство("ДокументСсылка"));
		Запрос.УстановитьПараметр("ДокументСсылка", Неопределено);
		Если ВходящиеПараметры.Свойство("ДокументСсылка") Тогда
			ВходящиеПараметры.Свойство("ДокументСсылка", Запрос.Параметры.ДокументСсылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоПериоду", ВходящиеПараметры.Свойство("Период"));
		Запрос.УстановитьПараметр("ДатаНачала", Дата("00010101"));
		Запрос.УстановитьПараметр("ДатаОкончания", Дата("00010101"));
		Если ВходящиеПараметры.Свойство("Период") Тогда
			ВходящиеПараметры.Свойство("ДатаНачала", Запрос.Параметры.Период.ДатаНачала);
			ВходящиеПараметры.Свойство("ДатаОкончания", Запрос.Параметры.Период.ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ВходящиеПараметры);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
		
		ДанныеДляОтправки.ДанныеДляБП.Вставить("АктыПриемаПередачиТоваровНаОтветственноеХранение", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЭлементПакета = Новый Структура("АктПриемаПередачиТоваровНаОтветственноеХранение", Новый Структура());
			
			Если ВходящиеПараметры.ТипОбъекта = "Документ.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение" Тогда
				ЗаполнитьЭлементДанныхДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ЭлементПакета, ДокументСсылка);	
			КонецЕсли;
			
			ДанныеДляОтправки.ДанныеДляБП.АктыПриемаПередачиТоваровНаОтветственноеХранение.Добавить(ЭлементПакета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляОтправки;
	
КонецФункции

Процедура ЗаполнитьЭлементДанныхДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ЭлементПакета, ДокументСсылка);	
	
	ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ЭлементПакета, ДокументСсылка, Ложь); 
	ЭлементПакета.Вставить("ДокументГУИД", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ЭлементПакета.Вставить("Номер", Строка(ДокументСсылка.Номер));
	ЭлементПакета.Вставить("Дата", ДокументСсылка.Дата);
	
	ЭлементПакета.Вставить("ХозяйственнаяОперация", ИмяПеречисления(ДокументСсылка.ХозяйственнаяОперация));
	
	ЭлементПакета.Вставить("НомерВходящегоДокумента", "ответ-хранение");
	ЭлементПакета.Вставить("ДатаВходящегоДокумента", ДокументСсылка.Дата);
	
	ЭлементПакета.Вставить("ДокументСкладскогоУчетаГУИД", "" + ДокументСсылка.ДокументСкладскогоУчетаГУИД);
	
	ЭлементПакета.Вставить("ДатаВыполнения", ДокументСсылка.ДатаВыполнения);
	ЭлементПакета.Вставить("СкладГУИД", Строка(ДокументСсылка.Склад.УникальныйИдентификатор()));
	ЭлементПакета.Вставить("Комментарий", Строка(ДокументСсылка.Комментарий));
	
	Контрагент = новый Структура();
	Контрагент.Вставить("ГУИД", ДокументСсылка.Контрагент.УникальныйИдентификатор());
	Контрагент.Вставить("ИНН", ДокументСсылка.Контрагент.ИНН);
	Контрагент.Вставить("КПП", ДокументСсылка.Контрагент.КПП); 
	ЭлементПакета.Вставить("Контрагент", Контрагент);
	
	ДоговорКонтрагента = Новый Структура();
	ДоговорКонтрагента.Вставить("Номер", ДокументСсылка.Договор.Номер);
    ДоговорКонтрагента.Вставить("Дата", ДокументСсылка.Договор.Дата);
	ЭлементПакета.Вставить("Договор", ДоговорКонтрагента); 
	
	тчТовары = новый Массив();
	ЭлементПакета.Вставить("Товары", тчТовары);
	Для Каждого СтрТЧ Из ДокументСсылка.Товары Цикл
		
		СтрокаЭлементаПакета = Новый Структура();
		
		СтрокаЭлементаПакета.Вставить("Номенклатура", СтрТЧ.Номенклатура.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("НоменклатураНаименование", СтрТЧ.Номенклатура.Наименование);   
		СтрокаЭлементаПакета.Вставить("Партия", СтрТЧ.ПартияТовара.УникальныйИдентификатор());
		СтрокаЭлементаПакета.Вставить("Количество", СтрТЧ.Количество);
		СтрокаЭлементаПакета.Вставить("Цена", СтрТЧ.Цена);
		СтрокаЭлементаПакета.Вставить("СтавкаНДС", ИмяПеречисления(Перечисления.СтавкиНДС.БезНДС));
		СтрокаЭлементаПакета.Вставить("СуммаНДС", 0);
		СтрокаЭлементаПакета.Вставить("Сумма", СтрТЧ.Сумма);
		СтрокаЭлементаПакета.Вставить("СчетУчета", СтрТч.ДополнительнаяАналитикаУчета.СчетУчетаБУ);
		
		ЭлементПакета.Товары.Добавить(СтрокаЭлементаПакета);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьТекстЗапроса_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ВходящиеПараметры)
	
	Текст = "ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЦПЗ_ПеремещениеТМЦ КАК Документ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСсылке
		|				ТОГДА Документ.Ссылка В (&ДокументСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПериоду
		|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Документ.Проведен = ИСТИНА ОБЪЕДИНИТЬ
		| ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение КАК Документ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСсылке
		|				ТОГДА Документ.Ссылка В (&ДокументСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПериоду
		|				ТОГДА Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Документ.Проведен = ИСТИНА";
	//
	Возврат Текст;
	
КонецФункции

Функция ОбновитьДанные_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ДанныеДляОбработки) Экспорт 
	
	Если ДанныеДляОбработки.Свойство("ТипОбъекта") Тогда
		Если ДанныеДляОбработки.ТипОбъекта = "Документ.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение" Тогда
			МенеджерДокумента = Документы.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение; 		
		КонецЕсли;
	Иначе
		МенеджерДокумента = Документы.ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение; 		
	КонецЕсли;
	
	ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(ДанныеДляОбработки.ДокументГУИД);
	МенеджерДокумента.ОбновитьДанныеСвязанныхДокументов(ДокументСсылка, ДанныеДляОбработки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Контрагент

// Функция - Выполнить отправку контрагент взаиморасчеты
//
// Параметры:
//  ПараметрыЗапроса - Массив(Структура(Контрагент, ДоговорКонтрагента)) - коллекция структур с полями - Контрагент, ДоговорКонтрагента
//  НаименованиеУзла - Строка - Кодовый идентификатор базы-сервиса
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с данными взаиморасчетов по данным БУ
//
Функция ВыполнитьОтправку_Контрагент_Взаиморасчеты(ПараметрыЗапроса, НаименованиеУзла) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	ДанныеДляОтправки = ПодготовитьДанныеДляОтправки_Контрагент_Взаиморасчеты(ПараметрыЗапроса);
	Хранилище = Новый ХранилищеЗначения(ДанныеДляОтправки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "Контрагент.Взаиморасчеты");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Если Результат.Отказ = Ложь Тогда
		Результат.Результат = ОбработатьОтвет_Контрагент_Взаиморасчеты(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляОтправки_Контрагент_Взаиморасчеты(ПараметрыЗапроса)
	       
	ЗначениеВозврата = Новый Структура("ТаблицаДанных, ДатаОстатка", Новый ТаблицаЗначений, КонецДня(ТекущаяДата()));
	
	Если ПараметрыЗапроса.Свойство("ДатаОстатка") Тогда
		ЗначениеВозврата.Вставить("ДатаОстатка", ПараметрыЗапроса.ДатаОстатка);
	КонецЕсли;
	
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("КонтрагентНаименование", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("КонтрагентГУИД", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("КонтрагентИНН", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("КонтрагентКПП", Новый ОписаниеТипов("Строка"));

	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("ДоговорНаименование", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("ДоговорНомер", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("ДоговорГУИД", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("ДоговорКонтрагентИНН", Новый ОписаниеТипов("Строка"));
	ЗначениеВозврата.ТаблицаДанных.Колонки.Добавить("ДоговорКонтрагентКПП", Новый ОписаниеТипов("Строка"));

	Для Каждого Стр Из ПараметрыЗапроса.ТаблицаДанных Цикл
		СтрТЗ = ЗначениеВозврата.ТаблицаДанных.Добавить();
		СтрТЗ.КонтрагентНаименование = "" + Стр.Контрагент;
		СтрТЗ.КонтрагентГУИД = "" + Стр.Контрагент.УникальныйИдентификатор();
		СтрТЗ.КонтрагентИНН = "" + Стр.Контрагент.ИНН;
		СтрТЗ.КонтрагентКПП = "" + Стр.Контрагент.КПП;
		СтрТЗ.ДоговорНаименование = "" + Стр.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента) Тогда
			СтрТЗ.ДоговорГУИД = "" + Стр.ДоговорКонтрагента.УникальныйИдентификатор();
			СтрТЗ.ДоговорНомер = "" + Стр.ДоговорКонтрагента.Номер;
			СтрТЗ.ДоговорКонтрагентИНН = "" + Стр.ДоговорКонтрагента.Контрагент.ИНН;
			СтрТЗ.ДоговорКонтрагентКПП = "" + Стр.ДоговорКонтрагента.Контрагент.КПП;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ОбработатьОтвет_Контрагент_Взаиморасчеты(Результат)
	
	ДанныеОбработки = Результат.Результат.Скопировать();
	ДанныеОбработки.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеОбработки.Колонки.Добавить("ДоговорКонтрагента", новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	ПодготовитьДанныеЗаполнения_КонтрагентВзаиморасчеты(ДанныеОбработки);
	
	УдалитьКолонки = Новый Массив;
	Для каждого Колонка Из ДанныеОбработки.Колонки Цикл
		Если Колонка.Имя = "Контрагент"
				ИЛИ  Колонка.Имя = "ДоговорКонтрагента"
				ИЛИ  Колонка.Имя = "Сумма" Тогда
			Продолжить;		
		Иначе
			УдалитьКолонки.Добавить(Колонка);		
		КонецЕсли;		
	КонецЦикла;
	Для каждого Колонка Из УдалитьКолонки Цикл
		ДанныеОбработки.Колонки.Удалить(Колонка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Т", ДанныеОбработки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Контрагент КАК Контрагент,
	               |	Т.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	Т.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&Т КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Контрагент КАК Контрагент,
	               |	ТаблицаДанных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ТаблицаДанных.Сумма КАК Сумма
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	ТаблицаДанных.ДоговорКонтрагента <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	//
	ДанныеОбработки = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеОбработки;
	
КонецФункции

Процедура ПодготовитьДанныеЗаполнения_КонтрагентВзаиморасчеты(ДанныеОбработки)
	
	Для каждого Стр Из ДанныеОбработки Цикл
		 Стр.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП", Стр.КонтрагентГУИД, Стр.КонтрагентИНН, Стр.КонтрагентКПП));
		 Стр.ДоговорКонтрагента = ПолучитьДоговор(Новый Структура("ДоговорНомер", Стр.ДоговорНомер), Стр.Контрагент)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатураСпецификацииСчетаНаОплату

Функция ПодготовитьДанныеДляОтправки_НоменклатураСпецификацииСчетаНаОплату(ВходящиеПараметры) Экспорт

	ЗначениеВозврата = новый Массив;
	//ЗначениеВозврата.Вставить("Номенклатура", "");
	//ЗначениеВозврата.Вставить("НоменклатураГУИД", новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	//ЗначениеВозврата.Вставить("НомерСпецификации", "");
	//ЗначениеВозврата.Вставить("СчетНаОплатуНомер", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса_НоменклатураСпецификацииСчетаНаОплату();
	Запрос.УстановитьПараметр("ОрганизацияИНН", ВходящиеПараметры.ОрганизацияИНН);	
	Запрос.УстановитьПараметр("ОрганизацияКПП", ВходящиеПараметры.ОрганизацияКПП);
	Запрос.УстановитьПараметр("КонтрагентИНН", ВходящиеПараметры.КонтрагентИНН);
	Запрос.УстановитьПараметр("КонтрагентКПП", ВходящиеПараметры.КонтрагентКПП); 
	Запрос.УстановитьПараметр("НомерДоговора", ВходящиеПараметры.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", ВходящиеПараметры.ДатаДоговора);   
	
	Запрос.УстановитьПараметр("НомерСпецификации", "");  
	Если ВходящиеПараметры.Свойство("НомерСпецификации") Тогда
		Запрос.УстановитьПараметр("НомерСпецификации", ВходящиеПараметры.НомерСпецификации);  
	КонецЕсли;
	Запрос.УстановитьПараметр("НомерСчетаНаОплату", "");
	Если ВходящиеПараметры.Свойство("НомерСчетаНаОплату") Тогда
		Запрос.УстановитьПараметр("НомерСчетаНаОплату", ВходящиеПараметры.НомерСчетаНаОплату);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл  
		
		ЗаписьВозврата = новый Структура;
		ЗаписьВозврата.Вставить("Номенклатура", "" + Выборка.Номенклатура);
		ЗаписьВозврата.Вставить("НоменклатураГУИД", Выборка.Номенклатура.УникальныйИдентификатор());
		ЗаписьВозврата.Вставить("НомерСпецификации", Выборка.НомерСпецификации);
		ЗаписьВозврата.Вставить("СчетНаОплатуНомер", Выборка.СчетНаОплатуНомер); 
		
		ЗначениеВозврата.Добавить(ЗаписьВозврата);
		
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьТекстЗапроса_НоменклатураСпецификацииСчетаНаОплату()
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборОрганизации
	|ИЗ
	|	Справочник.Организации КАК Справочник
	|ГДЕ
	|	Справочник.ПометкаУдаления = ЛОЖЬ
	|	И Справочник.ИНН = &ОрганизацияИНН
	|	И Справочник.КПП = &ОрганизацияКПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Справочник
	|ГДЕ
	|	Справочник.ПометкаУдаления = ЛОЖЬ
	|	И Справочник.ИНН = &КонтрагентИНН
	|	И Справочник.ИНН <> """"
	|	И ВЫБОР
	|		КОГДА ДЛИНАСТРОКИ(Справочник.ИНН) = 12
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ Справочник.КПП = &КонтрагентКПП
	|					И Справочник.КПП <> """" 
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборДоговорыКонтрагентов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Справочник
	|ГДЕ
	|	Справочник.ПометкаУдаления = ЛОЖЬ
	|	И Справочник.Номер = &НомерДоговора
	|	И Справочник.Дата = &ДатаДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Документ.Ссылка КАК СчетНаОплату,
	|	Документ.ДокументОснование КАК ДокументЗаказ
	|ПОМЕСТИТЬ ОтборДокументыЗаказПоСчету
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК Документ
	|ГДЕ
	|	Документ.Проведен = ИСТИНА
	|	И Документ.Номер = &НомерСчетаНаОплату
	|	И Документ.Организация В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборОрганизации КАК Отбор)
	|	И Документ.Контрагент В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборКонтрагенты КАК Отбор)
	|	И Документ.Договор В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборДоговорыКонтрагентов КАК Отбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Ссылка.ЦПЗ_НомерСпецификации КАК НомерСпецификации,
	|	ОтборДокументыЗаказПоСчету.СчетНаОплату.Номер КАК СчетНаОплатуНомер
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборДокументыЗаказПоСчету КАК ОтборДокументыЗаказПоСчету
	|		ПО ЗаказКлиентаТовары.Ссылка = ОтборДокументыЗаказПоСчету.ДокументЗаказ
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Проведен = ИСТИНА
	|	И ЗаказКлиентаТовары.Ссылка.Организация В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборОрганизации КАК Отбор)
	|	И ЗаказКлиентаТовары.Ссылка.Контрагент В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборКонтрагенты КАК Отбор)
	|	И ЗаказКлиентаТовары.Ссылка.Договор В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ОтборДоговорыКонтрагентов КАК Отбор)
	|	И ВЫБОР
	|			КОГДА &НомерСпецификации = """"
	|					И &НомерСчетаНаОплату = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказКлиентаТовары.Ссылка.ЦПЗ_НомерСпецификации = &НомерСпецификации
	|					ИЛИ ЗаказКлиентаТовары.Ссылка В
	|						(ВЫБРАТЬ
	|							Отбор.ДокументЗаказ
	|						ИЗ
	|							ОтборДокументыЗаказПоСчету КАК Отбор)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Ссылка.ЦПЗ_НомерСпецификации,
	|	ОтборДокументыЗаказПоСчету.СчетНаОплату.Номер";
	////
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СредняяЦенаНоменклатуры

// Функция - Получить данные средней цены номенклатуры
//
// Параметры:
//  ДанныеОбработки	 - Структура -  Организация(ГУИД, Наименование, ИНН, КПП, Префикс), Подразделение(ГУИД, Наименование), Склад(ГУИД), Номенклатура, Период")
//  НаименованиеУзла - Строка - Префик узла обмена
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица: Номенклатура|Сумма|Количество|Цена
//
Функция ПолучитьДанныеСреднейЦеныНоменклатуры(НаименованиеУзла, ДанныеОбработки) Экспорт
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	Хранилище = Новый ХранилищеЗначения(ДанныеОбработки);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
	  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_СредняяЦенаНоменклатуры");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Если Результат.Отказ = Ложь Тогда
		ОбработатьОтвет_ДанныеСреднейЦеныНоменклатуры(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОтвет_ДанныеСреднейЦеныНоменклатуры(Результат)
	
	Результат.Результат = Результат.Результат.Получить();
	
	Если ТипЗнч(Результат.Результат) = Тип("ТаблицаЗначений") Тогда
		
		ТЗ = Результат.Результат;
		
		Если ТЗ.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			ТЗ.Колонки.Удалить("Номенклатура");			
		КонецЕсли;  
		ТЗ.Колонки.Добавить("Номенклатура",  новый ОписаниеТипов("СправочникСсылка.Номенклатура"));		
		
		Если ТЗ.Колонки.Найти("Валюта") <> Неопределено Тогда
			ТЗ.Колонки.Удалить("Валюта");			
		КонецЕсли;  
		ТЗ.Колонки.Добавить("Валюта",  новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		Для каждого СтрТз Из ТЗ Цикл 
			СтрТз.Номенклатура = НайтиНоменклатуруПоГУИД(СтрТз.НоменклатураГУИД);
			СтрТз.Валюта = ПолучитьВалюту(Новый Структура("Валюта", Новый Структура("Код", СтрТз.ВалютаКод)));
		КонецЦикла;
		
		ТЗ.Колонки.Удалить("НоменклатураГУИД");
		ТЗ.Колонки.Удалить("ВалютаКод");
		
	Иначе
		Результат.Отказ = Истина;
		Результат.ОписаниеОшибки = "Сервис данных сердней цены номенклатуры вернул несовместимый тип данных."
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбменДаннымиНСИ

Функция ИнициализироватьПакетДанныхНСИ() Экспорт

	ЗначениеВозврата = Новый Структура;
	ЗначениеВозврата.Вставить("Объекты", новый Массив);
	ЗначениеВозврата.Вставить("ВыгруженныеОбъекты", новый Массив);
	ЗначениеВозврата.Вставить("ЗагруженныеОбъекты", новый Массив);
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ПодготовитьПакетДанныхНСИ(ПакетДанных, Источник) Экспорт
		
КонецПроцедуры

Функция ПрочитатьПакетДанныхНСИ(ВходящийПакетДанных) Экспорт
	
	ИсходящийПакетДанных = ИнициализироватьПакетДанныхНСИ();
	
	Если ВходящийПакетДанных.Свойство("ЗагруженныеОбъекты") Тогда
		Если ВходящийПакетДанных.ЗагруженныеОбъекты.Количество() <> 0 Тогда
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки(ВходящийПакетДанных.ЗагруженныеОбъекты);			
		КонецЕсли;		
	КонецЕсли;
	
	Если ВходящийПакетДанных.Свойство("Объекты") Тогда
		
		Если ВходящийПакетДанных.Объекты.Количество() = 0 Тогда
			Возврат ИсходящийПакетДанных;			
		КонецЕсли;
		
		Для каждого ЭлементПакета Из ВходящийПакетДанных.Объекты Цикл
			
			Если ЭлементПакета.ТипОбъекта = "Валюты"
				И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_Валюта(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "Контрагенты"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_Контрагент(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "ДоговорыКонтрагентов"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_ДоговорКонтрагента(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли;
 			Если ЭлементПакета.ТипОбъекта = "БанковскиеСчета"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_БанковскийСчет(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли; 
			Если ЭлементПакета.ТипОбъекта = "Номенклатура"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_Номенклатура(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "КомплектацияНоменклатуры"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_КомплектацияНоменклатуры(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли; 
			Если ЭлементПакета.ТипОбъекта = "РеализацияТоваровУслуг"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_РеализацияТоваровУслуг(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли;  
			Если ЭлементПакета.ТипОбъекта = "ПоступлениеТоваровУслуг"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_ПоступлениеТоваровУслуг(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "КорректировкаРеализации"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_КорректировкаРеализации(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "ПоступлениеНаРасчетныйСчет"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_ПоступлениеНаРасчетныйСчет(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "СписаниеСРасчетногоСчета"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_СписаниеБезналичныхДенежныхСредств(ЭлементПакета, ИсходящийПакетДанных);	
			КонецЕсли;
			Если ЭлементПакета.ТипОбъекта = "ЦПЗ_ПартииТовара"
					И ЭлементПакета.ЭтоДанныеНабораЗаписей = Ложь Тогда
				СоздатьОбъектыПакетаДанныхНСИ_ЦПЗ_ПартииТовара(ЭлементПакета, ИсходящийПакетДанных)	
			КонецЕсли;
			Если ЭлементПакета.ЭтоДанныеНабораЗаписей = Истина Тогда
				Если ЭлементПакета.ВидОбъекта = "Документы" Тогда
					СоздатьОбъектыПакетаДанныхНСИ_ДанныеНабораЗаписей(ЭлементПакета, ИсходящийПакетДанных);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ИсходящийПакетДанных;
	
КонецФункции

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки(ЗагруженныеОбъекты, УзелОбменаУТ = Неопределено) 
	
	УзелОбменаУТ = ПланыОбмена["ЦПЗ_ПланОбменаСУТ"].НайтиПоКоду("УТ"); 
	
	Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъекты Цикл
		
		Если ЗагруженныйОбъект.ЭтоДанныеНабораЗаписей = Истина Тогда
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоНаборуДанных(ЗагруженныйОбъект, УзелОбменаУТ);	
		Иначе
			ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоВидамОбъектов(ЗагруженныйОбъект, УзелОбменаУТ);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоНаборуДанных(ЭлементПакета, УзелОбменаУТ)
		
	Если ЭлементПакета.Отказ Тогда 
		
		ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("ПрямойОбменДаннымиНСИ");
		Результат = ЭлементПакета.ОписаниеОшибки;
		УзелПрямогоОбменаДанными = "" + УзелОбменаУТ;
		
		РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(УзелОбменаУТ, ДанныеСобытия);
		
		Возврат;
		
	КонецЕсли;

	ВидОбъекта = ЭлементПакета.Вид;
	ВидМетаданных = Метаданные[ЭлементПакета.Вид];
						
	ТипОбъекта = ЭлементПакета.Тип;
	ТипМетаданных = ВидМетаданных[ЭлементПакета.Тип];
	ГУИД = ЭлементПакета.ГУИД;
				
	Менеджер = Вычислить("" + ВидОбъекта + "." + ТипОбъекта);
	СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
				
	НаборДанных = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборДанных.Отбор.Регистратор.Установить(СсылкаНаОбъект);
	НаборДанных.Прочитать();
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаУТ, НаборДанных);
				
КонецПроцедуры

Процедура ПрямойОбменДаннымиНСИ_ПодтверждениеЗагрузки_ПоВидамОбъектов(ЭлементПакета, УзелОбменаУТ)
	
	Если ЭлементПакета.Отказ Тогда 
		
		ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("ПрямойОбменДаннымиНСИ");
		Результат = ЭлементПакета.ОписаниеОшибки;
		УзелПрямогоОбменаДанными = "" + УзелОбменаУТ;
		
		РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(УзелОбменаУТ, ДанныеСобытия);
		
		Возврат;
		
	КонецЕсли;
	
	ВидОбъекта = ЭлементПакета.Вид;
	ВидМетаданных = Метаданные[ЭлементПакета.Вид];
	ТипОбъекта = ЭлементПакета.Тип;
	ТипМетаданных = ВидМетаданных.Найти(ЭлементПакета.Тип);
	Если ТипМетаданных <> Неопределено Тогда
		
		ГУИД = ЭлементПакета.ГУИД;
		
		Менеджер = Вычислить("" + ВидОбъекта + "." + ТипОбъекта);
		СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
		
		СоставПланаОбмена = УзелОбменаУТ.Метаданные().Состав;
		Если СоставПланаОбмена.Содержит(ТипМетаданных) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаУТ, СсылкаНаОбъект);
		КонецЕсли;
	
	КонецЕсли;
			
КонецПроцедуры

#Область ПодготовитьПакетДанныхНСИ

Процедура ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ДанныеДляОтправки, СсылкаНаОбъект, ЗарегистрированПоНаборуЗаписей = Ложь) Экспорт
	
	Атрибуты = Новый Соответствие();
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		ВидОбъекта = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипЗнч(СсылкаНаОбъект));
		ТипОбъекта = МетаданныеОбъекта.Имя;
		ПометкаУдаления = СсылкаНаОбъект.ПометкаУдаления;
		мЗарегистрированПоНаборуЗаписей = ЗарегистрированПоНаборуЗаписей;
		
		Атрибуты.Вставить("ЭтоДанныеНабораЗаписей", Строка(мЗарегистрированПоНаборуЗаписей));
		Атрибуты.Вставить("ВидОбъекта", Строка(ВидОбъекта));
		Атрибуты.Вставить("ТипОбъекта", Строка(ТипОбъекта));
		Атрибуты.Вставить("ПометкаУдаления", ПометкаУдаления);
		
		Если ВидОбъекта = "Документы" Тогда
			Проведен = Формат(СсылкаНаОбъект.Проведен,"БЛ=0; БИ=1");
			
			Атрибуты.Вставить("Проведен", Строка(Проведен));
			
		КонецЕсли;
				
		МетаданныеОбъект = СсылкаНаОбъект.Метаданные();
		РеквизитыМетаданных = МетаданныеОбъект.Реквизиты;
		РеквизитОрганизация = РеквизитыМетаданных.Найти("Организация");
		Если РеквизитОрганизация <> Неопределено Тогда  
			ЭлементОрганизация = ПодготовитьПакетДанныхНСИ_Организация(ПакетДанных, СсылкаНаОбъект.Организация, Истина);
			Атрибуты.Вставить("Организация", ЭлементОрганизация);
		КонецЕсли;
		
	КонецЕсли;

	Если ТипЗнч(ДанныеДляОтправки) = Тип("Структура") Тогда
		Для Каждого Атрибут Из Атрибуты Цикл
			ДанныеДляОтправки.Вставить(Атрибут.Ключ, Атрибут.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПакетДанныхНСИ_Организация(ПакетДанных, Источник, ВыгрузитьАтрибуты = Ложь)
	
	ЭлементПакета = Неопределено;
	
	Если НЕ ВыгрузитьАтрибуты
			И ПакетДанных.ВыгруженныеОбъекты.Найти(Источник) <> Неопределено Тогда
		Возврат ЭлементПакета;	
	КонецЕсли;
	
	ЭлементПакета = Новый Структура();
	
	ПакетДанныхНСИ_УстановитьСтандартныеПараметры(ПакетДанных, ЭлементПакета, Источник);
	
	ЭлементПакета.Вставить("ГУИД", Источник.УникальныйИдентификатор());
	ЭлементПакета.Вставить("Наименование", Источник.Наименование); 
	ЭлементПакета.Вставить("Префикс", Источник.Префикс);  
	ЭлементПакета.Вставить("ИНН", Строка(Источник.ИНН));
	ЭлементПакета.Вставить("КПП", Строка(Источник.КПП));
	
	Возврат ЭлементПакета;
	
КонецФункции

#КонецОбласти 

#Область СоздатьОбъектыПакетаДанныхНСИ

Процедура СоздатьОбъектыПакетаДанныхНСИ_Валюта(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОтборВалюта = Новый Структура("Валюта", СтруктураДанных);
	СправочникСсылка = ПолучитьВалюту(ОтборВалюта, "Валюта");
	
	Отказ = Истина;
	
	ЭтоНовый = Ложь;
	Если СокрЛП(СправочникСсылка.ВерсияДанных) = "" Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);
		ЭтоНовый = Истина;
		Отказ = Ложь;
	Иначе
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Отказ = Ложь;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		СправочникОбъект.Код = СтруктураДанных.Код;
		СправочникОбъект.Наименование = СтруктураДанных.Наименование;
		СправочникОбъект.НаименованиеПолное = СтруктураДанных.НаименованиеПолное;
		СправочникОбъект.СпособУстановкиКурса = НайтиПеречисление("СпособыУстановкиКурсаВалюты", СтруктураДанных.СпособУстановкиКурса); 
		СправочникОбъект.ФормулаРасчетаКурса = СтруктураДанных.ФормулаРасчетаКурса;
		                                     
		Попытка
			СправочникОбъект.Записать();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
													,СтруктураДанных.ВидОбъекта
													,СтруктураДанных.ТипОбъекта
													,СтруктураДанных.ЭтоДанныеНабораЗаписей
													,СтруктураДанных.ГУИД);
		Исключение
			Отказ = Истина;    
			ОписаниеОшибки = ОписаниеОшибки();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
													,СтруктураДанных.ВидОбъекта
													,СтруктураДанных.ТипОбъекта
													,СтруктураДанных.ЭтоДанныеНабораЗаписей
													,СтруктураДанных.ГУИД
													,ОписаниеОшибки);
			ЗаписатьОшибкуВЖурнал(СправочникОбъект.Метаданные(), ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_Контрагент(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	СправочникСсылка = ПолучитьКонтрагента(СтруктураДанных);
	
	Отказ = Истина;
	
	ЭтоНовый = Ложь;
	Если СокрЛП(СправочникСсылка.ВерсияДанных) = "" Тогда
		Если СокрЛП(СтруктураДанных.КонтрагентИНН) <> "" Тогда
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.УстановитьСсылкуНового(СправочникСсылка);
			ЭтоНовый = Истина;
			Отказ = Ложь;
		КонецЕсли;
	Иначе
		КонтрагентОбъект = СправочникСсылка.ПолучитьОбъект();
		Отказ = Ложь;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПартнерОбъект = Неопределено;
		Если ЭтоНовый Тогда
			
			ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку();
			
			ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
			ПартнерОбъект.УстановитьСсылкуНового(ПартнерСсылка);
			ПартнерОбъект.Наименование = СтруктураДанных.КонтрагентНаименование;
			ПартнерОбъект.НаименованиеПолное = СтруктураДанных.КонтрагентНаименованиеПолноеПартнера;
			
			КонтрагентОбъект.Партнер = ПартнерСсылка;
			
		КонецЕсли;
		
		КонтрагентОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
		КонтрагентОбъект.Наименование = СтруктураДанных.КонтрагентНаименование;
		КонтрагентОбъект.НаименованиеПолное = СтруктураДанных.КонтрагентНаименованиеПолное;
		
		//Если КонтрагентОбъект.ЦПЗ_КраткоеНаименование = "" Тогда
			КонтрагентОбъект.ЦПЗ_КраткоеНаименование = СтруктураДанных.КонтрагентНаименованиеПолное;			
		//КонецЕсли;
		
		КонтрагентОбъект.ИНН = СтруктураДанных.КонтрагентИНН;
		КонтрагентОбъект.РегистрационныйНомер = СтруктураДанных.КонтрагентРегистрационныйНомер;
		КонтрагентОбъект.ЦПЗ_СвидетельствоДатаВыдачи = СтруктураДанных.КонтрагентСвидетельствоДатаВыдачи;
		КонтрагентОбъект.ЦПЗ_СвидетельствоСерияНомер = СтруктураДанных.КонтрагентСвидетельствоСерияНомер;
		КонтрагентОбъект.КПП = СтруктураДанных.КонтрагентКПП;
		
		КонтрагентОбъект.КодПоОКПО = СтруктураДанных.КонтрагентОКПО;
		
		Если НЕ ЭтоНовый Тогда
			ПартнерСсылка = КонтрагентОбъект.Партнер; 
			Если СокрЛП(ПартнерСсылка.ВерсияДанных) = "" Тогда
				ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
				ПартнерОбъект.УстановитьСсылкуНового(ПартнерСсылка);
			Иначе
				ПартнерОбъект = ПартнерСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			ПартнерОбъект.Наименование = СтруктураДанных.КонтрагентНаименование;
			Если ПартнерОбъект.НаименованиеПолное = "" Тогда
				ПартнерОбъект.НаименованиеПолное = СтруктураДанных.КонтрагентНаименованиеПолноеПартнера;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементКонтактнаяИнформация = Неопределено;
		СтруктураДанных.Свойство("КонтактнаяИнформация", ЭлементКонтактнаяИнформация);
		
		Если ЭлементКонтактнаяИнформация <> Неопределено Тогда
			СоздатьОбъектыПакетаДанныхНСИ_Партнер_КонтактнаяИнформация(ПартнерОбъект, ЭлементКонтактнаяИнформация, ИсходящийПакетДанных);
		КонецЕсли;	
		
		Попытка
			Если ПартнерОбъект <> Неопределено Тогда
				ПартнерОбъект.Записать();
			КонецЕсли;
			КонтрагентОбъект.Записать();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
													,СтруктураДанных.ВидОбъекта
													,СтруктураДанных.ТипОбъекта
													,СтруктураДанных.ЭтоДанныеНабораЗаписей
													,СтруктураДанных.КонтрагентГУИД);
		Исключение
			Отказ = Истина;    
			ОписаниеОшибки = ОписаниеОшибки();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
													,СтруктураДанных.ВидОбъекта
													,СтруктураДанных.ТипОбъекта
													,СтруктураДанных.ЭтоДанныеНабораЗаписей
													,СтруктураДанных.КонтрагентГУИД
													,ОписаниеОшибки);
			ЗаписатьОшибкуВЖурнал(КонтрагентОбъект.Метаданные(), ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_Партнер_КонтактнаяИнформация(ОбъектВладелец, СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;	
	Запрос.Текст = "Выбрать ТаблицаКИ.АдресЭП,
					|	Выразить(ТаблицаКИ.ВидПредставление КАК СТРОКА(250)) КАК ВидПредставление,
					|	ТаблицаКИ.ВидДляСпискаПредставление КАК ВидДляСпискаПредставление,
					|	ТаблицаКИ.Город,
					|	ТаблицаКИ.ДоменноеИмяСервера,
					|	ТаблицаКИ.Значение,
					|	ТаблицаКИ.ЗначенияПолей,
					|	ТаблицаКИ.НомерТелефона,
					|	ТаблицаКИ.НомерТелефонаБезКодов,
					|	ТаблицаКИ.Представление,
					|	ТаблицаКИ.Регион,
					|	ТаблицаКИ.Страна,
					|	Выразить(ТаблицаКИ.ТипПредставление КАК СТРОКА(250)) КАК ТипПредставление
					|	ПОМЕСТИТЬ пВходящаяТаблицаКИ
					| Из &ТаблицаКИ КАК ТаблицаКИ ;
					|
					|Выбрать ТаблицаКИ.АдресЭП,  
					|	Выбор 
					|	КОГДА СокрЛП(Выразить(ТаблицаКИ.ТипПредставление КАК СТРОКА(250))) = ""Веб страница""
					|		Тогда ""ВебСтраница""  
					|	КОГДА СокрЛП(Выразить(ТаблицаКИ.ТипПредставление КАК СТРОКА(250))) = ""Адрес электронной почты""
					|		Тогда ""АдресЭлектроннойПочты""  
					|	Иначе СокрЛП(Выразить(ТаблицаКИ.ТипПредставление КАК СТРОКА(250)))
					|	КОНЕЦ
					|	КАК ТипПредставление,
					|	Выбор 
					|	КОГДА СокрЛП(Выразить(ТаблицаКИ.ВидПредставление КАК СТРОКА(250))) = ""Фактический адрес""
					|		Тогда ""Адрес""
					|	КОГДА СокрЛП(Выразить(ТаблицаКИ.ВидПредставление КАК СТРОКА(250))) = ""Email""
					|		Тогда ""Электронная почта""
					|	Иначе СокрЛП(Выразить(ТаблицаКИ.ВидПредставление КАК СТРОКА(250)))
					|	КОНЕЦ
					|	КАК ВидПредставление,
					|	ТаблицаКИ.ВидДляСпискаПредставление КАК ВидДляСпискаПредставление,
					|	ТаблицаКИ.Город,
					|	ТаблицаКИ.ДоменноеИмяСервера,
					|	ТаблицаКИ.Значение,
					|	ТаблицаКИ.ЗначенияПолей,
					|	ТаблицаКИ.НомерТелефона,
					|	ТаблицаКИ.НомерТелефонаБезКодов,
					|	ТаблицаКИ.Представление,
					|	ТаблицаКИ.Регион,
					|	ТаблицаКИ.Страна
					|	ПОМЕСТИТЬ ВходящаяТаблицаКИ
					| Из пВходящаяТаблицаКИ КАК ТаблицаКИ";
    //
	Запрос.УстановитьПараметр("ТаблицаКИ", СтруктураДанных.КонтактнаяИнформация);
	Запрос.Выполнить();
	
	ИмяПеречисления = "ТипыКонтактнойИнформации";
	ТаблицаПеречисления = Новый ТаблицаЗначений;
    ТаблицаПеречисления.Колонки.Добавить("Значение", Новый ОписаниеТипов("ПеречислениеСсылка." + ИмяПеречисления));
    ТаблицаПеречисления.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(120)));
    Для Каждого ЗнПереч Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
        НовСтр = ТаблицаПеречисления.Добавить();
        НовСтр.Значение = Перечисления[ИмяПеречисления][ЗнПереч.Имя];
        НовСтр.Имя = ЗнПереч.Имя;
	КонецЦикла;   
	
	Запрос.Текст = "Выбрать Т.Значение, Т.Имя Поместить ТипыКонтактнойИнформации Из &ТаблицаПеречисления КАК Т";
	Запрос.УстановитьПараметр("ТаблицаПеречисления", ТаблицаПеречисления); 
	Запрос.Выполнить();
	
	ГруппаВКИПартнер = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	Запрос.Текст = "ВЫБРАТЬ
	|	КИ.Ссылка КАК Ссылка,
	|	КИ.Тип КАК Тип,
	|	ТипыКонтактнойИнформации.Имя КАК ТипПредставление,
	|	КИ.Вид КАК Вид,
	|	КИ.Вид.Наименование КАК ВидПредставление,
	|	КИ.Представление КАК Представление,
	|	КИ.ЗначенияПолей КАК ЗначенияПолей,
	|	КИ.Страна КАК Страна,
	|	КИ.Регион КАК Регион,
	|	КИ.Город КАК Город,
	|	КИ.АдресЭП КАК АдресЭП,
	|	КИ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	КИ.НомерТелефона КАК НомерТелефона,
	|	КИ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	|	КИ.ВидДляСписка КАК ВидДляСписка,
	|	КИ.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	|	КИ.Значение КАК Значение,
	|	КИ.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера
	|ПОМЕСТИТЬ ШаблонКИ
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК КИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыКонтактнойИнформации КАК ТипыКонтактнойИнформации
	|			ПО (КИ.Тип = ТипыКонтактнойИнформации.Значение)
	|ГДЕ
	|	КИ.Ссылка = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКИ.Тип КАК ТИП,
	|	СокрЛП(ТипыКонтактнойИнформации.Имя) КАК ТипПредставление,
	|	ВКИ.Ссылка КАК ВИД,
	|	СокрЛП(ВКИ.Ссылка.Наименование) КАК ВидПредставление
	|ПОМЕСТИТЬ ВКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВКИ
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТипыКонтактнойИнформации КАК ТипыКонтактнойИнформации
	|			ПО (ВКИ.Тип = ТипыКонтактнойИнформации.Значение)
	|ГДЕ
	|	ВКИ.Родитель = &ГруппаВКИПартнер
	|	И ВКИ.ПометкаУдаления = ЛОЖЬ
	|	И ВКИ.Используется = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ""БАЗА"" КАК Источник,
	|	ВКИ.ТИП КАК Тип,
	|	ВКИ.ТипПредставление КАК ТипПредставление,
	|	ВКИ.ВИД КАК Вид,
	|	ВКИ.ВидПредставление КАК ВидПредставление,
	|	ШаблонКИ.Представление КАК Представление,
	|	""Выразить(ШаблонКИ.ЗначенияПолей КАК СТРОКА(1500))"" КАК ЗначенияПолей,
	|	ШаблонКИ.Страна КАК Страна,
	|	ШаблонКИ.Регион КАК Регион,
	|	ШаблонКИ.Город КАК Город,
	|	ШаблонКИ.АдресЭП КАК АдресЭП,
	|	ШаблонКИ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	ШаблонКИ.НомерТелефона КАК НомерТелефона,
	|	ШаблонКИ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	|	ШаблонКИ.ВидДляСписка КАК ВидДляСписка,
	|	ШаблонКИ.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	|	""Выразить(ШаблонКИ.Значение КАК СТРОКА(1500))"" КАК Значение,
	|	ШаблонКИ.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера 
	|	Поместить ТаблицаОбъединениеКИ
	|ИЗ
	|	ШаблонКИ КАК ШаблонКИ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВКИ КАК ВКИ
	|		ПО (ШаблонКИ.Тип = ВКИ.ТИП
	|				И ШаблонКИ.Вид = ВКИ.ВИД)
	|	
	|	Объединить
	|	
	|Выбрать 
	|	""ВХОДЯЩИЕ"", 
	|	ВКИ.ТИП КАК ТипСсылка,
	|	ШаблонКИ.ТипПредставление,
	|	ВКИ.ВИД КАК ВидСсылка,
	|	ШаблонКИ.ВидПредставление,
	|	ШаблонКИ.Представление КАК Представление,
	|	""Выразить(ШаблонКИ.ЗначенияПолей КАК СТРОКА(1500))"" КАК ЗначенияПолей,
	|	ШаблонКИ.Страна КАК Страна,
	|	ШаблонКИ.Регион КАК Регион,
	|	ШаблонКИ.Город КАК Город,
	|	ШаблонКИ.АдресЭП КАК АдресЭП,
	|	ШаблонКИ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	ШаблонКИ.НомерТелефона КАК НомерТелефона,
	|	ШаблонКИ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	|	"""",
	|	ЛОЖЬ КАК CRM_ОсновнойДляСвязи,
	|	""Выразить(ШаблонКИ.Значение КАК СТРОКА(1500))"" КАК Значение,
	|	0 КАК сфпВремяЗадержкиНабораДобавочногоНомера 
	|ИЗ ВходящаяТаблицаКИ КАК ШаблонКИ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВКИ КАК ВКИ
	|		ПО ШаблонКИ.ТипПредставление = Выразить(ВКИ.ТипПредставление КАК СТРОКА(250))
	|				И ШаблонКИ.ВидПредставление =  Выразить(ВКИ.ВИДПредставление КАК СТРОКА(250))
	| ;
	|Выбрать 	
	|	ВХ.ТИП КАК Тип,
	|	ВХ.ВИД КАК Вид,
	|	ВХ.Представление КАК Представление,
	|	ДанныеВХКи.ЗначенияПолей КАК ЗначенияПолей,
	|	ВХ.Страна КАК Страна,
	|	ВХ.Регион КАК Регион,
	|	ВХ.Город КАК Город,
	|	ВХ.АдресЭП КАК АдресЭП,
	|	ВХ.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	ВХ.НомерТелефона КАК НомерТелефона,
	|	ВХ.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
	|	ВХ.ВидДляСписка КАК ВидДляСписка,
	|	ВХ.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	|	ДанныеВХКи.Значение КАК Значение,
	|	ВХ.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера  
	|  	ИЗ ТаблицаОбъединениеКИ КАК ВХ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОбъединениеКИ КАК ИСХ
	|			ПО ВХ.ТИП = ИСХ.ТИП И ВХ.ВИД = ИСХ.ВИД
	|					И ВХ.Источник = ""ВХОДЯЩИЕ""
	|					И ИСХ.Источник = ""БАЗА""
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВходящаяТаблицаКИ КАК ДанныеВХКи
	|			ПО ВХ.ТИППредставление = ДанныеВХКи.ТИППредставление И ВХ.ВИДПредставление = ДанныеВХКи.ВИДПредставление
	|				И ВХ.Представление = ДанныеВХКи.Представление 
	|	ГДЕ ВХ.Источник = ""ВХОДЯЩИЕ""
	|			И ИСХ.Представление ЕСТЬ NULL
	|			И НЕ ВХ.Представление ЕСТЬ NULL
	|	"; 
	//
	Запрос.УстановитьПараметр("Партнер", ОбъектВладелец.Ссылка);
	Запрос.УстановитьПараметр("ГруппаВКИПартнер", ГруппаВКИПартнер); 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТчКонтактнаяИнформация = ОбъектВладелец.КонтактнаяИнформация;
	
	Пока Выборка.Следующий() Цикл
		СтрТЧ = ТчКонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТч, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_ДоговорКонтрагента(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	СправочникСсылкаКонтрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Владелец.ГУИД
																, СтруктураДанных.Владелец.ИНН
																, СтруктураДанных.Владелец.КПП)
													);
	//												
	Если СокрЛП(СправочникСсылкаКонтрагент.ВерсияДанных) = "" Тогда
		Возврат;
	Конецесли;
	
	СправочникСсылка = ПолучитьДоговор(СтруктураДанных, СправочникСсылкаКонтрагент);
	
	ЭтоНовый = Ложь;
	Если СокрЛП(СправочникСсылка.ВерсияДанных) = "" Тогда
		ДоговорКонтрагентаОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорКонтрагентаОбъект.УстановитьСсылкуНового(СправочникСсылка);
		ЭтоНовый = Истина;
	Иначе             
		ДоговорКонтрагентаОбъект = СправочникСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ДоговорКонтрагентаОбъект.Организация = ПолучитьОрганизацию(СтруктураДанных.Организация);
	
	ДоговорКонтрагентаОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	ДоговорКонтрагентаОбъект.Контрагент    = СправочникСсылкаКонтрагент;
	ДоговорКонтрагентаОбъект.Наименование  = СтруктураДанных.ДоговорНаименование; 
	ДоговорКонтрагентаОбъект.Номер         = СтруктураДанных.ДоговорНомер;
	ДоговорКонтрагентаОбъект.Дата          = СтруктураДанных.ДоговорДата; 
	ДоговорКонтрагентаОбъект.Статус		   = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	ДоговорКонтрагентаОбъект.РаспределитьПоступлениеПоЗаказам = Ложь;
	ДоговорКонтрагентаОбъект.ВариантОформленияЗакупок = НайтиПеречисление("ХозяйственныеОперации", СтруктураДанных.ХозяйственнаяОперация);; 
		
	ВалютаВзаиморасчета = ПолучитьВалюту(СтруктураДанных, "ВалютаВзаиморасчета");
	ДоговорКонтрагентаОбъект.ВалютаВзаиморасчетов = ВалютаВзаиморасчета;
	
	ВалютаОплаты = Неопределено;
	Если СтруктураДанных.РасчетыВУсловныхЕдиницах Тогда
		ВалютаОплаты = ДоговорКонтрагентаОбъект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ПорядокОплаты = "РасчетыВРубляхОплатаВРублях";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаРегламентированногоУчета = ДоговорКонтрагентаОбъект.ВалютаВзаиморасчетов Тогда
		ПорядокОплаты = "РасчетыВРубляхОплатаВРублях";
	ИначеЕсли ВалютаРегламентированногоУчета <> ДоговорКонтрагентаОбъект.ВалютаВзаиморасчетов 
				И СтруктураДанных.ОплатаВВалюте Тогда
		ПорядокОплаты = "РасчетыВВалютеОплатаВВалюте";
	ИначеЕсли ВалютаРегламентированногоУчета <> ДоговорКонтрагентаОбъект.ВалютаВзаиморасчетов 
				И НЕ СтруктураДанных.ОплатаВВалюте Тогда 
		ПорядокОплаты = "РасчетыВВалютеОплатаВРублях";
	КонецЕсли;
	
	ДоговорКонтрагентаОбъект.ПорядокОплаты = НайтиПеречисление("ПорядокОплатыПоСоглашениям", ПорядокОплаты);
	
	СтруктураДанных.ВидДоговора = ПолучитьТипДоговораКонтрагента(СтруктураДанных.ВидДоговора);
	
	ДоговорКонтрагентаОбъект.ТипДоговора = СтруктураДанных.ВидДоговора;
	ДоговорКонтрагентаОбъект.ХозяйственнаяОперация = НайтиПеречисление("ВариантыОформленияЗакупок", "НеРазделять");
	
	ДоговорКонтрагентаОбъект.Согласован = СтруктураДанных.Согласован;
	
	ДоговорКонтрагентаОбъект.ПорядокРасчетов = НайтиПеречисление("ПорядокРасчетов", СтруктураДанных.ПорядокРасчетов); 
	
	ДоговорКонтрагентаОбъект.ЗакупкаПодДеятельность = ?(СтруктураДанных.Свойство("ЗакупкаПодДеятельность")
													,НайтиПеречисление("ТипыНалогообложенияНДС", СтруктураДанных.ЗакупкаПодДеятельность)
													,НайтиПеречисление("ТипыНалогообложенияНДС", "ПоФактическомуИспользованию"));
	ДоговорКонтрагентаОбъект.ВариантПриемкиТоваров = ?(СтруктураДанных.Свойство("ВариантПриемкиТоваров")
													,НайтиПеречисление("ВариантыПриемкиТоваров", СтруктураДанных.ВариантПриемкиТоваров)
													,НайтиПеречисление("ВариантыПриемкиТоваров", "МожетПроисходитьБезЗаказовИНакладных"));
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаОбъект.ДатаНачалаДействия)Тогда
		ДоговорКонтрагентаОбъект.ДатаНачалаДействия = СтруктураДанных.ДоговорДата;
	КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаОбъект.ДатаОкончанияДействия) Тогда
		ДоговорКонтрагентаОбъект.ДатаОкончанияДействия = СтруктураДанных.ДоговорСрокДействия;
	//КонецЕсли;
				
	ДоговорКонтрагентаОбъект.Партнер = СправочникСсылкаКонтрагент.Партнер;
	Попытка
		ДоговорКонтрагентаОбъект.Записать();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
										,СтруктураДанных.ВидОбъекта
										,СтруктураДанных.ТипОбъекта
										,СтруктураДанных.ЭтоДанныеНабораЗаписей
										,СтруктураДанных.ДоговорГУИД);

	Исключение   
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
										,СтруктураДанных.ВидОбъекта
										,СтруктураДанных.ТипОбъекта
										,СтруктураДанных.ЭтоДанныеНабораЗаписей
										,СтруктураДанных.ДоговорГУИД
										,ОписаниеОшибки);
		ЗаписатьОшибкуВЖурнал(ДоговорКонтрагентаОбъект.Метаданные(), ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_БанковскийСчет(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	КонтрагентСсылка = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Владелец.ГУИД
																, СтруктураДанных.Владелец.ИНН
																, СтруктураДанных.Владелец.КПП)
													);
    //
	Если СокрЛП(КонтрагентСсылка.ВерсияДанных) = "" Тогда
		Возврат;
	Конецесли;
	БанковскийСчетСсылка = ПолучитьБанковскийСчет(СтруктураДанных.БанковскийСчетГУИД
												,СтруктураДанных.БанковскийСчетНомерСчета
												,КонтрагентСсылка
												,СтруктураДанных.БанковскийСчетБанкБИК);
											
	Если СокрЛП(БанковскийСчетСсылка.ВерсияДанных) = "" Тогда
		
		БанковскиеСчетаОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		БанковскиеСчетаОбъект.ПометкаУдаления	= СтруктураДанных.ПометкаУдаления;
		БанковскиеСчетаОбъект.БИКБанка          = СтруктураДанных.БанковскийСчетБанкБИК;
		БанковскиеСчетаОбъект.Владелец          = КонтрагентСсылка;
		БанковскиеСчетаОбъект.НомерСчета        = СтруктураДанных.БанковскийСчетНомерСчета;
		БанковскиеСчетаОбъект.АдресБанка        = СтруктураДанных.БанковскийСчетБанкАдрес;
		БанковскиеСчетаОбъект.КоррСчетБанка     = СтруктураДанных.БанковскийСчетКорСчет;
		БанковскиеСчетаОбъект.ГородБанка        = СтруктураДанных.БанковскийСчетБанкГород;
		БанковскиеСчетаОбъект.Наименование      = СтруктураДанных.БанковскийСчетНаименование;
		БанковскиеСчетаОбъект.НаименованиеБанка = СтруктураДанных.БанковскийСчетБанкНаименование;
		
		БанкСсылка = ПолучитьБанкПоБИК(СтруктураДанных.БанковскийСчетБанкБИК);
		БанковскиеСчетаОбъект.Банк              = БанкСсылка;
		
		Если ЗначениеЗаполнено(БанкСсылка) Тогда
			
			РеквизитыБанка = "БИКБанка, СВИФТБанка, НаименованиеБанка, НаименованиеБанкаМеждународное, КоррСчетБанка, СтранаБанка, ГородБанка,
									|ГородБанкаМеждународный, АдресБанка, АдресБанкаМеждународный, ТелефоныБанка";
			
			СтруктураРеквизитов = Новый Структура;
			ИменаРеквизитов = СтрРазделить(РеквизитыБанка, ",", Ложь);
			Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
				СтруктураРеквизитов.Вставить(ИмяРеквизита, СтрЗаменить(ИмяРеквизита, "Банка", ""));
			КонецЦикла;
			СтруктураРеквизитов.Вставить("БИКБанка", "Код");
			СтруктураРеквизитов.Вставить("СВИФТБанка", "СВИФТБИК");
			СтруктураРеквизитов.Вставить("НаименованиеБанкаМеждународное", "МеждународноеНаименование");
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкСсылка, СтруктураРеквизитов);
			
			ЗаполнитьЗначенияСвойств(БанковскиеСчетаОбъект, РеквизитыБанка);
			
		КонецЕсли;
		
		
		Попытка
			БанковскиеСчетаОбъект.Записать();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
										,СтруктураДанных.ВидОбъекта
										,СтруктураДанных.ТипОбъекта
										,СтруктураДанных.ЭтоДанныеНабораЗаписей
										,СтруктураДанных.БанковскийСчетГУИД);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
										,СтруктураДанных.ВидОбъекта
										,СтруктураДанных.ТипОбъекта
										,СтруктураДанных.ЭтоДанныеНабораЗаписей
										,СтруктураДанных.БанковскийСчетГУИД
										,ОписаниеОшибки);
		КонецПопытки;
	Иначе
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
										,СтруктураДанных.ВидОбъекта
										,СтруктураДанных.ТипОбъекта
										,СтруктураДанных.ЭтоДанныеНабораЗаписей
										,СтруктураДанных.БанковскийСчетГУИД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_Номенклатура(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	СправочникСсылка = НайтиНоменклатуруПоГУИД(СтруктураДанных.ГУИД);
	
	СправочникОбъект = Неопределено;
	
	Если СокрЛП(СправочникСсылка.ВерсияДанных) = "" Тогда
		
		Если СтруктураДанных.ЭтоГруппа = Истина Тогда
			СправочникОбъект = Справочники.Номенклатура.СоздатьГруппу();				
		Иначе	
			СправочникОбъект = Справочники.Номенклатура.СоздатьЭлемент();				
		КонецЕсли;
		
		СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);
		
	Иначе
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СправочникОбъект.Наименование = СтруктураДанных.Наименование;
	СправочникОбъект.Родитель = НайтиНоменклатуруПоГУИД(СтруктураДанных.РодительГУИД);
	СправочникОбъект.Код = СокрЛП(СтруктураДанных.Код);				
	СправочникОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	
	Если СтруктураДанных.ЭтоГруппа = Ложь Тогда
		СправочникОбъект.НаименованиеПолное = СтруктураДанных.Наименование;
		СправочникОбъект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(СтруктураДанных.ЕдИзм);
		СправочникОбъект.СтавкаНДС = НайтиПеречисление("СтавкиНДС", СтруктураДанных.СтавкаНДС);//Перечисления.СтавкиНДС.НДС20;  
		СправочникОбъект.КодОКПД2 = ПолучитьКодОКПД2(СтруктураДанных.ОКПД2);
		
		ИмяРеквизита_УчетПоПартиямТовара = "ЦПЗ_УчетПоПартиямТовара";
		Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита_УчетПоПартиямТовара) <> Неопределено
				И СтруктураДанных.Свойство("УчетПоПартиямТовара")
		Тогда
			СтруктураДанных.Свойство("УчетПоПартиямТовара", СправочникОбъект[ИмяРеквизита_УчетПоПартиямТовара]);		
		КонецЕсли;
		
	КонецЕсли;	
	
	Попытка
		СправочникОбъект.Записать();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_КомплектацияНоменклатуры(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	СсылкаНаОбъект = Документы.ЦПЗ_КомплектацияНоменклатуры.НайтиПореквизиту("ДокументСкладскогоУчетаГУИД", "" + СтруктураДанных.ГУИД); //ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	ДокументОбъект = Неопределено;
	
	Если СокрЛП(СсылкаНаОбъект.ВерсияДанных) = "" Тогда
		
		//FEATURE: не создаем новых документов  
		Возврат;
		
		ДокументОбъект =  Документы.ЦПЗ_КомплектацияНоменклатуры.СоздатьДокумент();				
		//ДокументОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		
	Иначе
		ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.Статус = Перечисления.ЦПЗ_СостоянияДокументаПриОбменесБП.ПринятвБУ;
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;	
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	ДокументОбъект.Дата          = СтруктураДанных.Дата;
	
	ДокументОбъект.Организация = ПолучитьОрганизацию(СтруктураДанных.Организация); 
	
	ДокументОбъект.ВидОперации = ?(СтруктураДанных.ВидОперации = "Комплектация", Истина, Ложь);
	
	Склад = Справочники.Склады.ПолучитьСсылку(СтруктураДанных.Склад);
	ДокументОбъект.СкладГлавный = Склад; 
	ДокументОбъект.Склад = Склад;
	
	ДокументОбъект.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(СтруктураДанных.Номенклатура);
	ДокументОбъект.ДополнительнаяАналитика = НайтиДополнительнуюАналитикуУчета("", СтруктураДанных.СчетУчета);
	ДокументОбъект.Количество = СтруктураДанных.Количество;
	
	ТчКомплектующие = ДокументОбъект.Комплектующие;
	ТчКомплектующие.Очистить();
	Для Каждого Стр Из СтруктураДанных.Комплектующие Цикл
		
		СтрТч = ТчКомплектующие.Добавить();
		СтрТЧ.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура); 
		СтрТч.ДополнительнаяАналитика = НайтиДополнительнуюАналитикуУчета("", Стр.СчетУчета);
		СтрТч.Количество = СтруктураДанных.Количество;
		
	КонецЦикла;	
	
	Попытка   
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
      
Процедура СоздатьОбъектыПакетаДанныхНСИ_РеализацияТоваровУслуг(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОрганизацияСсылка =  ПолучитьОрганизацию(СтруктураДанных.Организация);
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументГУИД = СтруктураДанных.ГУИД;
	ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	ЭтоНовый = Ложь;
	Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе   
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	
	ДокументОбъект.Номер = СтруктураДанных.Номер;
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.СуммаДокумента = СтруктураДанных.СуммаДокумента;
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(СтруктураДанных.СкладГУИД);
	
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Контрагент.ГУИД
																, СтруктураДанных.Контрагент.ИНН
																, СтруктураДанных.Контрагент.КПП)
													);
	//	
	Если СтруктураДанных.Свойство("СведенияОТранспортировкеИГрузе") Тогда
		Если Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Найти("СведенияОТранспортировкеИГрузе")
				<> Неопределено Тогда 	
			ДокументОбъект.СведенияОТранспортировкеИГрузе = СтруктураДанных.СведенияОТранспортировкеИГрузе;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураДанных.Свойство("Грузоотправитель") Тогда 
	
		ДокументОбъект.Грузоотправитель = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Грузоотправитель.ГУИД
																, СтруктураДанных.Грузоотправитель.ИНН
																, СтруктураДанных.Грузоотправитель.КПП)
													);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Грузополучатель") Тогда
	
		ДокументОбъект.Грузополучатель = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Грузополучатель.ГУИД
																, СтруктураДанных.Грузополучатель.ИНН
																, СтруктураДанных.Грузополучатель.КПП)
													);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДокументОбъект.Партнер = ДокументОбъект.Контрагент.Партнер;
	КонецЕсли; 
	
	СтруктураДанных.Вставить("КонтрагентСсылка", ДокументОбъект.Контрагент);
	
	ДокументОбъект.Договор = ПолучитьДоговор(СтруктураДанных.Договор, ДокументОбъект.Контрагент);
	ДокументОбъект.Кратность = 1;
	ДокументОбъект.Курс = 1;
	ДокументОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Валюта = ВалютаРег;
	ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРег;
	ДокументОбъект.Комментарий = "Загружено из БП "+ТекущаяДата();
	ДокументОбъект.Организация = ОрганизацияСсылка;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ДокументОбъект.ЦенаВключаетНДС = Истина;
	ДокументОбъект.ЦПЗ_Номер = СтруктураДанных.Номер;
	ДокументОбъект.Согласован = Истина;
	ДокументОбъект.АдресДоставки = СтруктураДанных.АдресДоставки;

	РасходныйОрдерДокумента = "";
	Если Сокрлп(ДокументОбъект.ЗаказКлиента) <> "" Тогда
		Если ДокументОбъект.Товары.Количество() <> 0 Тогда
			РасходныйОрдерДокумента = ДокументОбъект.Товары[0].РасходныйОрдер;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Для Каждого Стр Из СтруктураДанных.Товары Цикл
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура		 = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура); 
		СтрТЧ.ПартияТовара		 = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(Стр.ПартияТовара);
		СтрТЧ.Количество		 = Стр.Количество;
		СтрТЧ.КоличествоУпаковок = Стр.Количество;
		СтрТЧ.Цена				 = Стр.Цена;
		СтрТЧ.СуммаСНДС			 = Стр.Сумма;
		СтрТЧ.Сумма				 = СтрТЧ.СуммаСНДС;    
		СтрТЧ.СуммаНДС			 = Стр.СуммаНДС;
		СтрТЧ.СтавкаНДС			 = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");
		СтрТЧ.Склад				 = ДокументОбъект.Склад;
		СтрТЧ.РасходныйОрдер	 = РасходныйОрдерДокумента;
		 
	КонецЦикла;
	
	Для каждого Стр Из СтруктураДанных.Услуги Цикл
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура		 = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура);
		СтрТЧ.Количество		 = Стр.Количество;
		СтрТЧ.КоличествоУпаковок = Стр.Количество;
		СтрТЧ.Цена				 = Стр.Цена;
		СтрТЧ.СуммаСНДС			 = Стр.Сумма;
		СтрТЧ.Сумма				 = СтрТЧ.СуммаСНДС;    
		СтрТЧ.СуммаНДС			 = Стр.СуммаНДС;
		СтрТЧ.СтавкаНДС			 = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");;
		
	КонецЦикла;
	
	Если Сокрлп(ДокументОбъект.ЗаказКлиента) = "" Тогда
	    ПодобратьРеализациюПоРОТ(ДокументОбъект);
	КонецЕсли;
	Если Сокрлп(ДокументОбъект.ЗаказКлиента) = "" Тогда
	   ДокументОбъект.РеализацияПоЗаказам = Ложь;
	КонецЕсли;
		
	Если СтруктураДанных.ЗаказКлиентаГУИД <> "" Тогда
		Попытка
			ЗаказКлиентаГУИД = Новый УникальныйИдентификатор(СокрЛП(СтруктураДанных.ЗаказКлиентаГУИД));
		Исключение
			ЗаказКлиентаГУИД = Неопределено;
		КонецПопытки;
		Если ЗаказКлиентаГУИД <> Неопределено Тогда
			ЗаказКлиентаСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(ЗаказКлиентаГУИД);
			Если СокрЛП(ЗаказКлиентаСсылка.ВерсияДанных) <> "" Тогда
				
				ДокументОбъект.ЗаказКлиента = ЗаказКлиентаСсылка;
				ДокументОбъект.РеализацияПоЗаказам = Истина;
				ДокументОбъект.ЦПЗ_ТипЗаказа = ЗаказКлиентаСсылка.ЦПЗ_ТипЗаказа;
				ДокументОбъект.Менеджер = ЗаказКлиентаСсылка.Менеджер;
				ДокументОбъект.Подразделение = ЗаказКлиентаСсылка.Подразделение;
				
				Для Каждого СтрТЧ Из ДокументОбъект.Товары Цикл
					СтрТЧ.ЗаказКлиента = ЗаказКлиентаСсылка;				
					ЗаполнитьКодСтрокиТабличнойЧастиТовары(СтрТЧ);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если СтруктураДанных.Проведен = Ложь Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ИначеЕсли ДокументОбъект.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Попытка   
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;

		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
      
Процедура СоздатьОбъектыПакетаДанныхНСИ_ПоступлениеТоваровУслуг(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОрганизацияСсылка =  ПолучитьОрганизацию(СтруктураДанных.Организация);
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументГУИД = СтруктураДанных.ГУИД;
	ДокументСсылка = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	ЭтоНовый = Ложь;
	Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе   
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	
	ДокументОбъект.Номер = СтруктураДанных.Номер;
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.СуммаДокумента = СтруктураДанных.СуммаДокумента;
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(СтруктураДанных.СкладГУИД);
	
	Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Контрагент.ГУИД
																, СтруктураДанных.Контрагент.ИНН
																, СтруктураДанных.Контрагент.КПП)
													);
	//	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДокументОбъект.Партнер = Контрагент.Партнер;
	КонецЕсли;    
	
	ЗначениеИспользоватьПартнеровКакКонтрагентов = ПолучитьЗначениеКонстанты("ИспользоватьПартнеровКакКонтрагентов");
	Если НЕ ЗначениеИспользоватьПартнеровКакКонтрагентов Тогда
		ДокументОбъект.Контрагент = Контрагент;		
	Иначе
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();		
	КонецЕсли;
	
	СтруктураДанных.Вставить("КонтрагентСсылка", Контрагент);
	
	ДокументОбъект.Договор = ПолучитьДоговор(СтруктураДанных.Договор, СтруктураДанных.КонтрагентСсылка);
	ДокументОбъект.Кратность = 1;
	ДокументОбъект.Курс = 1;
	ДокументОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Валюта = ВалютаРег;
	ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРег;
	ДокументОбъект.Комментарий = "Загружено из БП "+ТекущаяДата();
	ДокументОбъект.Организация = ОрганизацияСсылка;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ДокументОбъект.ЦенаВключаетНДС = Истина;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		ДокументОбъект.ЗакупкаПодДеятельность = ?(ЗначениеЗаполнено(ДокументОбъект.Договор.ЗакупкаПодДеятельность)
													,ДокументОбъект.Договор.ЗакупкаПодДеятельность
													,НайтиПеречисление("ТипыНалогообложенияНДС", "ПоФактическомуИспользованию"));
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ДокументОбъект.ВариантПриемкиТоваров = ?(ЗначениеЗаполнено(ДокументОбъект.Договор.ВариантПриемкиТоваров)
													,ДокументОбъект.Договор.ВариантПриемкиТоваров
													,НайтиПеречисление("ВариантыПриемкиТоваров", "МожетПроисходитьБезЗаказовИНакладных"));
		ДокументОбъект.РаспределитьПоступлениеПоЗаказам = ДокументОбъект.Договор.РаспределитьПоступлениеПоЗаказам;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Для Каждого Стр Из СтруктураДанных.Товары Цикл
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура		 = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура); 
		СтрТЧ.Количество		 = Стр.Количество;
		СтрТЧ.КоличествоУпаковок = Стр.Количество;
		СтрТЧ.Цена				 = Стр.Цена;
		СтрТЧ.СуммаСНДС			 = Стр.Сумма;
		СтрТЧ.Сумма				 = СтрТЧ.СуммаСНДС;    
		СтрТЧ.СуммаНДС			 = Стр.СуммаНДС;
		СтрТЧ.СтавкаНДС			 = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");
		СтрТЧ.Склад				 = ДокументОбъект.Склад;
		 
	КонецЦикла;
	
	Для каждого Стр Из СтруктураДанных.Услуги Цикл
		
		СтрТЧ = ДокументОбъект.Товары.Добавить();
		СтрТЧ.Номенклатура		 = Справочники.Номенклатура.ПолучитьСсылку(Стр.Номенклатура);
		СтрТЧ.Количество		 = Стр.Количество;
		СтрТЧ.КоличествоУпаковок = Стр.Количество;
		СтрТЧ.Цена				 = Стр.Цена;
		СтрТЧ.СуммаСНДС			 = Стр.Сумма;
		СтрТЧ.Сумма				 = СтрТЧ.СуммаСНДС;    
		СтрТЧ.СуммаНДС			 = Стр.СуммаНДС;
		СтрТЧ.СтавкаНДС			 = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");;
		//СтрТЧ.Склад				 = ДокументОбъект.Склад;
		//СтрТЧ.РасходныйОрдер	 = РасходныйОрдерДокумента;
		
	КонецЦикла;
	
	Если ДокументОбъект.ПоступлениеПоЗаказам Тогда  
		ОтобратьПоЗаказу = ?(ЗначениеЗаполнено(ДокументОбъект.ЗаказПоставщику), Истина, Ложь);
		ПривязатьСтрокиПоступленияКЗаказамПоставщикам(ДокументОбъект, ОтобратьПоЗаказу);	
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если ДокументОбъект.Проведен = Истина И СтруктураДанных.Проведен = Ложь Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ИначеЕсли ДокументОбъект.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Попытка   
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;

		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ПривязатьСтрокиПоступленияКЗаказамПоставщикам(Объект, ОтобратьПоЗаказу)
	
	Если Не ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КодСтроки = 0
		|	И Товары.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказы.ЗаказПоставщику.Сделка    КАК Сделка,
		|	ТаблицаЗаказы.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика            КАК Характеристика,
		|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
		|	ТаблицаЗаказы.Склад                     КАК Склад,
		|	ТаблицаЗаказы.Назначение                КАК Назначение,
		|	СУММА(ТаблицаЗаказы.КОформлению)        КАК КОформлениюОстаток
		|ПОМЕСТИТЬ
		|	ЗаказыПоставщикам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыОстатки.ЗаказПоставщику        КАК ЗаказПоставщику,
		|		ЗаказыОстатки.Номенклатура           КАК Номенклатура,
		|		ЗаказыОстатки.Характеристика         КАК Характеристика,
		|		ЗаказыОстатки.КодСтроки              КАК КодСтроки,
		|		ЗаказыОстатки.Склад                  КАК Склад,
		|		ЕСТЬNULL(ТоварыЗаказа.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|		ЗаказыОстатки.КОформлениюОстаток     КАК КОформлению
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|				ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
		|					ЗаказПоставщику  = &ЗаказПоставщику
		|				ИНАЧЕ
		|					ЗаказПоставщику.Партнер = &Партнер
		|					И ЗаказПоставщику.Контрагент = &Контрагент
		|					И ЗаказПоставщику.Договор = &Договор
		|					И ЗаказПоставщику.Организация = &Организация
		|					И ЗаказПоставщику.ВариантПриемкиТоваров = &ВариантПриемкиТоваров
		|					И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|					И ЗаказПоставщику.Соглашение = &Соглашение
		|					И (ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|						&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
		|					И ЗаказПоставщику.НалогообложениеНДС = &НалогообложениеНДС
		|					И ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|					И ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
		|					И ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|					И ЗаказПоставщику.ТребуетсяЗалогЗаТару = &ТребуетсяЗалогЗаТару
		|				КОНЕЦ
		|				И
		|				ВЫБОР
		|					КОГДА
		|						ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА
		|						Склад В ИЕРАРХИИ (&Склад) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИНАЧЕ
		|						Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|				КОНЕЦ
		|			И (Номенклатура, Характеристика) В
		|			(ВЫБРАТЬ
		|				Товары.Номенклатура КАК Номенклатура,
		|				Товары.Характеристика КАК Характеристика
		|			ИЗ
		|				Товары КАК Товары)
		|			) КАК ЗаказыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
		|		ПО ТоварыЗаказа.Ссылка = ЗаказыОстатки.ЗаказПоставщику
		|		И ТоварыЗаказа.КодСтроки = ЗаказыОстатки.КодСтроки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗаказыДвижения.ЗаказПоставщику,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.КодСтроки,
		|		ЗаказыДвижения.Склад,
		|		ЕСТЬNULL(ТоварыЗаказа.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|		ВЫБОР КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				-ЗаказыДвижения.КОформлению
		|			ИНАЧЕ
		|				ЗаказыДвижения.КОформлению
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыДвижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
		|		ПО ТоварыЗаказа.Ссылка = ЗаказыДвижения.ЗаказПоставщику
		|		И ТоварыЗаказа.КодСтроки = ЗаказыДвижения.КодСтроки
		|
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказыДвижения.ЗаказПоставщику = &ЗаказПоставщику
		|		ИНАЧЕ
		|			ЗаказыДвижения.ЗаказПоставщику.Партнер = &Партнер
		|			И ЗаказыДвижения.ЗаказПоставщику.Контрагент = &Контрагент
		|			И ЗаказыДвижения.ЗаказПоставщику.Договор = &Договор
		|			И ЗаказыДвижения.ЗаказПоставщику.Организация = &Организация
		|			И ЗаказыДвижения.ЗаказПоставщику.ВариантПриемкиТоваров = &ВариантПриемкиТоваров
		|			И ЗаказыДвижения.ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|			И ЗаказыДвижения.ЗаказПоставщику.Соглашение = &Соглашение
		|			И (ЗаказыДвижения.ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|				&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
		|			И ЗаказыДвижения.ЗаказПоставщику.НалогообложениеНДС = &НалогообложениеНДС
		|			И ЗаказыДвижения.ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|			И ЗаказыДвижения.ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
		|			И ЗаказыДвижения.ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|			И ЗаказыДвижения.ЗаказПоставщику.ТребуетсяЗалогЗаТару = &ТребуетсяЗалогЗаТару
		|		КОНЕЦ
		|		И ЗаказыДвижения.Активность
		|				И ВЫБОР
		|					КОГДА
		|						ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА
		|						ЗаказыДвижения.Склад В ИЕРАРХИИ (&Склад) ИЛИ ЗаказыДвижения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИНАЧЕ
		|						ЗаказыДвижения.Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|				КОНЕЦ
		|			И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
		|			(ВЫБРАТЬ
		|				Товары.Номенклатура КАК Номенклатура,
		|				Товары.Характеристика КАК Характеристика
		|			ИЗ
		|				Товары КАК Товары)
		|	) КАК ТаблицаЗаказы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаЗаказы.ЗаказПоставщику,
		|		ТаблицаЗаказы.Номенклатура,
		|		ТаблицаЗаказы.Характеристика,
		|		ТаблицаЗаказы.КодСтроки,
		|		ТаблицаЗаказы.Склад,
		|		ТаблицаЗаказы.Назначение
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*)                        КАК КоличествоДублей,
		|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика     КАК Характеристика,
		|	ЗаказыПоставщикам.Склад              КАК Склад
		|ПОМЕСТИТЬ
		|	ДублиТоваров
		|ИЗ
		|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|ВЫБРАТЬ
		|	ЗаказыПоставщикам.Сделка             КАК Сделка,
		|	ЗаказыПоставщикам.ЗаказПоставщику    КАК ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика     КАК Характеристика,
		|	ЗаказыПоставщикам.КодСтроки          КАК КодСтроки,
		|	ЗаказыПоставщикам.Склад              КАК Склад,
		|	ЗаказыПоставщикам.Назначение         КАК Назначение,
		|	ЗаказыПоставщикам.КОформлениюОстаток КАК КОформлениюОстаток,
		|	0                                    КАК Распределено,
		|	ДублиТоваров.КоличествоДублей        КАК КоличествоДублей
		|ИЗ
		|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДублиТоваров
		|ПО
		|	ЗаказыПоставщикам.Номенклатура = ДублиТоваров.Номенклатура
		|	И ЗаказыПоставщикам.Характеристика = ДублиТоваров.Характеристика
		|	И ЗаказыПоставщикам.Склад = ДублиТоваров.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ПО
		|	ЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикам.ЗаказПоставщику
		|	И ЗаказПоставщикуТовары.КодСтроки = ЗаказыПоставщикам.КодСтроки
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ЗаказПоставщикуТовары.НомерСтроки,
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика,
		|	ЗаказПоставщикуТовары.Склад,
		|	ЗаказПоставщикуТовары.ДатаПоступления
		|");
		
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));

	Запрос.УстановитьПараметр("ЗаказПоставщику",           Объект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Партнер",                   Объект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",                   Объект.Договор);
	Запрос.УстановитьПараметр("Организация",               Объект.Организация);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Или
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.Договор.ХозяйственнаяОперация);
	КонецЕсли;
	Запрос.УстановитьПараметр("Соглашение",                Объект.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",      Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВариантПриемкиТоваров",     Объект.ВариантПриемкиТоваров);
	Запрос.УстановитьПараметр("НалогообложениеНДС",        Объект.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",           Объект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",           Объект.ПорядокРасчетов);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару",      Объект.ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("Склад",                     Объект.Склад);
	Запрос.УстановитьПараметр("Регистратор",               Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",          ОтобратьПоЗаказу);
	
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказПоставщику"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Склад");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказПоставщику");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Сделка");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Назначение");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Склад",          Выборка.Склад);
		СтруктураПоиска.Вставить("Назначение",     Выборка.Назначение);
		СтруктураПоиска.Вставить("КодСтроки",      0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
				
				КоличествоВСтроке = ТекСтрока.Количество;
				
				Если КоличествоВСтроке > НераспределенноеКоличество Тогда
					ТекСтрока.Количество = НераспределенноеКоличество;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено);
				КонецЕсли;
				
				НераспределенноеКоличество = НераспределенноеКоличество - КоличествоВСтроке;
				
				Если НераспределенноеКоличество < 0 Тогда
					НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "КодСтроки");
					НоваяСтрока.Количество = -НераспределенноеКоличество;
					
					НоваяСтрокаТовары = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ТекСтрока, , "КодСтроки,ЗаказПоставщику");
					НоваяСтрокаТовары.Количество = -НераспределенноеКоличество;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
				ИначеЕсли НераспределенноеКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества.
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают.
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
		
		Для Каждого НераспределеннаяСтрока Из ТаблицаНераспределенныхТоваров Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодСтроки", 0);
			СтруктураПоиска.Вставить("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
			СтруктураПоиска.Вставить("Номенклатура",   НераспределеннаяСтрока.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", НераспределеннаяСтрока.Характеристика);
			СтруктураПоиска.Вставить("Склад",          НераспределеннаяСтрока.Склад);
			СтруктураПоиска.Вставить("Назначение",     НераспределеннаяСтрока.Назначение);
			
			СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				
				Если СтрокаТовары.Количество = НераспределеннаяСтрока.Количество Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					НераспределеннаяСтрока.Количество = 0;
				ИначеЕсли СтрокаТовары.Количество > НераспределеннаяСтрока.Количество Тогда
					Разница = СтрокаТовары.Количество - НераспределеннаяСтрока.Количество;
					
					НоваяСтрокаТовары = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Количество = Разница;
					СтрокиТовары.Добавить(НоваяСтрокаТовары);
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение,Количество");
					
					НераспределеннаяСтрока.Количество = 0;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
					
				ИначеЕсли СтрокаТовары.Количество < НераспределеннаяСтрока.Количество Тогда
					Разница = НераспределеннаяСтрока.Количество - СтрокаТовары.Количество;
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					НераспределеннаяСтрока.Количество = Разница;
					
				КонецЕсли;
				
				Если НераспределеннаяСтрока.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьОбъектыПакетаДанныхНСИ_КорректировкаРеализации(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОрганизацияСсылка =  ПолучитьОрганизацию(СтруктураДанных.Организация);
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументГУИД = СтруктураДанных.ГУИД;
	ДокументСсылка = Документы.КорректировкаРеализации.ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	ЭтоНовый = Ложь;
	Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
	    ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе   
		ЭтоНовый = Истина;
		ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
		
	ДокументОбъект.ЦПЗ_флОтразитьвУУ = СтруктураДанных.ЦПЗ_флОтразитьвУУ;

	ДокументОбъект.Организация = ОрганизацияСсылка;
	
	ВидКорректировки = НайтиПеречисление("ХозяйственныеОперации", СтруктураДанных.ВидОперации);
	Если НЕ ЗначениеЗаполнено(ВидКорректировки) Тогда
		ВидКорректировки = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;	
	КонецЕсли;
	
	ДокументОбъект.ВидКорректировки = ВидКорректировки;
	
	ДокументОбъект.ДокументОснование = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(СтруктураДанных.ДокументРеализации);
	ДокументОбъект.НалогообложениеНДС = ДокументОбъект.ДокументОснование.НалогообложениеНДС;
	ДокументОбъект.Валюта = ДокументОбъект.ДокументОснование.Валюта;
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.ДокументОснование.ВалютаВзаиморасчетов;
	
	ДокументОбъект.Номер = СтруктураДанных.Номер;
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.СуммаДокумента = СтруктураДанных.СуммаДокумента;
	ДокументОбъект.Склад = Справочники.Склады.ПолучитьСсылку(СтруктураДанных.СкладГУИД);
	
	ДокументОбъект.ДатаПлатежа = ДокументОбъект.Дата;
	
	ДокументОбъект.ЦенаВключаетНДС = СтруктураДанных.СуммаВключаетНДС;
	
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Контрагент.ГУИД
																, СтруктураДанных.Контрагент.ИНН
																, СтруктураДанных.Контрагент.КПП)
													);
	//	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДокументОбъект.Партнер = ДокументОбъект.Контрагент.Партнер;
	КонецЕсли; 
	
	СтруктураДанных.Вставить("КонтрагентСсылка", ДокументОбъект.Контрагент);
	
	ДокументОбъект.Договор = ПолучитьДоговор(СтруктураДанных.Договор, ДокументОбъект.Контрагент);
	ДокументОбъект.Комментарий = "Загружено из БП "+ТекущаяДата();
	//ДокументОбъект.Организация = ОрганизацияСсылка;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Расхождения.Очистить();
	
	ТЧ = СтруктураДанных.Товары;
	Для Каждого Стр Из ТЧ Цикл
		СтрТ = ДокументОбъект.Товары.Добавить();
		
		СтрТ.КодСтроки = СтрТ.НомерСтроки;
		
		Если (Стр.Сумма - Стр.СуммаДоИзменения) >= 0
				ИЛИ (Стр.Количество - Стр.КоличествоДоИзменения) >= 0 
		Тогда 
			ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки  
		Иначе	
			ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки  
        КонецЕсли;
		
		СтрТ.ВариантОтражения = ВариантОтражения;
		СтрТ.ЗаказКлиента = ДокументОбъект.ДокументОснование.ЗаказКлиента;
		СтрТ.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Стр.НоменклатураГУИД);  
		СтрТ.ПартияТовара = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(Стр.ПартияТовараГУИД);	
		СтрТ.Упаковка = СтрТ.Номенклатура.ЕдиницаИзмерения;
		СтрТ.КоличествоУпаковок = Стр.Количество; 
		СтрТ.Количество = Стр.Количество;
		СтрТ.Цена = Стр.Цена;
		СтрТ.Сумма = Стр.Сумма;
		СтрТ.СтавкаНДС = НайтиПеречисление("СтавкиНДС", Стр.СтавкаНДС);
		СтрТ.СуммаНДС = Стр.СуммаНДС;
		
		СуммаСНДС = ?(СтруктураДанных.СуммаВключаетНДС, Стр.Сумма, Стр.Сумма + Стр.СуммаНДС);
		СуммаСНДСДоИзменения = ?(СтруктураДанных.СуммаВключаетНДС, Стр.СуммаДоИзменения, Стр.СуммаДоИзменения + Стр.СуммаНДСДоИзменения);
		СтрТ.СуммаСНДС = СуммаСНДС;
		
		СтрТ.Склад = Справочники.Склады.ПолучитьСсылку(СтруктураДанных.СкладГУИД);
		
	КонецЦикла;
	
	Попытка
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина; 
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Документы.КорректировкаРеализации.ЗаполнитьРасхождения(ДокументОбъект);
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь; 
		ДокументОбъект.Проведен = СтруктураДанных.Проведен;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если ДокументОбъект.Проведен = Истина И СтруктураДанных.Проведен = Ложь Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ИначеЕсли ДокументОбъект.ПометкаУдаления = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Попытка   
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен И ДокументОбъект.Ссылка.Проведен = Истина Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;

		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
      
Процедура СоздатьОбъектыПакетаДанныхНСИ_СписаниеБезналичныхДенежныхСредств(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОрганизацияСсылка =  ПолучитьОрганизацию(СтруктураДанных.Организация);
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументГУИД = СтруктураДанных.ГУИД;
	ДокументСсылка = Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("УТ-000005");
	Организация = ПолучитьОрганизацию(СтруктураДанных.Организация); //Справочники.Организации.НайтиПоРеквизиту("ИНН","4205352064");
	СтавкаНДСпоУмолчанию = Перечисления.СтавкиНДС.НДС20;
	
	БанковскиеСчетаОрганизаций = Справочники.БанковскиеСчетаОрганизаций.Выбрать(,Организация);
	БанковскиеСчетаОрганизаций.Следующий();
	БанковскийСчетОрганизаций = БанковскиеСчетаОрганизаций.Ссылка;
    	
	ЭтоНовый = Истина;
	Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
		ЭтоНовый = Ложь;
	КонецЕсли;
    	
	Если НЕ ЭтоНовый Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		//ЕстьОснованиеПлатежа = Ложь;
		//Если СтруктураДанных.ТипОбъекта = "СписаниеСРасчетногоСчета"
		//		И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0 Тогда
		//		
		//	Для каждого СтрТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		//		ЗначениеЗаполнено(СтрТЧ.ОснованиеПлатежа);
		//		ЕстьОснованиеПлатежа = ЗначениеЗаполнено(СтрТЧ.ОснованиеПлатежа);
		//	Конеццикла;
		//		
		//КонецЕсли;
		//
		//Если ЕстьОснованиеПлатежа Тогда
		//	ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
		//							,СтруктураДанных.ВидОбъекта
		//							,СтруктураДанных.ТипОбъекта
		//							,СтруктураДанных.ЭтоДанныеНабораЗаписей
		//							,СтруктураДанных.ГУИД);
		//	Возврат;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;
	ДокументОбъект.Организация = ОрганизацияСсылка;
	ДокументОбъект.ХозяйственнаяОперация = ВидХозяйственнойОперации_БезналичныхДенежныхСредств(СтруктураДанных.ВидОперации);//НайтиЗначениеПеречисления(СтруктураДанных.ВидОперации, "ХозяйственныеОперации");
	ДокументОбъект.ОчередностьПлатежа = СтруктураДанных.ОчередностьПлатежа;
	ДокументОбъект.ВидПлатежа = СтруктураДанных.ВидПлатежа;
	ДокументОбъект.Номер = СтруктураДанных.Номер;
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.ДатаВходящегоДокумента = СтруктураДанных.ДатаВходящегоДокумента;
	ДокументОбъект.НомерВходящегоДокумента = СтруктураДанных.НомерВходящегоДокумента;
	ДокументОбъект.Валюта = ПолучитьВалюту(СтруктураДанных);
	ДокументОбъект.ПроведеноБанком = НЕ СтруктураДанных.НеПодтвержденоВыпискойБанка;
	ДокументОбъект.ДатаПроведенияБанком = ДокументОбъект.Дата;
	ДокументОбъект.НазначениеПлатежа = СтруктураДанных.НазначениеПлатежа;
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Контрагент.ГУИД
																, СтруктураДанных.Контрагент.ИНН
																, СтруктураДанных.Контрагент.КПП)
													);
	
	СтруктураДанных.Вставить("КонтрагентСсылка", ДокументОбъект.Контрагент);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДокументОбъект.Партнер = ДокументОбъект.Контрагент.Партнер;
	КонецЕсли;
	
	ДокументОбъект.Договор                   = ПолучитьДоговор(СтруктураДанных.Договор, СтруктураДанных.КонтрагентСсылка);
	ДокументОбъект.СуммаДокумента            = СтруктураДанных.СуммаДокумента;
	ДокументОбъект.ТипПлатежногоДокумента    = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	ДокументОбъект.БанковскийСчет            = БанковскийСчетОрганизаций;
	ДокументОбъект.КратностьКурсаКонвертации = 1;
	ДокументОбъект.КурсКонвертации           = 1;
    
	ДокументОбъект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчет(СтруктураДанных.СчетКонтрагента.ГУИД
												,СтруктураДанных.СчетКонтрагента.НомерСчета
												,СтруктураДанных.КонтрагентСсылка
												,СтруктураДанных.СчетКонтрагента.БИК); 
	//
	ЗаявкаНаРасходованиеДенежныхСредств = ПолучитьЗаявкаНаРасходованиеДенежныхСредств(СтруктураДанных);
	ДокументОснование = ЗаявкаНаРасходованиеДенежныхСредств.ОбъектРасчетов;
	
	РасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
	РасшифровкаПлатежа.Очистить();
	Для Каждого Стр Из СтруктураДанных.РасшифровкаПлатежа Цикл
		СтрТч = РасшифровкаПлатежа.Добавить();  
		СтрТч.Организация = ОрганизацияСсылка;
		СтрТч.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		СтрТч.Партнер = ДокументОбъект.Партнер;
		СтрТч.Заказ = ДокументОснование; 
		СтрТч.Сумма = Стр.СуммаПлатежа;
		СтрТч.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
		СтрТч.СуммаВзаиморасчетов = Стр.СуммаВзаиморасчетов;
		СтрТч.Организация = ДокументОбъект.Организация;
		СтрТч.СтавкаНДС = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");
		СтрТч.СуммаНДС = Стр.СуммаНДС;
	КонецЦикла;
	
	
	Комментарий = "";
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Договор)Тогда
		Комментарий = "Загружено из БП " + ТекущаяДата() + ", договор № " + СтруктураДанных.Договор.ДоговорНомер + " от " + СтруктураДанных.Договор.ДоговорДата;
	Иначе
		Комментарий = "Загружено из БП "+ ТекущаяДата();
	КонецЕсли;
	ДокументОбъект.Комментарий = Комментарий;
	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Попытка   
				
		ЗаписьДокумента = РежимЗаписиДокумента.Запись;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(ЗаписьДокумента);
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
      
Процедура СоздатьОбъектыПакетаДанныхНСИ_ПоступлениеНаРасчетныйСчет(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	ОрганизацияСсылка = ПолучитьОрганизацию(СтруктураДанных.Организация);
	ВалютаРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументГУИД = СтруктураДанных.ГУИД;
	ДокументСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.ПолучитьСсылку(СтруктураДанных.ГУИД);
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("УТ-000005");
	Организация = ПолучитьОрганизацию(СтруктураДанных.Организация); //Справочники.Организации.НайтиПоРеквизиту("ИНН","4205352064");
	СтавкаНДСпоУмолчанию = Перечисления.СтавкиНДС.НДС20;
	
	БанковскиеСчетаОрганизаций = Справочники.БанковскиеСчетаОрганизаций.Выбрать(,Организация);
	БанковскиеСчетаОрганизаций.Следующий();
	БанковскийСчетОрганизаций = БанковскиеСчетаОрганизаций.Ссылка;
    	
	ЭтоНовый = Истина;
	Если СокрЛП(ДокументСсылка.ВерсияДанных) <> "" Тогда
		ЭтоНовый = Ложь;
	КонецЕсли;
    	
	Если НЕ ЭтоНовый Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		//ЕстьОснованиеПлатежа = Ложь;
		//Если СтруктураДанных.ТипОбъекта = "СписаниеСРасчетногоСчета"
		//		И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0 Тогда
		//		
		//	Для каждого СтрТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		//		ЗначениеЗаполнено(СтрТЧ.ОснованиеПлатежа);
		//		ЕстьОснованиеПлатежа = ЗначениеЗаполнено(СтрТЧ.ОснованиеПлатежа);
		//	Конеццикла;
		//		
		//КонецЕсли;
		//
		//Если ЕстьОснованиеПлатежа Тогда
		//	ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
		//							,СтруктураДанных.ВидОбъекта
		//							,СтруктураДанных.ТипОбъекта
		//							,СтруктураДанных.ЭтоДанныеНабораЗаписей
		//							,СтруктураДанных.ГУИД);
		//	Возврат;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	КонецЕсли;
	
	ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
	ДокументОбъект.Проведен = СтруктураДанных.Проведен;
	ДокументОбъект.Организация = ОрганизацияСсылка;
	ДокументОбъект.ХозяйственнаяОперация = ВидХозяйственнойОперации_БезналичныхДенежныхСредств(СтруктураДанных.ВидОперации);//НайтиЗначениеПеречисления(СтруктураДанных.ВидОперации, "ХозяйственныеОперации");
	//ДокументОбъект.ОчередностьПлатежа = СтруктураДанных.ОчередностьПлатежа;
	//ДокументОбъект.ВидПлатежа = СтруктураДанных.ВидПлатежа;
	ДокументОбъект.Номер = СтруктураДанных.Номер;
	ДокументОбъект.Дата = СтруктураДанных.Дата;
	ДокументОбъект.ДатаВходящегоДокумента = СтруктураДанных.ДатаВходящегоДокумента;
	ДокументОбъект.НомерВходящегоДокумента = СтруктураДанных.НомерВходящегоДокумента;
	ДокументОбъект.Валюта = ПолучитьВалюту(СтруктураДанных);
	ДокументОбъект.ПроведеноБанком = Истина; //НЕ СтруктураДанных.НеПодтвержденоВыпискойБанка;
	ДокументОбъект.ДатаПроведенияБанком = ДокументОбъект.Дата;
	ДокументОбъект.НазначениеПлатежа = СтруктураДанных.НазначениеПлатежа;
	ДокументОбъект.Контрагент = ПолучитьКонтрагента(Новый Структура("КонтрагентГУИД, КонтрагентИНН, КонтрагентКПП"
																, СтруктураДанных.Контрагент.ГУИД
																, СтруктураДанных.Контрагент.ИНН
																, СтруктураДанных.Контрагент.КПП)
													);
	
	СтруктураДанных.Вставить("КонтрагентСсылка", ДокументОбъект.Контрагент);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДокументОбъект.Партнер = ДокументОбъект.Контрагент.Партнер;
	КонецЕсли;
	
	ДокументОбъект.Договор                   = ПолучитьДоговор(СтруктураДанных.Договор, СтруктураДанных.КонтрагентСсылка);
	ДокументОбъект.СуммаДокумента            = СтруктураДанных.СуммаДокумента;
	ДокументОбъект.ТипПлатежногоДокумента    = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	ДокументОбъект.БанковскийСчет            = БанковскийСчетОрганизаций;
	ДокументОбъект.КратностьКурсаКонвертации = 1;
	ДокументОбъект.КурсКонвертации           = 1;
    
	ДокументОбъект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчет(СтруктураДанных.СчетКонтрагента.ГУИД
												,СтруктураДанных.СчетКонтрагента.НомерСчета
												,СтруктураДанных.КонтрагентСсылка
												,СтруктураДанных.СчетКонтрагента.БИК); 
	//
	//ЗаявкаНаРасходованиеДенежныхСредств = ПолучитьЗаявкаНаРасходованиеДенежныхСредств(СтруктураДанных);
	//ДокументОснование = ЗаявкаНаРасходованиеДенежныхСредств.ОбъектРасчетов;
	
	РасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
	РасшифровкаПлатежа.Очистить();
	Для Каждого Стр Из СтруктураДанных.РасшифровкаПлатежа Цикл
		СтрТч = РасшифровкаПлатежа.Добавить();  
		СтрТч.Организация = ОрганизацияСсылка;
		СтрТч.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		СтрТч.Партнер = ДокументОбъект.Партнер;
		//СтрТч.Заказ = ДокументОснование; 
		СтрТч.Сумма = Стр.СуммаПлатежа;
		СтрТч.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
		СтрТч.СуммаВзаиморасчетов = Стр.СуммаВзаиморасчетов;
		СтрТч.Организация = ДокументОбъект.Организация;
		СтрТч.СтавкаНДС = НайтиЗначениеПеречисления(Стр.СтавкаНДС, "СтавкиНДС");
		СтрТч.СуммаНДС = Стр.СуммаНДС;
	КонецЦикла;
	
	Комментарий = "";
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Договор)Тогда
		Комментарий = "Загружено из БП " + ТекущаяДата() + ", договор № " + СтруктураДанных.Договор.ДоговорНомер + " от " + СтруктураДанных.Договор.ДоговорДата;
	Иначе
		Комментарий = "Загружено из БП "+ ТекущаяДата();
	КонецЕсли;
	ДокументОбъект.Комментарий = Комментарий;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка   
		
		ЗаписьДокумента = РежимЗаписиДокумента.Запись;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(ЗаписьДокумента);
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_ЦПЗ_ПартииТовара(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	СправочникСсылка = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(СтруктураДанных.ГУИД);//НайтиНоменклатуруПоГУИД(СтруктураДанных.ГУИД);
	
	СправочникОбъект = Неопределено;
	
	Если СокрЛП(СправочникСсылка.ВерсияДанных) = "" Тогда
		
		СправочникОбъект = Справочники.ЦПЗ_ПартииТовара.СоздатьЭлемент();				
		СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);
		
	Иначе
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СправочникОбъект.Наименование = СтруктураДанных.Наименование;
	//СправочникОбъект.Код = СокрЛП(СтруктураДанных.Код);				
	
	СправочникОбъект.ДатаПартии = СтруктураДанных.ДатаПартии;
	СправочникОбъект.СрокГодности = СтруктураДанных.СрокГодности;
	СправочникОбъект.ДатаИзготовления = СтруктураДанных.ДатаИзготовления;
	СправочникОбъект.ДатаОкончанияСрокаГодности = СтруктураДанных.ДатаОкончанияСрокаГодности;
	
	СправочникОбъект.Владелец = НайтиНоменклатуруПоГУИД(СтруктураДанных.Владелец);
	
	Попытка
		СправочникОбъект.Записать();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбъектыПакетаДанныхНСИ_ДанныеНабораЗаписей(СтруктураДанных, ИсходящийПакетДанных = Неопределено)
	
	Отказ = Ложь;
	ЭтоНовый = Истина;
	
	Попытка
		ДатаСреза = Дата(СтруктураДанных.Дата);
	Исключение
		Сообщить("Ошибка преобразования: " + СтруктураДанных.Дата);
		Отказ = истина;
	КонецПопытки;
	
	Операция = НайтиЗначениеПеречисления(СтруктураДанных.ВидДвиженияДокумента, "ЦПЗ_ОперацияДокументаДвижения");
	Организация = ПолучитьОрганизацию(СтруктураДанных.Организация);
	
	ДокументСсылка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГУИД", СокрЛП(СтруктураДанных.ГУИД));
	Запрос.УстановитьПараметр("Операция", Операция);
	//Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦПЗ_ДвижениеНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЦПЗ_ДвижениеНоменклатуры КАК ЦПЗ_ДвижениеНоменклатуры
		|ГДЕ
		|	ЦПЗ_ДвижениеНоменклатуры.ГУИД = &ГУИД
		|	";
	//
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ЭтоНовый = Ложь;
	КонецЦикла;
	
	ДокументОбъект = Документы.ЦПЗ_ДвижениеНоменклатуры.СоздатьДокумент();
	Если ДокументСсылка <> Неопределено Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект(); 
	КонецЕсли;
	Если СтруктураДанных.ПометкаУдаления Тогда
		
		ДокументОбъект.ГУИД = СокрЛП(СтруктураДанных.ГУИД);
		ДокументОбъект.ДатаЗагрузки = ТекущаяДата();

		ДокументОбъект.Дата = Дата(СтруктураДанных.Дата);
		ДокументОбъект.Номер = СокрЛП(СтруктураДанных.НомерДокумента);

		ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
		ДокументОбъект.Проведен = Ложь;
		Отказ = Истина;    
		
	Иначе
		
		ДокументОбъект.ПометкаУдаления = СтруктураДанных.ПометкаУдаления;
		ДокументОбъект.Проведен = СтруктураДанных.Проведен;
		ДокументОбъект.Операция = Операция;    
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ГУИД = СокрЛП(СтруктураДанных.ГУИД);
		ДокументОбъект.ДатаЗагрузки = ТекущаяДата();
		ДокументОбъект.ПредставлениеВнешнегоДокумента = СтруктураДанных.ПредставлениеВнешнегоДокумента;

		ДокументОбъект.Дата = Дата(СтруктураДанных.Дата);
		ДокументОбъект.Номер = СокрЛП(СтруктураДанных.НомерДокумента);
		
		Если ДокументОбъект.Дата >= ДАТА("20211001") Тогда
			ОтразитьВУУ = СоздатьОбъектыПакетаДанныхНСИ_ДанныеНабораЗаписей_ОперацияОтражаетсяВУУ(Операция);
			ДокументОбъект.ОтразитьвУУ = СтруктураДанных.ОтразитьВУУ ИЛИ ОтразитьВУУ;
		КонецЕсли;
		
		ТЧ = ДокументОбъект.ДвиженияСписком;
		ТЧ.Очистить();
		
		ИзменениеСтоимости = СтруктураДанных.ТипОбъекта = "МодернизацияОС";
		
		Если СтруктураДанных.Движения.Количество() = 0 Тогда
			Отказ = Истина;
		Иначе
			Движения = СтруктураДанных.Движения;
			Для Каждого СтрД Из Движения Цикл
				СтрТЧ = ТЧ.Добавить();
				
				СтрТЧ.ДатаДвижения = ДокументОбъект.Дата;
				Если СтрД.НоменклатураТип = "Номенклатура" Тогда     
					СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрД.Номенклатура);
				Иначе    
					СтрТЧ.Номенклатура = НайтиОсновноеСредствоПоГУИД(СтрД.Номенклатура);
				КонецЕсли;
				СтрТЧ.Склад = Справочники.Склады.Получитьссылку(СтрД.СкладМОЛГУИД);
				Если НЕ ИзменениеСтоимости Тогда
					СтрТЧ.Количество = СтрД.Количество;
				КонецЕсли;
				СтрТЧ.Сумма = СтрД.Сумма;
				СтрТЧ.СчетДт = СтрД.СчетДт;
				СтрТЧ.ДополнительнаяАналитика = НайтиДополнительнуюАналитикуУчета("", СтрД.СчетДт);
				
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ТЧ = ДокументОбъект.ДвижениеПартииТоваров;
			ТЧ.Очистить();
			Движения = СтруктураДанных.ДвижениеПартийТовара;
			Для Каждого СтрД Из Движения Цикл
				СтрТЧ = ТЧ.Добавить();
				
				СтрТЧ.ДатаДвижения = СтрД.Период;
				Если СтрД.НоменклатураТип = "Номенклатура" Тогда     
					СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрД.Номенклатура);
				Иначе    
					СтрТЧ.Номенклатура = НайтиОсновноеСредствоПоГУИД(СтрД.Номенклатура);
				КонецЕсли;
				СтрТЧ.Склад = Справочники.Склады.ПолучитьСсылку(СтрД.СкладМОЛГУИД);
				СтрТЧ.Партия = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(СтрД.ПартияГУИД);
				СтрТЧ.Количество = СтрД.Количество;
				СтрТЧ.ДополнительнаяАналитика = НайтиДополнительнуюАналитикуУчета("", СтрД.СчетУчета);
				
			КонецЦикла;
		Исключение
		КонецПопытки; 
		
		Попытка
			ТЧ = ДокументОбъект.РегистрацияЦенПартии;
			ТЧ.Очистить();
			Движения = СтруктураДанных.РегистрацияЦенПартийТовара;
			Для Каждого СтрД Из Движения Цикл
				СтрТЧ = ТЧ.Добавить();
				
				СтрТЧ.ДатаДвижения = СтрД.Период;
				Если СтрД.НоменклатураТип = "Номенклатура" Тогда     
					СтрТЧ.Номенклатура = НайтиНоменклатуруПоГУИД(СтрД.Номенклатура);
				Иначе    
					СтрТЧ.Номенклатура = НайтиОсновноеСредствоПоГУИД(СтрД.Номенклатура);
				КонецЕсли;
				СтрТЧ.Партия = Справочники.ЦПЗ_ПартииТовара.ПолучитьСсылку(СтрД.ПартияГУИД);
				СтрТЧ.Цена = СтрД.Цена;
				СтрТЧ.ЦенаБезНДС = СтрД.ЦенаБезНДС; 
				
			КонецЦикла;
		Исключение
		КонецПопытки; 
		
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если Отказ = Истина
			И ДокументОбъект.Ссылка.Пустая() Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	ИначеЕсли Отказ = Истина И ДокументОбъект.Проведен = Истина Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Попытка   
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если НЕ ДокументОбъект.Проведен
				ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ИсходящийПакетДанных
									,СтруктураДанных.ВидОбъекта
									,СтруктураДанных.ТипОбъекта
									,СтруктураДанных.ЭтоДанныеНабораЗаписей
									,СтруктураДанных.ГУИД
									,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьКодСтрокиТабличнойЧастиТовары(СтрокаТабличнойЧасти)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказКлиента) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаТабличнойЧасти.ЗаказКлиента);
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		Запрос.Текст = "Выбрать Стр.НомерСтроки Из Документ.ЗаказКлиента.Товары как Стр
						|ГДЕ Стр.Ссылка = &ЗаказКлиента
						|	И Стр.Номенклатура = &Номенклатура";
		//
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти.КодСтроки = Выборка.НомерСтроки;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Процедура ЗарегистрироватьОбъектКакЗагруженныйВПакетеДанныхНСИ(ПакетДанных, Вид, Тип, ЭтоДанныеНабораЗаписей = Ложь, ГУИД, ОписаниеОшибки = Неопределено)
	
	Если ПакетДанных <> Неопределено
			И ПакетДанных.Свойство("ЗагруженныеОбъекты") Тогда
			
		ЭлементПакета = Новый Структура();
		ЭлементПакета.Вставить("Вид", Вид);
		ЭлементПакета.Вставить("Тип", Тип);
		ЭлементПакета.Вставить("ЭтоДанныеНабораЗаписей", ЭтоДанныеНабораЗаписей);
		ЭлементПакета.Вставить("ГУИД", ГУИД);
		ЭлементПакета.Вставить("Отказ", НЕ ОписаниеОшибки = Неопределено);
		ЭлементПакета.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ПакетДанных.ЗагруженныеОбъекты.Добавить(ЭлементПакета);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьПакетДанныхНСИ(НаименованиеУзла, ПакетДанных) Экспорт
	
	Если ПакетДанных.Объекты.Количество() = 0 Тогда 
		Возврат Новый Структура("Отказ, ОписаниеОшибки, Результат", Истина, "Пакет передаваемых данных пустой.", Неопределено);
	КонецЕсли;
	
	ТекущийУзел = Справочники.УзлыПрямогоОбменаДанными.НайтиПоРеквизиту("ЭтотУзел", Истина);
	
	ДанныеУзлаПодключения = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоНаименованию(НаименованиеУзла);
	
	Прокси =  ИнициализацияСоединения(ДанныеУзлаПодключения);
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	хешИд = Обработки.УправлениеНастройкамиПрямогоОбмена.СформироватьХешИдентификаторУзла(СтрокаПодключения);
		
	Хранилище = Новый ХранилищеЗначения(ПакетДанных);
  
	Результат = Прокси.MessageEx(хешИд, Хранилище, "ЦПЗ_ОбменПакетамиНСИ");
	Результат = СериализаторXDTO.ПрочитатьXDTO(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Обмен_Весовая

Функция ОбновитьДанныеСтатусаОбъекта(ДанныеУзла, ДанныеДляОбработки) Экспорт 
	
	ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("ОК");
	ДанныеСобытия.Период = ДанныеДляОбработки.ДатаСтатуса;
	РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(ДанныеУзла, ДанныеСобытия);
	
КонецФункции

Функция Весовая_ОбменДанными(ДанныеУзла, ДанныеДляОбработки) Экспорт 
	
	ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("Весовая_НачалоПрямогоОбмена");
	РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(ДанныеУзла, ДанныеСобытия);
	
	ВесоваяОбмен_ЗагрузкаДанных(ДанныеУзла, ДанныеДляОбработки);
	Результат = ВесоваяОбмен_ВыгрузкаДанных(ДанныеУзла, ДанныеДляОбработки);
	
	ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("Весовая_ОкончаниеПрямогоОбмена");
	РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(ДанныеУзла, ДанныеСобытия);
	
	Возврат Результат;
	
КонецФункции

Функция ВесоваяОбмен_ЗагрузкаДанных(ДанныеУзла, ДанныеДляОбработки) Экспорт 
	
	ОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("ОбменСВесовой");
	ХранилищеОбработки = ОбработкаСсылка.ХранилищеОбработки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = КаталогВременныхФайлов()+"ОбработкаОбменСВесовой.epf";
	ДвоичныеДанные = ХранилищеОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
	ВнешняяОбработка.ЗагрузитьДанныеОтВесовойЧтениеXML(ДанныеДляОбработки);
		
	ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("Весовая_ЗагрузкаДанных");
	РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(ДанныеУзла, ДанныеСобытия);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецФункции

Функция ВесоваяОбмен_ВыгрузкаДанных(ДанныеУзла, ДанныеДляОбработки) Экспорт 
	
	ОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("ОбменСВесовой");
	ХранилищеОбработки = ОбработкаСсылка.ХранилищеОбработки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = КаталогВременныхФайлов()+"ОбработкаОбменСВесовой.epf";
	ДвоичныеДанные = ХранилищеОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
	Поток = ВнешняяОбработка.СформироватьФайлВыгрузкиВПотокДанныхНаСервере();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
	ДанныеСобытия = РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ПодготовитьСобытиеПрямогоОбмена("Весовая_ВыгрузкаДанных");
	РегистрыСведений.РегистрацияСобытийПрямогоОбменаДанными.ЗаписатьСобытиеПрямогоОбмена(ДанныеУзла, ДанныеСобытия);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	ЗначениеВозврата = Неопределено;
	
	Значение = Константы.СоздатьНабор(ИмяКонстанты);
	Значение.Прочитать();
	
	ЗначениеВозврата = Значение[ИмяКонстанты];	
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Возврат ИмяЗначенияПеречисления;
	
КонецФункции

Процедура ДополнитьЗаписьАтрибутами_СтандартныеПараметры(ДанныеДляОтправки, СсылкаНаОбъект, ЗарегистрированПоНаборуЗаписей = Ложь)
	
	Атрибуты = Новый Соответствие();
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		ВидОбъекта = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипЗнч(СсылкаНаОбъект));
		ТипОбъекта = МетаданныеОбъекта.Имя;
		ПометкаУдаления = Формат(СсылкаНаОбъект.ПометкаУдаления,"БЛ=0; БИ=1");
		мЗарегистрированПоНаборуЗаписей = Формат(ЗарегистрированПоНаборуЗаписей,"БЛ=0; БИ=1");
		
		Атрибуты.Вставить("ЭтоДанныеНабораЗаписей", Строка(мЗарегистрированПоНаборуЗаписей));
		Атрибуты.Вставить("ВидОбъекта", Строка(ВидОбъекта));
		Атрибуты.Вставить("ТипОбъекта", Строка(ТипОбъекта));
		Атрибуты.Вставить("ПометкаУдаления", Строка(ПометкаУдаления));
		
		Если ВидОбъекта = "Документы" Тогда
			Проведен = Формат(СсылкаНаОбъект.Проведен,"БЛ=0; БИ=1");
			Атрибуты.Вставить("Проведен", Строка(Проведен));
		КонецЕсли;
				
		МетаданныеОбъект = СсылкаНаОбъект.Метаданные();
		РеквизитыМетаданных = МетаданныеОбъект.Реквизиты;
		РеквизитОрганизация = РеквизитыМетаданных.Найти("Организация");
		Если РеквизитОрганизация <> Неопределено Тогда
			ВыгрузитьДанныеИзБП_Организация(Атрибуты, СсылкаНаОбъект.Организация);				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДляОтправки) = Тип("ЗаписьXML") Тогда
		Для Каждого Атрибут Из Атрибуты Цикл
			ДанныеДляОтправки.ЗаписатьАтрибут(Атрибут.Ключ, Атрибут.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДанныеДляОтправки) = Тип("Структура") Тогда
		Для Каждого Атрибут Из Атрибуты Цикл
			ДанныеДляОтправки.Вставить(Атрибут.Ключ, Атрибут.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодОКПД2(ОКПД2)
	
	ЗначениеВозврата = Справочники.КлассификаторОКПД2.НайтиПоНаименованию(ОКПД2.Наименование, Истина);
    Возврат ЗначениеВозврата;
	
КонецФункции

Функция СоздатьОбъектыПакетаДанныхНСИ_ДанныеНабораЗаписей_ОперацияОтражаетсяВУУ(Операция)
	
	ЗначениеВозврата = Ложь;
	
	Если  Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.ПередачаТоваров
		ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.ПередачаОборудованияВМонтаж 
		//ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.ПоступлениеНоменклатуры 
		ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.ПередачаМатериаловВЭксплуатацию
		ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.ДвижениеОС
		ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.АвансовыйОтчет
		ИЛИ Операция = Перечисления.ЦПЗ_ОперацияДокументаДвижения.РегламентнаяОперация
	Тогда
		ЗначениеВозврата = Истина;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;	
	
КонецФункции

Функция ПолучитьЗаявкаНаРасходованиеДенежныхСредств(СтруктураДанных, ИмяСвойства = "ЗаявкаНаРасходованиеДенежныхСредств") 
	
	Возврат Документы.ЦПЗ_ЗаявкаНаДенежныеСредства.ПолучитьСсылку(СтруктураДанных[ИмяСвойства]);
	
КонецФункции

Функция ПолучитьВалюту(СтруктураДанных, ИмяСвойства = "Валюта")
	
	ЗначениеВозврата = Справочники.Валюты.ПустаяСсылка();//Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если СтруктураДанных.Свойство(ИмяСвойства) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "Выбрать Т.Ссылка Из Справочник.Валюты как Т ГДЕ Т.КОД = &Код";// И Т.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Код", СтруктураДанных[ИмяСвойства].Код);
		//Запрос.УстановитьПараметр("Наименование", СтруктураДанных.Валюта.Наименование);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗначениеВозврата = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьОрганизацию(Организация) Экспорт
	
	ЗначениеВозврата = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВозврата) Тогда 
		
		ОрганизацияПоГУИД = Справочники.Организации.ПолучитьСсылку(новый УникальныйИдентификатор(Организация.ГУИД));
		Если СокрЛП(ОрганизацияПоГУИД.ВерсияДанных) = "" Тогда
			ОрганизацияПоГУИД = Справочники.Организации.ПустаяСсылка();	
		КонецЕсли;                                                     
		
		ОрганизацияПоРеквизитам = Справочники.Организации.ПустаяСсылка();
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка,
		|	1 КАК ИД
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(ВЫРАЗИТЬ(Организации.Наименование КАК СТРОКА(150))) = (ВЫРАЗИТЬ(&Наименование КАК СТРОКА(150)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.ИД КАК ИД
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИД";; 
		//
		Запрос.УстановитьПараметр("ИНН", Организация.ИНН);
		Запрос.УстановитьПараметр("КПП", Организация.КПП);
		Запрос.УстановитьПараметр("Наименование", Организация.Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОрганизацияПоРеквизитам = Выборка.Ссылка;		
		
		Если ЗначениеЗаполнено(ОрганизацияПоГУИД) Тогда
			ЗначениеВозврата = ОрганизацияПоГУИД;		
		КонецЕсли;                               
		Если ЗначениеЗаполнено(ОрганизацияПоРеквизитам) Тогда 
			ЗначениеВозврата = ОрганизацияПоРеквизитам;		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;	
	
КонецФункции  

Функция ПодготовитьДанныеОрганизации(СсылкаНаОбъект) Экспорт 
	
	ЗначениеВозврата = Новый Структура();   
	
	ЗначениеВозврата.Вставить("ГУИД",Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
	ЗначениеВозврата.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	ЗначениеВозврата.Вставить("Префикс", СсылкаНаОбъект.Префикс);  
	ЗначениеВозврата.Вставить("ИНН",Строка(СсылкаНаОбъект.ИНН));
	ЗначениеВозврата.Вставить("КПП",Строка(СсылкаНаОбъект.КПП)); 
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ВыгрузитьДанныеИзБП_Организация(ДанныеДляОтправки, СсылкаНаОбъект)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДляОтправки) = Тип("ЗаписьXML") Тогда
		ДанныеДляОтправки.ЗаписатьАтрибут("ОрганизацияГУИД",Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
		ДанныеДляОтправки.ЗаписатьАтрибут("ОрганизацияНаименование", СсылкаНаОбъект.Наименование); 
		ДанныеДляОтправки.ЗаписатьАтрибут("ОрганизацияПрефикс", СсылкаНаОбъект.Префикс);  
		ДанныеДляОтправки.ЗаписатьАтрибут("ОрганизацияИНН",Строка(СсылкаНаОбъект.ИНН));
		ДанныеДляОтправки.ЗаписатьАтрибут("ОрганизацияКПП",Строка(СсылкаНаОбъект.КПП));
	КонецЕсли;
	Если ТипЗнч(ДанныеДляОтправки) = Тип("Структура")
			ИЛИ ТипЗнч(ДанныеДляОтправки) = Тип("Соответствие") Тогда
		ДанныеДляОтправки.Вставить("ОрганизацияГУИД",Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
		ДанныеДляОтправки.Вставить("ОрганизацияНаименование", СсылкаНаОбъект.Наименование); 
		ДанныеДляОтправки.Вставить("ОрганизацияПрефикс", СсылкаНаОбъект.Префикс);  
		ДанныеДляОтправки.Вставить("ОрганизацияИНН",Строка(СсылкаНаОбъект.ИНН));
		ДанныеДляОтправки.Вставить("ОрганизацияКПП",Строка(СсылкаНаОбъект.КПП));
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОсновноеСредствоПоГУИД(ГУИД)
	
	Если СокрЛП(ГУИД) = "" Тогда
		Возврат Справочники.ЦПЗ_ОсновныеСредства.ПустаяСсылка();
	Иначе
		Возврат Справочники.ЦПЗ_ОсновныеСредства.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоГУИД(ГУИД)
	
	ЗначениеВозврата = Справочники.Номенклатура.ПустаяСсылка();
	
	Если СокрЛП(ГУИД) <> "" Тогда
		ЗначениеВозврата = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ГУИД)));
	КонецЕсли;
	
	Возврат ЗначениеВозврата; 
	
КонецФункции

Функция НайтиДополнительнуюАналитикуУчета(Наименование, СчетУчетаБУ)
	
	ЗначениеВозврата = Справочники.ЦПЗ_ДополнительнаяАналитикаУчетаДвиженияТоваров.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Данные.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЦПЗ_ДополнительнаяАналитикаУчетаДвиженияТоваров КАК Данные
	               |ГДЕ
	               |	Данные.ПометкаУдаления = ЛОЖЬ
	               |	И (Данные.Наименование = &Наименование
	               |			ИЛИ Данные.СчетУчетаБУ = &СчетУчетаБУ)";
	//
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование));
	Запрос.УстановитьПараметр("СчетУчетаБУ", СокрЛП(СчетУчетаБУ));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеВозврата = Выборка.Ссылка;	
	КонецЦикла;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
    
    МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
    
    Если МетаданныеТипа = Неопределено Тогда
        
        Возврат "УдалениеОбъекта";
        
    ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
        
        Возврат "РегистрыСведений";
        
    ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
        
        Возврат "Документы";
        
    ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
        
        Возврат "Справочники";    
        
    ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеТипа) Тогда
    
        Возврат "РегистрыНакопления";    
        
    ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеТипа) Тогда
    
        Возврат "РегистрыБухгалтерии";    
       
    Иначе
       
        Возврат "";
        
    КонецЕсли;
            
КонецФункции

Функция НайтиЗначениеПеречисления(ИмяПеречисления, ТипПеречисления) Экспорт
		
	мдПеречисление = Метаданные.Перечисления[ТипПеречисления];
	
	ЗначениеВозврата = ПредопределенноеЗначение("Перечисление." + ТипПеречисления + ".ПустаяСсылка");
		
	Если ТипПеречисления = "СтатусыКоммерческихПредложенийКлиентам" Тогда
		
		Если ИмяПеречисления = "Отклонено" Тогда
			ЗначениеВозврата =  Вычислить("Перечисления[ТипПеречисления]." + "Отменено");
			Возврат ЗначениеВозврата;
		КонецЕсли;
		
	КонецЕсли;	
	
	Имя = СокрЛП(ИмяПеречисления);
    Для Каждого Элемент из Метаданные.Перечисления[ТипПеречисления].ЗначенияПеречисления Цикл
		Если СокрЛП(Элемент.Синоним) = Имя
				ИЛИ Элемент.Имя = Имя Тогда
            ЗначениеВозврата = Вычислить("Перечисления[ТипПеречисления]." + Элемент.Имя);
        КонецЕсли;    
    КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ВидХозяйственнойОперации_БезналичныхДенежныхСредств(ВидОперации)
	
	Соответствие = Новый Соответствие();
	
	Соответствие.Вставить("ОплатаПоставщику", НайтиЗначениеПеречисления("ОплатаПоставщику", "ХозяйственныеОперации"));
	Соответствие.Вставить("Оплата поставщику", НайтиЗначениеПеречисления("ОплатаПоставщику", "ХозяйственныеОперации"));
	
	Соответствие.Вставить("ПрочиеРасчетыСКонтрагентами", НайтиЗначениеПеречисления("ПрочееПоступлениеДенежныхСредств", "ХозяйственныеОперации")); 
	Соответствие.Вставить("Прочие расчеты с контрагентами", НайтиЗначениеПеречисления("ПрочееПоступлениеДенежныхСредств", "ХозяйственныеОперации"));
	
	Соответствие.Вставить("ВозвратПокупателю", НайтиЗначениеПеречисления("ВозвратОплатыКлиенту", "ХозяйственныеОперации"));
	Соответствие.Вставить("Возврат покупателю", НайтиЗначениеПеречисления("ВозвратОплатыКлиенту", "ХозяйственныеОперации"));
	
	Соответствие.Вставить("ОплатаПокупателя", НайтиЗначениеПеречисления("ПоступлениеОплатыОтКлиента", "ХозяйственныеОперации"));
	Соответствие.Вставить("Оплата от покупателя", НайтиЗначениеПеречисления("ПоступлениеОплатыОтКлиента", "ХозяйственныеОперации"));
	
	Соответствие.Вставить("ВозвратОтПоставщика", НайтиЗначениеПеречисления("ВозвратДенежныхСредствОтПоставщика", "ХозяйственныеОперации"));
	Соответствие.Вставить("Возврат от поставщика", НайтиЗначениеПеречисления("ВозвратДенежныхСредствОтПоставщика", "ХозяйственныеОперации"));
	
	Возврат Соответствие.Получить(ВидОперации);
	
КонецФункции

Функция НайтиКонтрагентаПоПартнеру(Партнер)
	
	ЗначениеВозврата = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",партнер);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Контрагенты.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Контрагенты КАК Контрагенты
	                |ГДЕ
	                |	Контрагенты.Партнер = &Партнер";
	//
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	   ЗначениеВозврата = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьКонтрагента(СтруктураДокумента)
	
	СправочникСсылка = Справочники.Контрагенты.ПолучитьСсылку(СтруктураДокумента.КонтрагентГУИД);
	Если Сокрлп(СправочникСсылка.ИНН) = "" И СтруктураДокумента.КонтрагентИНН <> NULL Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИНН", СокрЛП(СтруктураДокумента.КонтрагентИНН));
		Запрос.УстановитьПараметр("ОтборПоКПП", Ложь); 
		
		Если СтруктураДокумента.Свойство("КонтрагентКПП") Тогда
			Запрос.УстановитьПараметр("ОтборПоКПП", Истина);
			Запрос.УстановитьПараметр("КПП", СокрЛП(СтруктураДокумента.КонтрагентКПП));
		КонецЕсли;
			
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ИНН = &ИНН
					   |	И Выбор когда &ОтборПоКПП = Истина  
					   |		Тогда Контрагенты.КПП = &КПП
					   |		Иначе Истина Конец";
		//
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Возврат СправочникСсылка; // пока так, грузить не будем  
		
	Иначе
		Возврат СправочникСсылка;
	КонецЕсли;

КонецФункции

Функция ПолучитьДоговор(СтруктураДанных, КонтрагентСсылка)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	ЗначениеВозврата = МенеджерСправочника.ПустаяСсылка(); 
	
	Если Не (СтруктураДанных.ДоговорНомер = "") Тогда
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Владелец
			|	И ДоговорыКонтрагентов.Номер = &Номер";
			//  
			
			Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
			Запрос.УстановитьПараметр("Номер", СтруктураДанных.ДоговорНомер);
			
			ВидДоговораОпределен = СтруктураДанных.Свойство("ВидДоговора");
			Запрос.УстановитьПараметр("ОтборПоТипуДоговора", ВидДоговораОпределен);
			Запрос.УстановитьПараметр("ТипДоговора", СтруктураДанных.ВидДоговора);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗначениеВозврата = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции
  
Функция НайтиПеречисление(вхИмяПеречисления, вхЗначенияПеречисления)
	
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[вхИмяПеречисления].ЗначенияПеречисления Цикл
        Если ЭлементПеречисления.Синоним = вхЗначенияПеречисления ИЛИ ЭлементПеречисления.Имя = вхЗначенияПеречисления Тогда
            Возврат Перечисления[вхИмяПеречисления][ЭлементПеречисления.Имя];
        КонецЕсли; 
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТипДоговораКонтрагента(Знач ВидДоговораСтрока)
	
	Если ВидДоговораСтрока = "СКомитентомНаЗакупку" Тогда
		ВидДоговораСтрока = "СКомитентом";	
	ИначеЕсли ВидДоговораСтрока = "СКомиссионеромНаЗакупку" Тогда
		ВидДоговораСтрока = "СКомиссионером";	
	КонецЕсли;
	
	ЗначениеВозврата = НайтиПеречисление("ТипыДоговоров", ВидДоговораСтрока); 
		
	Возврат ЗначениеВозврата;		
	
КонецФункции

Функция ПолучитьБанковскийСчет(ГУИД, НомерСчета, Контрагент, БикБанка)
	
	ЗначениеВозврата = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	
	СправочникСсылка = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьСсылку(новый УникальныйИдентификатор(СокрЛП(ГУИД)));
	Если Сокрлп(СправочникСсылка.ВерсияДанных) = "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НомерСчета", СокрЛП(НомерСчета));
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("БИКБанка", БикБанка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		               |ГДЕ
		               |	БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета
		               |	И БанковскиеСчетаКонтрагентов.Владелец = &контрагент
		               |	И БанковскиеСчетаКонтрагентов.БИКБанка = &БИКБанка
		               |	И БанковскиеСчетаКонтрагентов.ПометкаУдаления = Ложь";
		//
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеВозврата = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		ЗначениеВозврата = СправочникСсылка;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьБанкПоБИК(БИК)
	
	Запрос = новый запрос;
	Запрос.УстановитьПараметр("код", БИК);
	Запрос.Текст =   "ВЫБРАТЬ
	                |	КлассификаторБанков.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.КлассификаторБанков КАК КлассификаторБанков
	                |ГДЕ
	                |	КлассификаторБанков.Код = &Код";
	вв = Запрос.Выполнить().Выбрать();
	если вв.Следующий() Тогда
		возврат вв.ссылка;
	КонецЕсли;
	
	Возврат справочники.КлассификаторБанков.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьПродажнуюЦенуЗаказа(Заказ, Номенклатура)
	
	ЗначениеВозврата = 0;
	
	Если СокрЛП(Заказ) <> "" тогда
		СтрТч = Заказ.Товары.Найти(Номенклатура);
		Если СтрТч <> Неопределено тогда
			ЗначениеВозврата = СтрТч.Цена;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции
      
Процедура ПодобратьРеализациюПоРОТ(ДокументОбъект)
	
	СписокКАС = новый Массив;
	СписокКАС.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00000003"));
	СписокКАС.Добавить(Справочники.Номенклатура.НайтиПоКоду("00-00000005"));
	СписокКАС.Добавить(Справочники.Номенклатура.НайтиПоКоду("БП-00000001"));
	
	КоличествоКАС = 0;
	Для Каждого СтрТч из ДокументОбъект.Товары Цикл
		Если СписокКАС.Найти(СтрТч.Номенклатура) <> Неопределено Тогда
			ЭтоКАС = истина;
		Иначе 
			ЭтоКАС = Ложь;
		КонецЕсли;
		
		Если ЭтоКАС = Истина Тогда 

			
			КоличествоКАС = КоличествоКАС + СтрТч.Количество;
			
			Запрос = новый запрос;
			Запрос.УстановитьПараметр("дата1", НачалоДня(НачалоДня(ДокументОбъект.Дата)-1));
			Запрос.УстановитьПараметр("дата2", КонецДня(ДокументОбъект.Дата));
			Запрос.УстановитьПараметр("Номенклатура", СтрТч.Номенклатура);
			Запрос.УстановитьПараметр("Получатель", ДокументОбъект.Контрагент.Партнер);
			
			Запрос.Текст = "ВЫБРАТЬ
			                 |	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество) КАК Количество,
			                 |	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоБаза) КАК КоличествоБаза,
			                 |	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоФакт) КАК КоличествоФакт,
			                 |	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка
			                 |ИЗ
			                 |	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
			                 |ГДЕ
			                 |	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.ДатаОтгрузки МЕЖДУ &Дата1 И &дата2
			                 |	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура = &Номенклатура
			                 |	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.Получатель = &Получатель
			                 |
			                 |СГРУППИРОВАТЬ ПО
			                 |	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка";
			//
			РезультатЗапроса = Запрос.Выполнить();
			
			НетРасходногоОрдера = Истина;
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗапроса = РезультатЗапроса.Выбрать();
				ВыборкаЗапроса.Следующий();
				
				СтрТч.РасходныйОрдер = ВыборкаЗапроса.Ссылка;
				ДокументОбъект.ЗаказКлиента = СтрТч.РасходныйОрдер.ДокументОснование;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурнал(Метаданные, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации("Прямые обмены данными"
								,УровеньЖурналаРегистрации.Ошибка
								,Метаданные
								,"" + ОписаниеОшибки
								,,);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъектКакЗагруженный(ТЗ, Вид, Тип, ЭтоДанныеНабораЗаписей = Ложь, ГУИД, ОписаниеОшибки = Неопределено)
	
	СтрТЗ = ТЗ.Добавить();
	СтрТЗ.Вид = Вид;
	СтрТЗ.Тип = Тип;
	СтрТЗ.ГУИД = ГУИД;
	СтрТЗ.ЭтоДанныеНабораЗаписей = ЭтоДанныеНабораЗаписей
	
КонецПроцедуры

#КонецОбласти