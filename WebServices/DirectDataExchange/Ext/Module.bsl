
#Область ОбработчикиОперций
////////////////////////////////////////////////////////////////////////////////
// Обработчики операций

Функция CheckEx(ID)

	Отказ = Истина;
	
	ДанныеУзла = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоХешИдентификатору(ID); 
	Если ЗначениеЗаполнено(ДанныеУзла) Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция MessageEx(ID, Data, MetadataName) Экспорт 
	
	ДанныеУзла = Обработки.УправлениеНастройкамиПрямогоОбмена.ПолучитьДанныеУзлаОбменаПоХешИдентификатору(ID); 
	Если ЗначениеЗаполнено(ДанныеУзла) Тогда
		
		//TODO: Реализовать механизм вызова менеджеров из подключенных внешних обработок
		НаименованиеУзла = ДанныеУзла.Наименование;
		
		Если НаименованиеУзла = "ЦПЗ_УТ" Тогда
			ЗначениеВозврата = ПрямойОбмен_УзелИсточник_ЦПЗ_УТ(ID, Data, MetadataName, ДанныеУзла);
		КонецЕсли;
		
		Если НаименованиеУзла = "ЦПЗ_БП" Тогда
			ЗначениеВозврата = ПрямойОбмен_УзелИсточник_ЦПЗ_БП(ID, Data, MetadataName, ДанныеУзла);
		КонецЕсли;
		
		Если НаименованиеУзла = "Весовая" Тогда
			ЗначениеВозврата = ПрямойОбмен_УзелИсточник_Весовая(ID, Data, MetadataName, ДанныеУзла);
		КонецЕсли;
		
	КонецЕсли;
	
	//TODO: реализовать более развернутый ответ от веб-сервиса
	Возврат СериализаторXDTO.ЗаписатьXDTO(ЗначениеВозврата);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрямойОбмен_УзелИсточник_ЦПЗ_УТ(ID, Data, MetadataName, ДанныеУзла) Экспорт
	
	Результат = Новый Структура("Отказ, ОписаниеОшибки, Результат", Ложь, "", Неопределено);
	
	МенеджерПрямогоОбмена = Обработки.МенеджерПрямогоОбмена_БП.Создать();
	
	Если MetadataName = "ЦПЗ_ЗаявкаНаДенежныеСредства" Тогда
		
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			МенеджерПрямогоОбмена.ВыполнитьПолучение_ЗаявкаНаДС(ДанныеДляОбработки);	
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если MetadataName = "ЦПЗ_ЗаявкаНаДенежныеСредства_Статус" Тогда
		
		Попытка
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			МенеджерПрямогоОбмена.ВыполнитьПолучение_ЗаявкаНаДС_Статус(ДанныеДляОбработки);
			
			Поток = Новый ПотокВПамяти(); 
			
			ЗаписьXML = новый ЗаписьXML;
			ЗаписьXML.ОткрытьПоток(Поток, "UTF-8");
			
			ЗаписьДОМ = Новый ЗаписьDOM;
			ЗаписьДОМ.Записать(ДанныеДляОбработки, ЗаписьXML);
			
			ЗаписьXML.Закрыть();
			
			ДанныеДляОтправки = Поток.ЗакрытьИПолучитьДвоичныеДанные();
			Результат.Результат = Новый ХранилищеЗначения(ДанныеДляОтправки);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если MetadataName = "ЦПЗ_РасходныйОрдерНаТовары" Тогда
		
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Результат.Результат = МенеджерПрямогоОбмена.ВыполнитьПолучение_РасходныйОрдерНаТовары(ДанныеДляОбработки);	
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если MetadataName = "ЦПЗ_СписаниеТМЦ" Тогда
		
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Результат.Результат = МенеджерПрямогоОбмена.ВыполнитьПолучение_СписаниеТМЦ("ЦПЗ_УТ", ДанныеДляОбработки);	
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если MetadataName = "ЦПЗ_СредняяЦенаНоменклатуры" Тогда
		
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Результат.Результат = МенеджерПрямогоОбмена.СредняяЦенаНоменклатуры("ЦПЗ_УТ", ДанныеДляОбработки);	
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если Найти(MetadataName, "Контрагент") Тогда
		
		Попытка
			
			Если Найти(MetadataName, "Контрагент.Взаиморасчеты") Тогда
		
				ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
				Результат.Результат = МенеджерПрямогоОбмена.ВыполнитьПолучение_КонтрагентВзаиморасчеты(ДанныеДляОбработки);
			
			КонецЕсли;
		
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрямойОбмен_УзелИсточник_ЦПЗ_БП(ID, Data, MetadataName, ДанныеУзла) Экспорт 
	
	Результат = Новый Структура("Отказ, ОписаниеОшибки, Результат", Ложь, "", Неопределено);
		
	МенеджерПрямогоОбмена = Обработки.МенеджерПрямогоОбмена_УТ.Создать();

	Если MetadataName = "ЦПЗ_ДанныеПоОтгрузке" Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			ТаблицаДанныхПоОтгрузке = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_ДанныеОтгрузки(ДанныеДляОбработки);
						
			Результат.Результат = Новый ХранилищеЗначения(ТаблицаДанныхПоОтгрузке);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если Найти(MetadataName, "ЦПЗ_СписаниеТМЦ") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "ЦПЗ_СписаниеТМЦ.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_СписаниеТМЦ_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_СписаниеТМЦ.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_СписаниеТМЦ(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_СписаниеТМЦ.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_СписаниеТМЦ(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
		
	Если Найти(MetadataName, "РеализацияТоваровУслуг") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "РеализацияТоваровУслуг.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_РеализацияТоваровУслуг_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "РеализацияТоваровУслуг.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_РеализацияТоваровУслуг(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "РеализацияТоваровУслуг.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_РеализацияТоваровУслуг(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если Найти(MetadataName, "ЦПЗ_ПеремещениеТМЦ") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "ЦПЗ_ПеремещениеТМЦ.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_ПеремещениеТМЦ.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_ПеремещениеТМЦ(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_ПеремещениеТМЦ.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_ПеремещениеТМЦ(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если Найти(MetadataName, "РасходныйОрдерНаТовары_УТ") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "РасходныйОрдерНаТовары_УТ.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "РасходныйОрдерНаТовары_УТ.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_РасходныйОрдерНаТовары_УТ(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "РасходныйОрдерНаТовары_УТ.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_РасходныйОрдерНаТовары_УТ(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если Найти(MetadataName, "ЦПЗ_КомплектацияНоменклатуры") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "ЦПЗ_КомплектацияНоменклатуры.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_КомплектацияНоменклатуры.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_КомплектацияНоменклатуры(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_КомплектацияНоменклатуры.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_КомплектацияНоменклатуры(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;
	
	Если MetadataName = "ЦПЗ_НоменклатураСпецификацииСчетаНаОплату" Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_НоменклатураСпецификацииСчетаНаОплату(ДанныеДляОбработки);
			
			Результат.Результат = Данные;//Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки; 
		
	КонецЕсли;
	
	Если Найти(MetadataName, "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение") Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			
			Если MetadataName = "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Список" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранение_Список(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Объект" Тогда
				Данные = МенеджерПрямогоОбмена.ПодготовитьДанныеДляОтправки_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ДанныеДляОбработки);
			КонецЕсли;
			
			Если MetadataName = "ЦПЗ_АктПриемаПередачиТоваровНаОтветственноеХранение.Объект_Данные" Тогда
				Данные = МенеджерПрямогоОбмена.ОбновитьДанные_АктПриемаПередачиТоваровНаОтветственноеХранениеОбъект(ДанныеДляОбработки);
			КонецЕсли;
			
			Результат.Результат = Новый ХранилищеЗначения(Данные);
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
		
	КонецЕсли;

	Если MetadataName = "ЦПЗ_ОбменПакетамиНСИ" Тогда
		
		Попытка
			
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Данные = МенеджерПрямогоОбмена.ПрочитатьПакетДанныхНСИ(ДанныеДляОбработки);
			Результат.Результат = Данные;
			
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрямойОбмен_УзелИсточник_Весовая(ID, Data, MetadataName, ДанныеУзла) Экспорт
	
	Результат = Новый Структура("Отказ, ОписаниеОшибки, Результат", Ложь, "", Неопределено);
	
	МенеджерПрямогоОбмена = Обработки.МенеджерПрямогоОбмена_УТ.Создать();
	
	Если MetadataName = "Весовая_СтатусОбъекта" Тогда
		
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data); 
			Результат.Результат = МенеджерПрямогоОбмена.ОбновитьДанныеСтатусаОбъекта(ДанныеУзла, ДанныеДляОбработки);	
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки();
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
	КонецЕсли;
	
	Если MetadataName = "Весовая_ОбменДанными" Тогда
		//В текущей реализации обмена Загрузка/Выгрузка производтся синхронно.
		//т.е. вызов сервиса выполняется с передачей в функцию данных загрузки
		// ,а ответ сервиса отправляет данные выгрузки
		Попытка 
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(Data, "ЧтениеXML"); 
			ДанныеДляОтправки = МенеджерПрямогоОбмена.Весовая_ОбменДанными(ДанныеУзла, ДанныеДляОбработки);
			Результат.Результат = Новый ХранилищеЗначения(ДанныеДляОтправки);
		Исключение
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки(); 
			ЗаписатьОшибкуВЖурнал(ДанныеУзла.Метаданные(), Результат.ОписаниеОшибки);	
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Подготовить данные для обработки
// 		Распаковывает данные и подготавливает их для дальнейшей обработки
// Параметры:
//  ВходящиеДанные - Произвольный - ХранилищеЗначения (ДвоичныеДанные - XML) - XML сообщение из базы источника
// 
// Возвращаемое значение:
//   ВходящиеДанные:ХранилищеЗначения - ЧтениеXML
//
Функция ПодготовитьДанныеДляОбработки(ВходящиеДанные, ТипЗнчВозврата = "ПостроительDOM") Экспорт

	ЗначениеВозврата = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ХранилищеЗначения") Тогда
		
		Данные = ВходящиеДанные.Получить();	
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Поток = Данные.ОткрытьПотокДляЧтения();
			
			Если ТипЗнчВозврата = "ЧтениеXML" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ЗначениеВозврата = ЧтениеXML;
			ИначеЕсли ТипЗнчВозврата = "ПостроительDOM" Тогда
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Поток);
				ПостроительDOM = Новый ПостроительDOM;
				ЗначениеВозврата = ПостроительDOM.Прочитать(ЧтениеXML);
			Иначе
				ЗначениеВозврата = ПолучитьСтрокуИзДвоичныхДанных(Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ЗначениеВозврата = Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурнал(Метаданные, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации("Прямые обмены данными"
								,УровеньЖурналаРегистрации.Ошибка
								,Метаданные
								,"" + ОписаниеОшибки
								,,);
	
КонецПроцедуры

#КонецОбласти
